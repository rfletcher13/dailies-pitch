{%- comment -%}
  {%- doc -%}
    @prompt
    The user wants to refactor an existing Shopify Liquid snippet and section into a single, self-contained Shopify Liquid block file.
    This block will replace the standard product form (variant options, quantity selector, add to cart, subscribe buttons, etc.) on a product page.
    The goal is to create a "Build-A-Box" functionality similar to the provided UI images.

    Functional Requirements:
    1.  Bag Selection: Allow users to choose the number of bags (e.g., 1, 2, 3, 4 bags), with a "Best Deal" badge for one option.
    2.  Purchase Type: Offer "Subscribe & Save" and "One-time Purchase" options.
        - Subscription option should show benefits and discounted pricing.
        - Prices should update dynamically based on bag selection and purchase type.
    3.  Flavor Selection:
        - Display a list of available flavors.
        - Each flavor item should show:
            - Flavor image (if available).
            - Flavor name.
            - Flavor description (sourced from variant metafield `custom.flavor_description`).
            - Quantity controls: An "Add" button initially, which, when clicked, changes to a quantity stepper (+/- buttons and an input field).
    4.  Dynamic Pricing & Subtotal:
        - Subtotal should reflect the price of selected bags and purchase type.
        - A "You're saving X" badge should appear if there's a discount.
    5.  Add to Cart Button:
        - Button text should update to indicate how many more bags need to be selected if the minimum is not met (e.g., "Select 2 More Bags").
        - Button should be disabled until the required number of bags are selected.
        - On click, add the selected variants (with quantities and Skio-specific properties, including selling plan ID for subscriptions) to the cart.
    6.  Data Fetching:
        - Fetch dynamic box configuration (pricing, discounts, variants) from a Skio API endpoint.
        - Load flavor descriptions from variant metafields.
    7.  Responsiveness: The block should be responsive and adapt to different screen sizes.

    Styling Considerations:
    - Replicate the visual style of the provided UI images for bag selection, purchase options, flavor cards, and summary.
    - All CSS must be namespaced using a unique ID.
    - Styling options (colors, fonts, spacing) should be configurable via block settings.

    UX Specifications:
    - Interactive elements like bag selection, purchase type, and flavor quantity steppers.
    - Clear visual feedback for selections and pricing changes.
    - Informative messages for users (e.g., bags to add, savings).

    Metafield Dependencies:
    - `variant.metafields.custom.flavor_description` for flavor descriptions.
    - The Skio API response will dictate available product variants, pricing, and discount tiers.

    Block Structure:
    - The block will be a single .liquid file.
    - Order: Doc block, Unique ID, Global Liquid, CSS, HTML, JavaScript, Schema.
    - JavaScript should be encapsulated (Custom Element preferred).
    - Schema must be comprehensive.

    Instructions from prompt:
    - "Remove the images as well from the block." This refers to the main product image carousel and USP icons from the original snippet, NOT the individual flavor images within the selection list. The block is meant to replace the *form* part of the product page.
    - The provided snippet code (including HTML, CSS, JS) for the old "Build-A-Box" component should be adapted and integrated.
    - The section schema provided gives clues about configurable texts and settings.

    Key changes from snippet/section to block:
    - `product` object will be `block.settings.main_product` or the contextual `product`.
    - All settings will come from `block.settings`.
    - CSS and JS selectors will be namespaced with `{{ rob_custom }}`.
  {%- enddoc -%}
{%- endcomment -%}

{%- assign rob_custom = block.id | replace: '_', '' | downcase -%}

{%- liquid
  assign main_product = block.settings.main_product
  if main_product == blank and product != blank
    assign main_product = product
  endif

  assign box_product_id_json = main_product.id | json
  assign skio_api_url = 'https://api.skio.com/storefront-http/get-dynamic-box' %}{% comment %} TODO: Potentially make this a setting {% endcomment %}

  assign flavors_collection_handle = block.settings.flavors_collection_handle | default: "all"
  assign flavors_collection = collections[flavors_collection_handle]

  capture flavor_metafields_json
    echo '{'
    assign first_product_metafield = true
    for prod_in_coll in flavors_collection.products
      for variant_in_coll in prod_in_coll.variants
        unless first_product_metafield
          echo ','
        endunless
        assign first_product_metafield = false
        assign variant_id_for_metafield = variant_in_coll.id

        if variant_in_coll.metafields.custom.flavor_description != blank
          echo '"' | append: variant_id_for_metafield | append: '": "' | append: variant_in_coll.metafields.custom.flavor_description | escape | append: '"'
        else
          echo '"' | append: variant_id_for_metafield | append: '": "No flavor description available."'
        endif
      endfor
    endfor
    echo '}'
  endcapture
-%}

{%- style -%}
  .rf-bab-form-wrapper-{{ rob_custom }} {
    display: block;
    margin-top: {{ block.settings.margin_top }}px;
    margin-bottom: {{ block.settings.margin_bottom }}px;
    padding: {{ block.settings.padding_block }}px {{ block.settings.padding_inline }}px;
    background-color: {{ block.settings.background_color }};
    border: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .rf-bab-form-{{ rob_custom }} {
    display: flex;
    flex-direction: column;
    gap: 20px;
    font-family: {{ block.settings.font_family.family }}, {{ block.settings.font_family.fallback_families }};
  }

  /* Bag Selection */
  .bag-selection-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.bag_options_per_row | default: 2 }}, 1fr);
    gap: {{ block.settings.bag_option_gap }}px;
  }

  .bag-option-{{ rob_custom }} {
    position: relative;
    border: 1px solid {{ block.settings.bag_option_border_color }};
    border-radius: {{ block.settings.bag_option_border_radius }}px;
    padding: {{ block.settings.bag_option_padding_vertical }}px {{ block.settings.bag_option_padding_horizontal }}px;
    text-align: center;
    cursor: pointer;
    background: {{ block.settings.bag_option_bg_color }};
    transition: border 0.3s ease, background-color 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 50px;
  }

  .bag-option-{{ rob_custom }}.selected-{{ rob_custom }} {
    border: 2px solid {{ block.settings.bag_option_selected_border_color }};
    background: {{ block.settings.bag_option_selected_bg_color }};
  }

  .bag-option-{{ rob_custom }}:hover {
    border-color: {{ block.settings.bag_option_hover_border_color }};
  }

  .deal-badge-{{ rob_custom }} {
    position: absolute;
    top: -10px;
    left: 50%;
    transform: translateX(-50%);
    background: {{ block.settings.best_deal_badge_bg_color }};
    color: {{ block.settings.best_deal_badge_text_color }};
    padding: 2px 6px;
    border-radius: 3px;
    font-size: {{ block.settings.best_deal_badge_font_size }}px;
    font-weight: bold;
    white-space: nowrap;
  }

  .bag-count-{{ rob_custom }} {
    font-size: {{ block.settings.bag_count_font_size }}px;
    font-weight: {{ block.settings.bag_count_font_weight }};
    color: {{ block.settings.bag_count_text_color }};
  }
  .bag-option-{{ rob_custom }}.selected-{{ rob_custom }} .bag-count-{{ rob_custom }} {
    color: {{ block.settings.bag_count_selected_text_color }};
  }

  /* Purchase Options */
  .purchase-options-{{ rob_custom }} {
    display: flex;
    flex-direction: column;
    gap: {{ block.settings.purchase_option_gap }}px;
  }

  .purchase-type-button-{{ rob_custom }} {
    background: {{ block.settings.purchase_option_bg_color }};
    border: 1px solid {{ block.settings.purchase_option_border_color }};
    border-radius: {{ block.settings.purchase_option_border_radius }}px;
    padding: {{ block.settings.purchase_option_padding_vertical }}px {{ block.settings.purchase_option_padding_horizontal }}px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    cursor: pointer;
    transition: border-color 0.3s ease, background-color 0.3s ease;
    position: relative;
    opacity: 0.8;
  }

  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} {
    opacity: 1;
    border-color: {{ block.settings.purchase_option_selected_border_color }};
    background: {{ block.settings.purchase_option_selected_bg_color }};
  }

  .purchase-type-button-{{ rob_custom }}:hover {
    border-color: {{ block.settings.purchase_option_hover_border_color }};
  }

  .purchase-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .purchase-type-label-{{ rob_custom }} {
    font-weight: {{ block.settings.purchase_title_font_weight }};
    font-size: {{ block.settings.purchase_title_font_size }}px;
    color: {{ block.settings.purchase_title_text_color }};
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} .purchase-type-label-{{ rob_custom }} {
    color: {{ block.settings.purchase_title_selected_text_color }};
  }

  .price-container-{{ rob_custom }} {
    display: flex;
    align-items: baseline;
    gap: 8px;
  }

  .original-price-{{ rob_custom }} {
    color: {{ block.settings.original_price_color }};
    font-size: {{ block.settings.price_font_size | minus: 2 }}px;
    opacity: 0.8;
  }

  .original-price-{{ rob_custom }}.strikethrough-{{ rob_custom }} {
    text-decoration: line-through;
    color: {{ block.settings.strikethrough_price_color }};
  }

  .purchase-type-price-{{ rob_custom }} {
    font-size: {{ block.settings.price_font_size }}px;
    color: {{ block.settings.discounted_price_color }};
    font-weight: bold;
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} .purchase-type-price-{{ rob_custom }} {
    color: {{ block.settings.discounted_price_selected_color }};
  }


  .subscribe-benefits-grid-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 6px;
    margin-top: 4px;
  }

  .benefit-item-{{ rob_custom }} {
    display: flex;
    align-items: flex-start;
    gap: 6px;
    font-size: {{ block.settings.benefit_font_size }}px;
    color: {{ block.settings.benefit_text_color }};
    line-height: 1.3;
  }

  .benefit-checkmark-{{ rob_custom }} {
    color: {{ block.settings.benefit_checkmark_color }};
    font-weight: bold;
  }

  .subscribe-discount-badge-{{ rob_custom }} {
    background: {{ block.settings.save_badge_bg_color }};
    color: {{ block.settings.save_badge_text_color }};
    padding: 3px 8px;
    border-radius: 12px;
    font-size: {{ block.settings.save_badge_font_size }}px;
    font-weight: 600;
    text-align: center;
    margin-top: 8px;
    display: none; /* Shown by JS */
  }

  /* Flavor Selection */
  .variant-selection-container-{{ rob_custom }} {
    margin-top: {{ block.settings.flavor_section_margin_top }}px;
  }

  .variant-section-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: {{ block.settings.flavor_header_margin_bottom }}px;
  }

  .variant-section-title-{{ rob_custom }} {
    margin: 0;
    color: {{ block.settings.flavor_title_color }};
    font-size: {{ block.settings.flavor_title_font_size }}px;
    font-weight: {{ block.settings.flavor_title_font_weight }};
    text-transform: {{ block.settings.flavor_title_transform }};
  }

  .quantity-status-message-{{ rob_custom }} {
    text-align: right;
    font-size: {{ block.settings.status_message_font_size }}px;
    padding: 4px 8px;
    border-radius: 4px;
    margin-left: 10px;
    display: none; /* Shown by JS */
  }
  .quantity-status-message-{{ rob_custom }}.info-{{ rob_custom }} {
    color: {{ block.settings.status_message_info_text_color }};
    background: {{ block.settings.status_message_info_bg_color }};
  }
  .quantity-status-message-{{ rob_custom }}.error-{{ rob_custom }} {
    color: {{ block.settings.status_message_error_text_color }};
    background: {{ block.settings.status_message_error_bg_color }};
  }


  .variants-grid-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax({{ block.settings.flavor_card_min_width }}px, 1fr));
    gap: {{ block.settings.flavor_card_gap }}px;
  }

  .variant-card-{{ rob_custom }} {
    display: flex; /* Changed to flex for better control */
    flex-direction: column; /* Stack items vertically */
    gap: 8px; /* Gap between image, info, controls */
    border: 1px solid {{ block.settings.flavor_card_border_color }};
    border-radius: {{ block.settings.flavor_card_border_radius }}px;
    padding: {{ block.settings.flavor_card_padding }}px;
    background: {{ block.settings.flavor_card_bg_color }};
    transition: border-color 0.3s ease;
    box-sizing: border-box;
  }
  .variant-card-{{ rob_custom }}:hover {
    border-color: {{ block.settings.flavor_card_hover_border_color }};
  }

  .variant-image-wrapper-{{ rob_custom }} {
      width: 100%; /* Take full width of card */
      padding-top: 100%; /* Aspect ratio 1:1 */
      position: relative;
      overflow: hidden;
      border-radius: {{ block.settings.flavor_image_border_radius }}px;
      margin-bottom: 8px; /* Space below image */
  }

  .variant-image-{{ rob_custom }} {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover; /* Or 'contain' if preferred */
  }
  
  .variant-info-{{ rob_custom }} {
    display: flex;
    flex-direction: column;
    gap: 4px;
    overflow: hidden;
    text-align: {{ block.settings.flavor_text_align }};
  }

  .variant-title-{{ rob_custom }} {
    margin: 0;
    font-size: {{ block.settings.flavor_name_font_size }}px;
    font-weight: {{ block.settings.flavor_name_font_weight }};
    color: {{ block.settings.flavor_name_color }};
    line-height: 1.3;
  }

  .variant-description-{{ rob_custom }} {
    font-size: {{ block.settings.flavor_desc_font_size }}px;
    color: {{ block.settings.flavor_desc_color }};
    line-height: 1.4;
    /* max 2 lines with ellipsis - might need JS for perfect cross-browser */
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    min-height: calc(1.4em * 2); /* Approximate height for 2 lines */
  }
  
  .quantity-controls-container-{{ rob_custom }} {
    margin-top: auto; /* Pushes controls to the bottom */
    padding-top: 8px; /* Space above controls */
  }

  .quantity-controls-{{ rob_custom }} {
    display: flex;
    align-items: center;
    justify-content: center; /* Center single add button */
    width: 100%;
  }

  .add-btn-{{ rob_custom }} {
    background: {{ block.settings.flavor_add_button_bg_color }};
    color: {{ block.settings.flavor_add_button_text_color }};
    border: 1px solid {{ block.settings.flavor_add_button_border_color }};
    border-radius: {{ block.settings.flavor_add_button_border_radius }}px;
    padding: {{ block.settings.flavor_add_button_padding_vertical }}px {{ block.settings.flavor_add_button_padding_horizontal }}px;
    font-size: {{ block.settings.flavor_add_button_font_size }}px;
    font-weight: {{ block.settings.flavor_add_button_font_weight }};
    cursor: pointer;
    transition: background-color 0.3s ease, border-color 0.3s ease;
    width: 100%;
    text-align: center;
  }
  .add-btn-{{ rob_custom }}:hover {
    background: {{ block.settings.flavor_add_button_hover_bg_color }};
    color: {{ block.settings.flavor_add_button_hover_text_color }};
    border-color: {{ block.settings.flavor_add_button_hover_border_color }};
  }

  .quantity-input-group-{{ rob_custom }} {
    display: flex;
    align-items: center;
    gap: 5px;
    border: 1px solid {{ block.settings.quantity_input_border_color }};
    border-radius: {{ block.settings.quantity_input_border_radius }}px;
    padding: 5px;
    width: 100%;
    justify-content: space-between;
  }

  .quantity-btn-{{ rob_custom }} {
    background: {{ block.settings.quantity_button_bg_color }};
    border: none;
    border-radius: {{ block.settings.quantity_button_border_radius }}px;
    width: {{ block.settings.quantity_button_size }}px;
    height: {{ block.settings.quantity_button_size }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: {{ block.settings.quantity_button_icon_size }}px;
    font-weight: bold;
    cursor: pointer;
    color: {{ block.settings.quantity_button_text_color }};
    transition: background-color 0.2s ease;
    line-height: 1;
  }
  .quantity-btn-{{ rob_custom }}:hover {
    background: {{ block.settings.quantity_button_hover_bg_color }};
    color: {{ block.settings.quantity_button_hover_text_color }};
  }

  .variant-quantity-{{ rob_custom }} {
    width: 30px; /* Adjust as needed */
    text-align: center;
    border: none;
    font-size: {{ block.settings.quantity_input_font_size }}px;
    font-weight: bold;
    color: {{ block.settings.quantity_input_text_color }};
    background: transparent;
    outline: none;
    padding: 0;
    -moz-appearance: textfield;
  }
  .variant-quantity-{{ rob_custom }}::-webkit-outer-spin-button,
  .variant-quantity-{{ rob_custom }}::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Price Summary & Savings */
  .price-summary-{{ rob_custom }} {
    display: none; /* Shown by JS */
    justify-content: space-between;
    align-items: center;
    margin-top: {{ block.settings.summary_margin_top }}px;
    padding: {{ block.settings.summary_padding_vertical }}px {{ block.settings.summary_padding_horizontal }}px;
    background-color: {{ block.settings.summary_bg_color }};
    border: 1px solid {{ block.settings.summary_border_color }};
    border-radius: {{ block.settings.summary_border_radius }}px;
  }
  .price-summary-{{ rob_custom }}.visible-{{ rob_custom }} {
    display: flex;
  }

  .subtotal-{{ rob_custom }} {
    font-size: {{ block.settings.subtotal_font_size }}px;
    font-weight: {{ block.settings.subtotal_font_weight }};
    color: {{ block.settings.subtotal_text_color }};
  }

  .savings-badge-{{ rob_custom }} {
    background: {{ block.settings.final_savings_badge_bg_color }};
    color: {{ block.settings.final_savings_badge_text_color }};
    padding: 6px 12px;
    border-radius: {{ block.settings.final_savings_badge_border_radius }}px;
    font-size: {{ block.settings.final_savings_badge_font_size }}px;
    font-weight: {{ block.settings.final_savings_badge_font_weight }};
    display: none; /* Shown by JS */
  }

  /* Add to Cart Button */
  .add-to-cart-button-{{ rob_custom }} {
    background: {{ block.settings.atc_button_bg_color }};
    color: {{ block.settings.atc_button_text_color }};
    border: 1px solid {{ block.settings.atc_button_border_color }};
    border-radius: {{ block.settings.atc_button_border_radius }}px;
    padding: {{ block.settings.atc_button_padding_vertical }}px {{ block.settings.atc_button_padding_horizontal }}px;
    font-size: {{ block.settings.atc_button_font_size }}px;
    font-weight: {{ block.settings.atc_button_font_weight }};
    text-transform: {{ block.settings.atc_button_text_transform }};
    cursor: pointer;
    width: 100%;
    transition: background-color 0.3s ease, opacity 0.3s ease, border-color 0.3s ease;
    margin-top: {{ block.settings.atc_button_margin_top }}px;
    text-align: center;
  }
  .add-to-cart-button-{{ rob_custom }}:hover:not(:disabled) {
    background: {{ block.settings.atc_button_hover_bg_color }};
    color: {{ block.settings.atc_button_hover_text_color }};
    border-color: {{ block.settings.atc_button_hover_border_color }};
  }
  .add-to-cart-button-{{ rob_custom }}:disabled {
    background: {{ block.settings.atc_button_disabled_bg_color }};
    color: {{ block.settings.atc_button_disabled_text_color }};
    border-color: {{ block.settings.atc_button_disabled_border_color | default: block.settings.atc_button_disabled_bg_color }};
    cursor: not-allowed;
    opacity: 0.7;
  }

  @media (max-width: 768px) {
    .bag-selection-{{ rob_custom }} {
      grid-template-columns: repeat({{ block.settings.bag_options_per_row_mobile | default: 2 }}, 1fr);
    }
    .purchase-header-{{ rob_custom }} {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
    }
    .price-container-{{ rob_custom }} {
        width: 100%;
        justify-content: flex-end;
    }
    .variants-grid-{{ rob_custom }} {
        grid-template-columns: repeat(auto-fill, minmax({{ block.settings.flavor_card_min_width_mobile | default: 130 }}px, 1fr));
    }
  }
{%- endstyle -%}

<div class="rf-bab-form-wrapper-{{ rob_custom }}" {{ block.shopify_attributes }}>
  {%- if main_product -%}
    <build-a-box-form-{{ rob_custom }}
      data-product-id="{{ main_product.id }}"
      data-skio-api-url="{{ skio_api_url }}"
      data-rob-custom-id="{{ rob_custom }}"
      data-currency-code="{{ cart.currency.iso_code | default: 'USD' }}"
    >
      <div class="rf-bab-form-{{ rob_custom }}">
        <!-- Bag Selection -->
        <div class="bag-selection-{{ rob_custom }}">
          {%- for i in (1..4) reversed -%}
            {%- liquid
              assign bags = i
              assign is_best_deal = false
              if bags == block.settings.best_deal_bag_count
                assign is_best_deal = true
              endif
            -%}
            <div
              class="bag-option-{{ rob_custom }}{% if is_best_deal %} best-deal-{{ rob_custom }}{% endif %}"
              data-bags="{{ bags }}"
            >
              {%- if is_best_deal -%}
                <span class="deal-badge-{{ rob_custom }}">{{ block.settings.best_deal_badge_text }}</span>
              {%- endif -%}
              <span class="bag-count-{{ rob_custom }}">
                {{ bags }} {{ bags | at_most: 1 | prepend: ' ' | append: block.settings.bag_option_text_singular | default: 'Bag' }}{{ bags | at_least: 2 | prepend: ' ' | append: block.settings.bag_option_text_plural | default: 'Bags' }}
              </span>
            </div>
          {%- endfor -%}
        </div>

        <!-- Purchase Options -->
        <div class="purchase-options-{{ rob_custom }}">
          <div class="purchase-type-button-{{ rob_custom }}" data-purchase-type="subscribe">
            <div class="purchase-header-{{ rob_custom }}">
              <div class="purchase-type-label-{{ rob_custom }}">{{ block.settings.subscribe_title }}</div>
              <div class="price-container-{{ rob_custom }}">
                <div class="original-price-{{ rob_custom }}" data-price-original-subscribe></div>
                <div class="purchase-type-price-{{ rob_custom }}" data-price-total-subscribe></div>
              </div>
            </div>
            {%- if block.settings.show_subscription_benefits -%}
              <div class="subscribe-benefits-grid-{{ rob_custom }}">
                {%- if block.settings.benefit_1 != blank -%}
                  <div class="benefit-item-{{ rob_custom }}">
                    <span class="benefit-checkmark-{{ rob_custom }}">✓</span><span>{{ block.settings.benefit_1 }}</span>
                  </div>
                {%- endif -%}
                {%- if block.settings.benefit_2 != blank -%}
                  <div class="benefit-item-{{ rob_custom }}">
                    <span class="benefit-checkmark-{{ rob_custom }}">✓</span><span>{{ block.settings.benefit_2 }}</span>
                  </div>
                {%- endif -%}
                {%- if block.settings.benefit_3 != blank -%}
                  <div class="benefit-item-{{ rob_custom }}">
                    <span class="benefit-checkmark-{{ rob_custom }}">✓</span><span>{{ block.settings.benefit_3 }}</span>
                  </div>
                {%- endif -%}
                {%- if block.settings.benefit_4 != blank -%}
                  <div class="benefit-item-{{ rob_custom }}">
                    <span class="benefit-checkmark-{{ rob_custom }}">✓</span><span>{{ block.settings.benefit_4 }}</span>
                  </div>
                {%- endif -%}
              </div>
            {%- endif -%}
            <div class="subscribe-discount-badge-{{ rob_custom }}" data-subscribe-discount-badge></div>
          </div>

          <div class="purchase-type-button-{{ rob_custom }}" data-purchase-type="onetime">
            <div class="purchase-header-{{ rob_custom }}">
              <div class="purchase-type-label-{{ rob_custom }}">{{ block.settings.onetime_title }}</div>
              <div class="price-container-{{ rob_custom }}">
                <div class="original-price-{{ rob_custom }}" data-price-original-onetime></div>
                <div class="purchase-type-price-{{ rob_custom }}" data-price-total-onetime></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Variant Selection -->
        <div class="variant-selection-container-{{ rob_custom }}">
          <div class="variant-section-header-{{ rob_custom }}">
            <h3 class="variant-section-title-{{ rob_custom }}">{{ block.settings.select_flavors_title }}</h3>
            <div class="quantity-status-message-{{ rob_custom }}" data-quantity-status-message></div>
          </div>
          <div class="variants-grid-{{ rob_custom }}" data-variants-grid>
            {%- comment -%} Flavor cards will be populated by JavaScript {%- endcomment -%}
            <p data-loading-flavors>{{ block.settings.loading_flavors_text }}</p>
          </div>
        </div>

        <!-- Price Summary -->
        <div class="price-summary-{{ rob_custom }}" data-price-summary>
          <div class="subtotal-{{ rob_custom }}" data-subtotal-price-text>
            {{ block.settings.subtotal_label }} <span data-subtotal-price>$0.00</span>
          </div>
          <div class="savings-badge-{{ rob_custom }}" data-savings-badge>
            {{ block.settings.savings_badge_text_template }}
          </div>
        </div>

        <!-- Add to Cart Button -->
        <button class="add-to-cart-button-{{ rob_custom }}" data-add-to-cart-button disabled>
          {{ block.settings.atc_button_text_default }}
        </button>
      </div>
    </build-a-box-form-{{ rob_custom }}>

    <script type="application/json" data-flavor-metafields-json-{{ rob_custom }}>
      {{ flavor_metafields_json }}
    </script>
  {%- else -%}
    <p>Please select a "Main Box Product" in the block settings.</p>
  {%- endif -%}
</div>

<script>
  class BuildABoxForm extends HTMLElement {
    constructor() {
      super();
      this.robCustomId = this.dataset.robCustomId;
      this.productId = this.dataset.productId;
      this.skioApiUrl = this.dataset.skioApiUrl;
      this.currencyCode = this.dataset.currencyCode || 'USD';

      this.skioData = null;
      this.variantPrices = {};
      this.isSubscription = false;
      this.flavorMetafields = {};
      this.defaultSelectedBags = parseInt(this.getAttribute('data-default-bags') || '{{ block.settings.default_selected_bags }}');

      this.selectors = {
        bagOption: `.bag-option-${this.robCustomId}`,
        selectedBagOption: `.bag-option-${this.robCustomId}.selected-${this.robCustomId}`,
        purchaseTypeButton: `.purchase-type-button-${this.robCustomId}`,
        variantsGrid: `[data-variants-grid]`,
        addToCartButton: `[data-add-to-cart-button]`,
        priceOriginalSubscribe: `[data-price-original-subscribe]`,
        priceTotalSubscribe: `[data-price-total-subscribe]`,
        priceOriginalOnetime: `[data-price-original-onetime]`,
        priceTotalOnetime: `[data-price-total-onetime]`,
        subscribeDiscountBadge: `[data-subscribe-discount-badge]`,
        subtotalPriceText: `[data-subtotal-price-text]`,
        subtotalPriceValue: `[data-subtotal-price]`,
        savingsBadge: `[data-savings-badge]`,
        savingsAmount: `[data-savings-amount]`,
        quantityStatusMessage: `[data-quantity-status-message]`,
        priceSummary: `[data-price-summary]`,
        loadingFlavors: `[data-loading-flavors]`,
        variantCard: `.variant-card-${this.robCustomId}`,
        addBtn: `.add-btn-${this.robCustomId}`,
        quantityInputGroup: `.quantity-input-group-${this.robCustomId}`,
        quantityBtn: `.quantity-btn-${this.robCustomId}`,
        variantQuantityInput: `.variant-quantity-${this.robCustomId}`,
      };

      this.textTemplates = {
        atcDefault: "{{ block.settings.atc_button_text_default | escape }}",
        atcAddMoreSingular: "{{ block.settings.atc_button_text_add_more_singular | escape }}",
        atcAddMorePlural: "{{ block.settings.atc_button_text_add_more_plural | escape }}",
        statusAllSet: "{{ block.settings.all_set_message | escape }}",
        statusAddMoreSingular: "{{ block.settings.add_more_flavors_message_singular | escape }}",
        statusAddMorePlural: "{{ block.settings.add_more_flavors_message_plural | escape }}",
      };

      this.loadFlavorMetafields();
    }

    connectedCallback() {
      this.init();
    }

    loadFlavorMetafields() {
      const metafieldsScript = document.querySelector(`script[data-flavor-metafields-json-${this.robCustomId}]`);
      if (metafieldsScript) {
        try {
          this.flavorMetafields = JSON.parse(metafieldsScript.textContent);
          // console.log(`[${this.robCustomId}] Flavor metafields loaded:`, Object.keys(this.flavorMetafields).length);
        } catch (e) {
          console.error(`[${this.robCustomId}] Error parsing flavor metafields JSON:`, e);
        }
      } else {
        console.warn(`[${this.robCustomId}] Flavor metafields script tag not found.`);
      }
    }

    async init() {
      this.cacheDOM();
      this.bindEvents();
      this.setDefaultSelections();
      await this.fetchSkioData();
      this.populateVariantSelector();
      this.updateUI();
    }

    cacheDOM() {
      this.dom = {};
      for (const key in this.selectors) {
        this.dom[key] = this.querySelectorAll(this.selectors[key]);
        if (this.dom[key].length === 1 && !key.endsWith('Btn') && !key.endsWith('Button') && key !== 'variantsGrid' && key !== 'priceSummary' && key !== 'savingsBadge' && key !== 'quantityStatusMessage' && key !== 'loadingFlavors') {
          this.dom[key] = this.querySelector(this.selectors[key]);
        }
      }
    }

    bindEvents() {
      this.dom.bagOption.forEach(option => option.addEventListener('click', this.handleBagSelection.bind(this)));
      this.dom.purchaseTypeButton.forEach(button => button.addEventListener('click', this.handlePurchaseTypeSelection.bind(this)));
      if(this.dom.addToCartButton) this.dom.addToCartButton.addEventListener('click', this.handleAddToCart.bind(this));
    }

    setDefaultSelections() {
      // Default bag selection
      const defaultBagEl = this.querySelector(`${this.selectors.bagOption}[data-bags="${this.defaultSelectedBags}"]`);
      if (defaultBagEl) {
        defaultBagEl.classList.add(`selected-${this.robCustomId}`);
      } else if (this.dom.bagOption.length > 0) { // Fallback to the first option if default not found
        this.dom.bagOption[0].classList.add(`selected-${this.robCustomId}`);
      }

      // Default purchase type (subscribe)
      const subscribeButton = this.querySelector(`${this.selectors.purchaseTypeButton}[data-purchase-type="subscribe"]`);
      if (subscribeButton) {
        subscribeButton.classList.add(`selected-${this.robCustomId}`);
        this.isSubscription = true;
      }
    }

    async fetchSkioData() {
      // console.log(`[${this.robCustomId}] Fetching Skio data for product ID:`, this.productId);
      try {
        const response = await fetch(this.skioApiUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productPlatformId: `gid://shopify/Product/${this.productId}` })
        });
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();
        // console.log(`[${this.robCustomId}] Raw Skio Response:`, data);

        if (data && data.DynamicBox) {
            this.skioData = this.parseSkioResponse(data.DynamicBox);
            // console.log(`[${this.robCustomId}] Parsed Skio Data:`, this.skioData);
        } else {
            throw new Error("Skio data is not in expected format or DynamicBox is missing.");
        }
      } catch (error) {
        console.error(`[${this.robCustomId}] Error fetching or parsing SkioBox data:`, error);
        if (this.dom.loadingFlavors) this.dom.loadingFlavors.textContent = 'Error loading flavors. Please try again later.';
      }
    }

    parseSkioResponse(apiResponse) {
        return {
            boxId: apiResponse.boxId,
            currencyCode: apiResponse.currencyCode || 'USD',
            fixedDiscountTier: apiResponse.fixedDiscountTier || null,
            percentDiscountTier: apiResponse.percentDiscountTier || {},
            sizeRange: apiResponse.sizeRange || null,
            sizeInterval: apiResponse.sizeInterval || [1, 2, 3, 4],
            priceRange: apiResponse.priceRange || null,
            selectableProductVariants: (apiResponse.selectableProductVariants || []).map(product => ({
                productTitle: product.productTitle,
                productImageSrc: product.productImageSrc,
                productPlatformId: product.productPlatformId,
                productHandle: product.productHandle,
                productVariants: (product.productVariants || []).map(variant => ({
                    platformId: variant.platformId, // e.g., "gid://shopify/ProductVariant/12345"
                    productVariantTitle: variant.productVariantTitle,
                    imageSrc: variant.imageSrc,
                    price: parseFloat(variant.price) || 0,
                    compareAtPrice: parseFloat(variant.compareAtPrice) || 0,
                    inventory: variant.inventory
                }))
            })),
            sellingPlanGroup: apiResponse.sellingPlanGroup || {}, // This is an object, not array
            settings: apiResponse.settings,
            theme: apiResponse.theme
        };
    }

    getVariantsFromSkio() {
      if (!this.skioData || !this.skioData.selectableProductVariants) return [];
      return this.skioData.selectableProductVariants.flatMap(p => p.productVariants);
    }

    populateVariantSelector() {
      const variants = this.getVariantsFromSkio();
      // console.log(`[${this.robCustomId}] Populating variants:`, variants.length);
      const grid = this.dom.variantsGrid;
      if (!grid) return;
      grid.innerHTML = ''; // Clear loading message or previous items

      if (variants.length === 0) {
        grid.innerHTML = `<p>No flavors available for this box configuration.</p>`;
        return;
      }

      variants.forEach(variant => {
        this.variantPrices[variant.platformId] = variant.price;
        const variantIdNum = variant.platformId.split('/').pop();
        const flavorDescription = this.flavorMetafields[variantIdNum] || "Description not available.";

        const card = document.createElement('div');
        card.className = `variant-card-${this.robCustomId}`;
        card.innerHTML = `
          ${variant.imageSrc ? `<div class="variant-image-wrapper-${this.robCustomId}"><img src="${variant.imageSrc}" alt="${variant.productVariantTitle.replace(/"/g, '"')}" class="variant-image-${this.robCustomId}" loading="lazy"></div>` : ''}
          <div class="variant-info-${this.robCustomId}">
            <h4 class="variant-title-${this.robCustomId}">${variant.productVariantTitle}</h4>
            <p class="variant-description-${this.robCustomId}">${flavorDescription}</p>
          </div>
          <div class="quantity-controls-container-${this.robCustomId}">
            <div class="quantity-controls-${this.robCustomId}">
                <button class="add-btn-${this.robCustomId}" data-variant-id="${variant.platformId}">{{ block.settings.flavor_add_button_text | escape }}</button>
                <div class="quantity-input-group-${this.robCustomId}" style="display: none;">
                    <button class="quantity-btn-${this.robCustomId}" data-action="decrease" data-variant-id="${variant.platformId}">-</button>
                    <input type="number" class="variant-quantity-${this.robCustomId}" value="0" min="0" max="99" data-variant-id="${variant.platformId}" readonly>
                    <button class="quantity-btn-${this.robCustomId}" data-action="increase" data-variant-id="${variant.platformId}">+</button>
                </div>
            </div>
          </div>
        `;
        grid.appendChild(card);
      });
      this.bindVariantQuantityControls();
      this.updateUI(); // Initial UI update after population
    }

    bindVariantQuantityControls() {
        this.querySelectorAll(this.selectors.addBtn).forEach(btn => {
            btn.addEventListener('click', (e) => this.handleAddButtonClick(e.currentTarget));
        });
        this.querySelectorAll(this.selectors.quantityBtn).forEach(btn => {
            btn.addEventListener('click', (e) => this.handleQuantityButtonClick(e.currentTarget));
        });
    }

    handleAddButtonClick(buttonEl) {
        const quantityGroup = buttonEl.nextElementSibling;
        const input = quantityGroup.querySelector(this.selectors.variantQuantityInput);
        
        buttonEl.style.display = 'none';
        quantityGroup.style.display = 'flex';
        input.value = 1;
        this.updateUI();
    }

    handleQuantityButtonClick(buttonEl) {
        const action = buttonEl.dataset.action;
        const quantityGroup = buttonEl.closest(this.selectors.quantityInputGroup);
        const input = quantityGroup.querySelector(this.selectors.variantQuantityInput);
        const addBtn = quantityGroup.parentElement.querySelector(this.selectors.addBtn);
        let currentValue = parseInt(input.value);

        if (action === 'increase') {
            input.value = Math.min(currentValue + 1, 99);
        } else if (action === 'decrease') {
            const newValue = Math.max(currentValue - 1, 0);
            input.value = newValue;
            if (newValue === 0) {
                addBtn.style.display = 'block'; // Or 'inline-block' or 'flex' depending on original display
                quantityGroup.style.display = 'none';
            }
        }
        this.updateUI();
    }


    handleBagSelection(event) {
      this.dom.bagOption.forEach(opt => opt.classList.remove(`selected-${this.robCustomId}`));
      event.currentTarget.classList.add(`selected-${this.robCustomId}`);
      this.updateUI();
    }

    handlePurchaseTypeSelection(event) {
      this.dom.purchaseTypeButton.forEach(btn => btn.classList.remove(`selected-${this.robCustomId}`));
      event.currentTarget.classList.add(`selected-${this.robCustomId}`);
      this.isSubscription = event.currentTarget.dataset.purchaseType === 'subscribe';
      this.updateUI();
    }

    formatPrice(amount) {
      try {
        return new Intl.NumberFormat(document.documentElement.lang || 'en-US', {
          style: 'currency',
          currency: this.currencyCode,
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        }).format(amount);
      } catch (e) { // Fallback for invalid currency or locale
        return `${this.currencyCode} ${amount.toFixed(2)}`;
      }
    }

    updateUI() {
      if (!this.skioData) return;

      const selectedBagOption = this.querySelector(this.selectors.selectedBagOption);
      const bagCount = selectedBagOption ? parseInt(selectedBagOption.dataset.bags) : 0;
      
      // Use the first variant's price as a base, assuming all variants have the same base price for BAB calculations
      const firstVariantPlatformId = Object.keys(this.variantPrices)[0];
      const singleBagPrice = firstVariantPlatformId ? this.variantPrices[firstVariantPlatformId] : 0;

      const baseTotal = singleBagPrice * bagCount;

      // --- Calculate One-Time Purchase Price ---
      let oneTimeDiscountValue = 0;
      if (this.skioData.percentDiscountTier && this.skioData.percentDiscountTier[bagCount]) {
          oneTimeDiscountValue = parseFloat(this.skioData.percentDiscountTier[bagCount]);
      }
      // Skio percentDiscountTier seems to be the actual discount percentage, not a multiplier.
      // E.g. if tier[3] = "10", it's 10% off.
      const oneTimeTotal = baseTotal * (1 - (oneTimeDiscountValue / 100));

      // --- Calculate Subscription Price ---
      let subscriptionTotal = oneTimeTotal; // Start with the (potentially) discounted one-time price
      let subscriptionDiscountPercent = 0;

      if (this.isSubscription && this.skioData.sellingPlanGroup) {
          const sellingPlanGroups = Object.values(this.skioData.sellingPlanGroup);
          if (sellingPlanGroups.length > 0) {
              const firstSellingPlanGroup = sellingPlanGroups[0]; // Assuming one main selling plan group for the box
              // Find a selling plan within this group. They often have priceAdjustments.
              // This logic might need refinement based on how Skio structures multiple plans/adjustments.
              if (firstSellingPlanGroup.sellingPlans && firstSellingPlanGroup.sellingPlans.length > 0) {
                  const firstPlan = firstSellingPlanGroup.sellingPlans[0];
                  if (firstPlan.priceAdjustments && firstPlan.priceAdjustments.length > 0) {
                      const adjustment = firstPlan.priceAdjustments[0];
                      if (adjustment.adjustmentType === "PERCENTAGE") {
                          subscriptionDiscountPercent = parseFloat(adjustment.adjustmentValue); // e.g., 10 for 10%
                          subscriptionTotal = oneTimeTotal * (1 - (subscriptionDiscountPercent / 100));
                      } else if (adjustment.adjustmentType === "FIXED_AMOUNT") {
                           subscriptionTotal = Math.max(0, oneTimeTotal - parseFloat(adjustment.adjustmentValue));
                      } else if (adjustment.adjustmentType === "PRICE") {
                           // This case is less common for discounts, more for fixed subscription prices.
                           // If this occurs, ensure 'adjustmentValue' is per item or per box for 'bagCount'.
                           // For now, assuming percentage for subscriptions on top of box discount.
                      }
                  }
              }
          }
      }
      
      // Update Price Displays
      this.dom.priceOriginalOnetime.textContent = this.formatPrice(baseTotal);
      this.dom.priceTotalOnetime.textContent = this.formatPrice(oneTimeTotal);
      baseTotal > oneTimeTotal ? this.dom.priceOriginalOnetime.classList.add(`strikethrough-${this.robCustomId}`) : this.dom.priceOriginalOnetime.classList.remove(`strikethrough-${this.robCustomId}`);

      this.dom.priceOriginalSubscribe.textContent = this.formatPrice(baseTotal); // Or oneTimeTotal if sub discount is on top of box discount
      this.dom.priceTotalSubscribe.textContent = this.formatPrice(subscriptionTotal);
      baseTotal > subscriptionTotal ? this.dom.priceOriginalSubscribe.classList.add(`strikethrough-${this.robCustomId}`) : this.dom.priceOriginalSubscribe.classList.remove(`strikethrough-${this.robCustomId}`);


      // Update Subscribe Discount Badge
      const overallSubscriptionSavingPercent = baseTotal > 0 ? ((baseTotal - subscriptionTotal) / baseTotal) * 100 : 0;
      if (this.isSubscription && overallSubscriptionSavingPercent > 0) {
        this.dom.subscribeDiscountBadge.textContent = `{{ block.settings.save_badge_text_template | escape }}`.replace('{percent}', Math.round(overallSubscriptionSavingPercent));
        this.dom.subscribeDiscountBadge.style.display = 'block';
      } else {
        this.dom.subscribeDiscountBadge.style.display = 'none';
      }

      // --- Validate Quantities and Update ATC Button ---
      const currentSelectedVariantQty = Array.from(this.querySelectorAll(this.selectors.variantQuantityInput))
        .reduce((sum, input) => sum + parseInt(input.value), 0);
      const requiredBags = bagCount;

      const atcButton = this.dom.addToCartButton;
      const statusMessageEl = this.dom.quantityStatusMessage;

      if (currentSelectedVariantQty < requiredBags) {
        atcButton.disabled = true;
        const remaining = requiredBags - currentSelectedVariantQty;
        if (remaining === 1) {
            atcButton.textContent = this.textTemplates.atcAddMoreSingular.replace('{count}', remaining);
            statusMessageEl.textContent = this.textTemplates.statusAddMoreSingular.replace('{count}', remaining);
        } else {
            atcButton.textContent = this.textTemplates.atcAddMorePlural.replace('{count}', remaining);
            statusMessageEl.textContent = this.textTemplates.statusAddMorePlural.replace('{count}', remaining);
        }
        statusMessageEl.className = `quantity-status-message-${this.robCustomId} error-${this.robCustomId}`;
        statusMessageEl.style.display = 'inline-block';
        this.dom.priceSummary.classList.remove(`visible-${this.robCustomId}`);
        if(this.dom.savingsBadge) this.dom.savingsBadge.style.display = 'none';

      } else { // currentSelectedVariantQty >= requiredBags
        atcButton.disabled = false;
        atcButton.textContent = this.textTemplates.atcDefault;
        statusMessageEl.textContent = this.textTemplates.statusAllSet;
        statusMessageEl.className = `quantity-status-message-${this.robCustomId} info-${this.robCustomId}`;
        statusMessageEl.style.display = 'inline-block';

        // Update Subtotal and Savings Badge
        const finalPrice = this.isSubscription ? subscriptionTotal : oneTimeTotal;
        if(this.dom.subtotalPriceValue) this.dom.subtotalPriceValue.textContent = this.formatPrice(finalPrice);
        this.dom.priceSummary.classList.add(`visible-${this.robCustomId}`);

        const savings = baseTotal - finalPrice;
        if (savings > 0 && this.dom.savingsBadge && this.dom.savingsAmount) {
            this.dom.savingsAmount.textContent = this.formatPrice(savings);
            this.dom.savingsBadge.style.display = 'inline-block';
        } else if(this.dom.savingsBadge) {
            this.dom.savingsBadge.style.display = 'none';
        }
      }
    }

    async handleAddToCart() {
      // console.log(`[${this.robCustomId}] Add to cart initiated.`);
      if (!this.skioData || !this.skioData.boxId) {
        console.error(`[${this.robCustomId}] Skio data or Box ID missing.`);
        alert('Error: Product configuration not loaded.');
        return;
      }

      const items = [];
      this.querySelectorAll(this.selectors.variantQuantityInput).forEach(input => {
        const quantity = parseInt(input.value);
        if (quantity > 0) {
          const variantGid = input.dataset.variantId; // This is GID: gid://shopify/ProductVariant/XXXX
          const variantId = variantGid.split('/').pop(); // Numeric ID

          const item = {
            id: variantId,
            quantity: quantity,
            properties: {
              '_dynamicBoxId': this.skioData.boxId,
              // '_dynamicBoxIndex': "0" // Skio might need this, confirm from their docs
            }
          };

          if (this.isSubscription && this.skioData.sellingPlanGroup) {
            // Find the relevant selling plan ID
            // This logic might need to be more sophisticated if multiple selling plan groups or plans exist.
            const sellingPlanGroups = Object.values(this.skioData.sellingPlanGroup);
            if (sellingPlanGroups.length > 0) {
                const firstSellingPlanGroup = sellingPlanGroups[0];
                if (firstSellingPlanGroup.sellingPlans && firstSellingPlanGroup.sellingPlans.length > 0) {
                    // Using the first available selling plan in the first group.
                    // Ensure this aligns with the displayed subscription option.
                    const skioSellingPlanIdFull = firstSellingPlanGroup.sellingPlans[0].platformId; // e.g., "gid://shopify/SellingPlan/123"
                    if (skioSellingPlanIdFull) {
                        item.selling_plan = skioSellingPlanIdFull.split('/').pop(); // Numeric ID
                    }
                }
            }
          }
          items.push(item);
        }
      });

      if (items.length === 0) {
        alert('Please select at least one flavor.');
        return;
      }

      // console.log(`[${this.robCustomId}] Items to add to cart:`, items);

      try {
        const response = await fetch(`${window.Shopify.routes.root}cart/add.js`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: items })
        });
        const cartData = await response.json();
        // console.log(`[${this.robCustomId}] Cart add response:`, cartData);

        if (response.ok) {
          // Optionally, dispatch an event or call a global function to update cart display/drawer
          document.dispatchEvent(new CustomEvent('cart:updated', { bubbles: true, detail: cartData }));
          // Example: if using a theme cart drawer
           const cartDrawer = document.querySelector('cart-drawer'); // Adjust selector for your theme
           if (cartDrawer && typeof cartDrawer.renderContents === 'function') {
             cartDrawer.renderContents(cartData); // Or equivalent method to refresh/open
           } else if (cartDrawer && typeof cartDrawer.open === 'function') {
             cartDrawer.open(); // For some themes, just opening might trigger a refresh
           } else {
             // fallback to page redirect or simple alert
             // window.location.href = '/cart';
           }
        } else {
          let errorMessage = 'Could not add items to cart.';
          if (cartData.message) {
            errorMessage = cartData.message;
          } else if (cartData.description) {
            errorMessage = cartData.description;
          }
          alert(errorMessage);
        }
      } catch (error) {
        console.error(`[${this.robCustomId}] Error adding to cart:`, error);
        alert('An unexpected error occurred. Please try again.');
      }
    }
  }

  customElements.define('build-a-box-form-{{ rob_custom }}', BuildABoxForm);
</script>

{%- schema -%}
{
  "name": "Product Form BAB",
  "class": "shopify-section--product-form-bab",
  "settings": [
    {
      "type": "product",
      "id": "main_product",
      "label": "Main Box Product",
      "info": "Select the 'Box' product whose Skio configuration will be used."
    },
    {
      "type": "collection",
      "id": "flavors_collection_handle",
      "label": "Flavors Collection",
      "info": "Collection used to source flavor descriptions from variant metafields (custom.flavor_description). If empty, 'all' products will be scanned (less performant)."
    },
    {
      "type": "header",
      "content": "Layout & Spacing"
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Margin Top",
      "default": 20
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Margin Bottom",
      "default": 20
    },
    {
        "type": "range",
        "id": "padding_block",
        "min": 0, "max": 50, "step": 1, "unit": "px",
        "label": "Vertical Padding",
        "default": 0
    },
    {
        "type": "range",
        "id": "padding_inline",
        "min": 0, "max": 50, "step": 1, "unit": "px",
        "label": "Horizontal Padding",
        "default": 0
    },
    {
        "type": "color",
        "id": "background_color",
        "label": "Block Background Color",
        "default": "rgba(0,0,0,0)"
    },
    {
        "type": "range",
        "id": "border_width",
        "min": 0, "max": 5, "step": 1, "unit": "px",
        "label": "Block Border Width",
        "default": 0
    },
    {
        "type": "color",
        "id": "border_color",
        "label": "Block Border Color",
        "default": "#CCCCCC"
    },
    {
        "type": "range",
        "id": "border_radius",
        "min": 0, "max": 20, "step": 1, "unit": "px",
        "label": "Block Border Radius",
        "default": 0
    },
    {
      "type": "font_picker",
      "id": "font_family",
      "label": "Base Font Family",
      "default": "sans-serif"
    },
    {
      "type": "header",
      "content": "Bag Selection"
    },
    {
      "type": "select",
      "id": "default_selected_bags",
      "label": "Default Selected Bags",
      "options": [
        { "value": "1", "label": "1 Bag" },
        { "value": "2", "label": "2 Bags" },
        { "value": "3", "label": "3 Bags" },
        { "value": "4", "label": "4 Bags" }
      ],
      "default": "3"
    },
    {
      "type": "text",
      "id": "bag_option_text_singular",
      "label": "Bag Text (Singular)",
      "default": "Bag"
    },
    {
      "type": "text",
      "id": "bag_option_text_plural",
      "label": "Bag Text (Plural)",
      "default": "Bags"
    },
    {
      "type": "range",
      "id": "bag_options_per_row",
      "min": 2, "max": 4, "step": 1,
      "label": "Bag Options Per Row (Desktop)",
      "default": 2
    },
     {
      "type": "range",
      "id": "bag_options_per_row_mobile",
      "min": 1, "max": 4, "step": 1,
      "label": "Bag Options Per Row (Mobile)",
      "default": 2
    },
    {
      "type": "range",
      "id": "bag_option_gap",
      "min": 4, "max": 20, "step": 1, "unit": "px",
      "label": "Gap Between Bag Options",
      "default": 8
    },
    {
      "type": "range",
      "id": "bag_option_padding_vertical",
      "min": 5, "max": 25, "step": 1, "unit": "px",
      "label": "Padding Vertical (Bag Option)",
      "default": 12
    },
    {
      "type": "range",
      "id": "bag_option_padding_horizontal",
      "min": 5, "max": 25, "step": 1, "unit": "px",
      "label": "Padding Horizontal (Bag Option)",
      "default": 6
    },
    {
      "type": "color",
      "id": "bag_option_bg_color",
      "label": "Bag Option BG Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "bag_option_border_color",
      "label": "Bag Option Border Color",
      "default": "#E0E0E0"
    },
    {
      "type": "range",
      "id": "bag_option_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "Bag Option Border Radius",
      "default": 6
    },
    {
      "type": "color",
      "id": "bag_option_selected_bg_color",
      "label": "Selected Bag BG Color",
      "default": "#F0F7FF"
    },
    {
      "type": "color",
      "id": "bag_option_selected_border_color",
      "label": "Selected Bag Border Color",
      "default": "#4A90E2"
    },
    {
      "type": "color",
      "id": "bag_option_hover_border_color",
      "label": "Bag Option Hover Border Color",
      "default": "#A0A0A0"
    },
    {
      "type": "color",
      "id": "bag_count_text_color",
      "label": "Bag Count Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "bag_count_selected_text_color",
      "label": "Selected Bag Count Text Color",
      "default": "#4A90E2"
    },
    {
      "type": "range",
      "id": "bag_count_font_size",
      "min": 10, "max": 20, "step": 1, "unit": "px",
      "label": "Bag Count Font Size",
      "default": 14
    },
    {
      "type": "select",
      "id": "bag_count_font_weight",
      "label": "Bag Count Font Weight",
      "options": [
        { "value": "400", "label": "Normal" },
        { "value": "600", "label": "Semi-Bold" },
        { "value": "700", "label": "Bold" }
      ],
      "default": "600"
    },
    {
      "type": "header",
      "content": "Best Deal Badge"
    },
    {
      "type": "range",
      "id": "best_deal_bag_count",
      "min": 1, "max": 4, "step": 1,
      "label": "Number of Bags for 'Best Deal'",
      "default": 4
    },
    {
      "type": "text",
      "id": "best_deal_badge_text",
      "label": "Best Deal Badge Text",
      "default": "Best Deal"
    },
    {
      "type": "color",
      "id": "best_deal_badge_bg_color",
      "label": "Best Deal Badge BG",
      "default": "#D32F2F"
    },
    {
      "type": "color",
      "id": "best_deal_badge_text_color",
      "label": "Best Deal Badge Text",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "best_deal_badge_font_size",
      "min": 8, "max": 14, "step": 1, "unit": "px",
      "label": "Best Deal Badge Font Size",
      "default": 10
    },
    {
      "type": "header",
      "content": "Purchase Options"
    },
    {
      "type": "text",
      "id": "subscribe_title",
      "label": "Subscribe Option Title",
      "default": "Subscribe & Save"
    },
    {
      "type": "text",
      "id": "onetime_title",
      "label": "One-time Purchase Title",
      "default": "One-time Purchase"
    },
    {
      "type": "range",
      "id": "purchase_option_gap",
      "min": 4, "max": 20, "step": 1, "unit": "px",
      "label": "Gap Between Purchase Options",
      "default": 8
    },
    {
      "type": "range",
      "id": "purchase_option_padding_vertical",
      "min": 8, "max": 25, "step": 1, "unit": "px",
      "label": "Padding Vertical (Purchase Option)",
      "default": 12
    },
    {
      "type": "range",
      "id": "purchase_option_padding_horizontal",
      "min": 8, "max": 25, "step": 1, "unit": "px",
      "label": "Padding Horizontal (Purchase Option)",
      "default": 16
    },
    {
      "type": "color",
      "id": "purchase_option_bg_color",
      "label": "Purchase Option BG",
      "default": "#F8F8F8"
    },
    {
      "type": "color",
      "id": "purchase_option_border_color",
      "label": "Purchase Option Border",
      "default": "#E0E0E0"
    },
    {
      "type": "range",
      "id": "purchase_option_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "Purchase Option Border Radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "purchase_option_selected_bg_color",
      "label": "Selected Option BG",
      "default": "#F0F7FF"
    },
    {
      "type": "color",
      "id": "purchase_option_selected_border_color",
      "label": "Selected Option Border",
      "default": "#4A90E2"
    },
    {
      "type": "color",
      "id": "purchase_option_hover_border_color",
      "label": "Option Hover Border",
      "default": "#4A90E2"
    },
    {
      "type": "color",
      "id": "purchase_title_text_color",
      "label": "Option Title Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "purchase_title_selected_text_color",
      "label": "Selected Option Title Text Color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "purchase_title_font_size",
      "min": 12, "max": 22, "step": 1, "unit": "px",
      "label": "Option Title Font Size",
      "default": 15
    },
    {
      "type": "select",
      "id": "purchase_title_font_weight",
      "label": "Option Title Font Weight",
      "options": [{"value": "400", "label": "Normal"},{"value": "600", "label": "Semi-Bold"},{"value": "700", "label": "Bold"}],
      "default": "600"
    },
    {
      "type": "color",
      "id": "original_price_color",
      "label": "Original Price Color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "strikethrough_price_color",
      "label": "Strikethrough Price Color",
      "default": "#999999"
    },
    {
      "type": "color",
      "id": "discounted_price_color",
      "label": "Discounted Price Color",
      "default": "#4A90E2"
    },
     {
      "type": "color",
      "id": "discounted_price_selected_color",
      "label": "Selected Discounted Price Color",
      "default": "#357ABD"
    },
    {
      "type": "range",
      "id": "price_font_size",
      "min": 12, "max": 22, "step": 1, "unit": "px",
      "label": "Price Font Size",
      "default": 15
    },
    {
      "type": "header",
      "content": "Subscription Benefits"
    },
    {
      "type": "checkbox",
      "id": "show_subscription_benefits",
      "label": "Show Subscription Benefits",
      "default": true
    },
    { "type": "text", "id": "benefit_1", "label": "Benefit 1", "default": "15% OFF every order" },
    { "type": "text", "id": "benefit_2", "label": "Benefit 2", "default": "Free US Shipping" },
    { "type": "text", "id": "benefit_3", "label": "Benefit 3", "default": "Cancel Anytime" },
    { "type": "text", "id": "benefit_4", "label": "Benefit 4", "default": "Member Perks" },
    {
      "type": "range",
      "id": "benefit_font_size",
      "min": 10, "max": 16, "step": 1, "unit": "px",
      "label": "Benefit Text Font Size",
      "default": 12
    },
    {
      "type": "color",
      "id": "benefit_text_color",
      "label": "Benefit Text Color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "benefit_checkmark_color",
      "label": "Benefit Checkmark Color",
      "default": "#4A90E2"
    },
    {
      "type": "header",
      "content": "Subscription Discount Badge"
    },
    {
      "type": "text",
      "id": "save_badge_text_template",
      "label": "Save Badge Text (use {percent})",
      "default": "SAVE {percent}% ON FIRST ORDER"
    },
    {
      "type": "color",
      "id": "save_badge_bg_color",
      "label": "Save Badge BG",
      "default": "#4CAF50"
    },
    {
      "type": "color",
      "id": "save_badge_text_color",
      "label": "Save Badge Text",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "save_badge_font_size",
      "min": 8, "max": 14, "step": 1, "unit": "px",
      "label": "Save Badge Font Size",
      "default": 11
    },
    {
      "type": "header",
      "content": "Flavor Selection Area"
    },
    {
      "type": "text",
      "id": "select_flavors_title",
      "label": "Section Title",
      "default": "SELECT YOUR FLAVORS"
    },
    {
      "type": "range",
      "id": "flavor_section_margin_top",
      "min": 0, "max": 50, "step": 2, "unit": "px",
      "label": "Top Margin for Flavor Section",
      "default": 20
    },
    {
      "type": "range",
      "id": "flavor_header_margin_bottom",
      "min": 0, "max": 30, "step": 2, "unit": "px",
      "label": "Flavor Header Bottom Margin",
      "default": 16
    },
    {
      "type": "color",
      "id": "flavor_title_color",
      "label": "Flavor Title Color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "flavor_title_font_size",
      "min": 14, "max": 24, "step": 1, "unit": "px",
      "label": "Flavor Title Font Size",
      "default": 16
    },
    {
      "type": "select",
      "id": "flavor_title_font_weight",
      "label": "Flavor Title Font Weight",
      "options": [{"value": "400", "label": "Normal"},{"value": "600", "label": "Semi-Bold"},{"value": "700", "label": "Bold"}],
      "default": "600"
    },
    {
      "type": "select",
      "id": "flavor_title_transform",
      "label": "Flavor Title Text Transform",
      "options": [{"value": "none", "label": "None"},{"value": "uppercase", "label": "Uppercase"},{"value": "capitalize", "label": "Capitalize"}],
      "default": "uppercase"
    },
    {
      "type": "text",
      "id": "loading_flavors_text",
      "label": "Loading Flavors Text",
      "default": "Loading flavors..."
    },
    {
      "type": "header",
      "content": "Flavor Card Styling"
    },
    {
      "type": "range",
      "id": "flavor_card_min_width",
      "min": 150, "max": 400, "step": 10, "unit": "px",
      "label": "Flavor Card Min Width (Desktop)",
      "default": 200
    },
    {
      "type": "range",
      "id": "flavor_card_min_width_mobile",
      "min": 120, "max": 200, "step": 10, "unit": "px",
      "label": "Flavor Card Min Width (Mobile)",
      "default": 140
    },
    {
      "type": "range",
      "id": "flavor_card_gap",
      "min": 4, "max": 20, "step": 1, "unit": "px",
      "label": "Gap Between Flavor Cards",
      "default": 12
    },
    {
      "type": "range",
      "id": "flavor_card_padding",
      "min": 5, "max": 20, "step": 1, "unit": "px",
      "label": "Flavor Card Padding",
      "default": 12
    },
    {
      "type": "color",
      "id": "flavor_card_bg_color",
      "label": "Card BG Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "flavor_card_border_color",
      "label": "Card Border Color",
      "default": "#E0E0E0"
    },
    {
      "type": "range",
      "id": "flavor_card_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "Card Border Radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "flavor_card_hover_border_color",
      "label": "Card Hover Border Color",
      "default": "#4A90E2"
    },
     {
      "type": "range",
      "id": "flavor_image_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "Flavor Image Border Radius",
      "default": 4
    },
    {
      "type": "select",
      "id": "flavor_text_align",
      "label": "Flavor Text Alignment",
      "options": [{"value": "left", "label": "Left"},{"value": "center", "label": "Center"},{"value": "right", "label": "Right"}],
      "default": "left"
    },
    {
      "type": "color",
      "id": "flavor_name_color",
      "label": "Flavor Name Color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "flavor_name_font_size",
      "min": 12, "max": 20, "step": 1, "unit": "px",
      "label": "Flavor Name Font Size",
      "default": 15
    },
    {
      "type": "select",
      "id": "flavor_name_font_weight",
      "label": "Flavor Name Font Weight",
      "options": [{"value": "400", "label": "Normal"},{"value": "600", "label": "Semi-Bold"},{"value": "700", "label": "Bold"}],
      "default": "700"
    },
    {
      "type": "color",
      "id": "flavor_desc_color",
      "label": "Flavor Description Color",
      "default": "#666666"
    },
    {
      "type": "range",
      "id": "flavor_desc_font_size",
      "min": 10, "max": 16, "step": 1, "unit": "px",
      "label": "Flavor Description Font Size",
      "default": 13
    },
    {
      "type": "header",
      "content": "Flavor Quantity Controls"
    },
    {
      "type": "text",
      "id": "flavor_add_button_text",
      "label": "Add Button Text",
      "default": "Add +"
    },
    {
      "type": "color",
      "id": "flavor_add_button_bg_color",
      "label": "Add Button BG",
      "default": "#4A90E2"
    },
    {
      "type": "color",
      "id": "flavor_add_button_text_color",
      "label": "Add Button Text",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "flavor_add_button_border_color",
      "label": "Add Button Border",
      "default": "#4A90E2"
    },
    {
      "type": "range",
      "id": "flavor_add_button_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "Add Button Border Radius",
      "default": 6
    },
    {
      "type": "range",
      "id": "flavor_add_button_padding_vertical",
      "min": 4, "max": 16, "step": 1, "unit": "px",
      "label": "Add Button Padding Vertical",
      "default": 8
    },
    {
      "type": "range",
      "id": "flavor_add_button_padding_horizontal",
      "min": 8, "max": 20, "step": 1, "unit": "px",
      "label": "Add Button Padding Horizontal",
      "default": 16
    },
    {
      "type": "range",
      "id": "flavor_add_button_font_size",
      "min": 12, "max": 18, "step": 1, "unit": "px",
      "label": "Add Button Font Size",
      "default": 14
    },
    {
      "type": "select",
      "id": "flavor_add_button_font_weight",
      "label": "Add Button Font Weight",
      "options": [{"value": "400", "label": "Normal"},{"value": "600", "label": "Semi-Bold"},{"value": "700", "label": "Bold"}],
      "default": "600"
    },
    {
      "type": "color",
      "id": "flavor_add_button_hover_bg_color",
      "label": "Add Button Hover BG",
      "default": "#357ABD"
    },
    {
      "type": "color",
      "id": "flavor_add_button_hover_text_color",
      "label": "Add Button Hover Text",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "flavor_add_button_hover_border_color",
      "label": "Add Button Hover Border",
      "default": "#357ABD"
    },
    {
      "type": "color",
      "id": "quantity_button_bg_color",
      "label": "Qty Button BG",
      "default": "#F5F5F5"
    },
    {
      "type": "color",
      "id": "quantity_button_text_color",
      "label": "Qty Button Text/Icon",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "quantity_button_border_radius",
      "min": 0, "max": 50, "step": 1, "unit": "px",
      "label": "Qty Button Border Radius (px or %)",
      "info": "Use 50 for circle",
      "default": 4
    },
    {
      "type": "range",
      "id": "quantity_button_size",
      "min": 20, "max": 40, "step": 1, "unit": "px",
      "label": "Qty Button Size (Width/Height)",
      "default": 28
    },
    {
      "type": "range",
      "id": "quantity_button_icon_size",
      "min": 10, "max": 24, "step": 1, "unit": "px",
      "label": "Qty Button Icon Font Size",
      "default": 16
    },
    {
      "type": "color",
      "id": "quantity_button_hover_bg_color",
      "label": "Qty Button Hover BG",
      "default": "#E0E0E0"
    },
    {
      "type": "color",
      "id": "quantity_button_hover_text_color",
      "label": "Qty Button Hover Text",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "quantity_input_border_color",
      "label": "Qty Input Group Border",
      "default": "#E0E0E0"
    },
     {
      "type": "range",
      "id": "quantity_input_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "Qty Input Group Border Radius",
      "default": 6
    },
    {
      "type": "color",
      "id": "quantity_input_text_color",
      "label": "Qty Input Text Color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "quantity_input_font_size",
      "min": 12, "max": 18, "step": 1, "unit": "px",
      "label": "Qty Input Font Size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Status Messages (e.g., 'X Flavors to Go')"
    },
     {
      "type": "text",
      "id": "all_set_message",
      "label": "'All Set' Message",
      "default": "All Set! (You can add more)"
    },
    {
      "type": "text",
      "id": "add_more_flavors_message_singular",
      "label": "'Add More' Message (Singular, use {count})",
      "default": "{count} Flavor to Go"
    },
    {
      "type": "text",
      "id": "add_more_flavors_message_plural",
      "label": "'Add More' Message (Plural, use {count})",
      "default": "{count} Flavors to Go"
    },
    {
      "type": "range",
      "id": "status_message_font_size",
      "min": 10, "max": 16, "step": 1, "unit": "px",
      "label": "Status Message Font Size",
      "default": 13
    },
    {
      "type": "color",
      "id": "status_message_info_text_color",
      "label": "Info Message Text Color",
      "default": "#4A90E2"
    },
    {
      "type": "color",
      "id": "status_message_info_bg_color",
      "label": "Info Message BG Color",
      "default": "rgba(74, 144, 226, 0.1)"
    },
    {
      "type": "color",
      "id": "status_message_error_text_color",
      "label": "Error Message Text Color",
      "default": "#D32F2F"
    },
    {
      "type": "color",
      "id": "status_message_error_bg_color",
      "label": "Error Message BG Color",
      "default": "rgba(211, 47, 47, 0.1)"
    },
    {
      "type": "header",
      "content": "Price Summary Section"
    },
    {
      "type": "range",
      "id": "summary_margin_top",
      "min": 0, "max": 40, "step": 2, "unit": "px",
      "label": "Summary Top Margin",
      "default": 16
    },
    {
      "type": "range",
      "id": "summary_padding_vertical",
      "min": 0, "max": 20, "step": 1, "unit": "px",
      "label": "Summary Vertical Padding",
      "default": 0
    },
    {
      "type": "range",
      "id": "summary_padding_horizontal",
      "min": 0, "max": 20, "step": 1, "unit": "px",
      "label": "Summary Horizontal Padding",
      "default": 0
    },
    {
      "type": "color",
      "id": "summary_bg_color",
      "label": "Summary Background Color",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "color",
      "id": "summary_border_color",
      "label": "Summary Border Color",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "range",
      "id": "summary_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "Summary Border Radius",
      "default": 0
    },
    {
      "type": "text",
      "id": "subtotal_label",
      "label": "Subtotal Label Text",
      "default": "Subtotal:"
    },
    {
      "type": "color",
      "id": "subtotal_text_color",
      "label": "Subtotal Text Color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "subtotal_font_size",
      "min": 14, "max": 24, "step": 1, "unit": "px",
      "label": "Subtotal Font Size",
      "default": 16
    },
    {
      "type": "select",
      "id": "subtotal_font_weight",
      "label": "Subtotal Font Weight",
      "options": [{"value": "400", "label": "Normal"},{"value": "600", "label": "Semi-Bold"},{"value": "700", "label": "Bold"}],
      "default": "600"
    },
    {
      "type": "header",
      "content": "Final Savings Badge (in Summary)"
    },
    {
      "type": "text",
      "id": "savings_badge_text_template",
      "label": "Savings Badge Text (use {amount})",
      "default": "You're saving {amount}"
    },
    {
      "type": "color",
      "id": "final_savings_badge_bg_color",
      "label": "Savings Badge BG",
      "default": "rgba(74, 144, 226, 0.1)"
    },
    {
      "type": "color",
      "id": "final_savings_badge_text_color",
      "label": "Savings Badge Text",
      "default": "#4A90E2"
    },
    {
      "type": "range",
      "id": "final_savings_badge_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "Savings Badge Border Radius",
      "default": 6
    },
    {
      "type": "range",
      "id": "final_savings_badge_font_size",
      "min": 12, "max": 18, "step": 1, "unit": "px",
      "label": "Savings Badge Font Size",
      "default": 14
    },
    {
      "type": "select",
      "id": "final_savings_badge_font_weight",
      "label": "Savings Badge Font Weight",
      "options": [{"value": "400", "label": "Normal"},{"value": "600", "label": "Semi-Bold"},{"value": "700", "label": "Bold"}],
      "default": "600"
    },
    {
      "type": "header",
      "content": "Add to Cart Button"
    },
    {
      "type": "text",
      "id": "atc_button_text_default",
      "label": "Default ATC Button Text",
      "default": "ADD TO CART"
    },
    {
      "type": "text",
      "id": "atc_button_text_add_more_singular",
      "label": "ATC Text (Singular, use {count})",
      "default": "SELECT {count} MORE BAG"
    },
    {
      "type": "text",
      "id": "atc_button_text_add_more_plural",
      "label": "ATC Text (Plural, use {count})",
      "default": "SELECT {count} MORE BAGS"
    },
    {
      "type": "range",
      "id": "atc_button_margin_top",
      "min": 0, "max": 40, "step": 2, "unit": "px",
      "label": "ATC Button Top Margin",
      "default": 16
    },
    {
      "type": "color",
      "id": "atc_button_bg_color",
      "label": "ATC BG Color",
      "default": "#4A90E2"
    },
    {
      "type": "color",
      "id": "atc_button_text_color",
      "label": "ATC Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "atc_button_border_color",
      "label": "ATC Border Color",
      "default": "#4A90E2"
    },
    {
      "type": "range",
      "id": "atc_button_border_radius",
      "min": 0, "max": 12, "step": 1, "unit": "px",
      "label": "ATC Border Radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "atc_button_padding_vertical",
      "min": 8, "max": 24, "step": 1, "unit": "px",
      "label": "ATC Padding Vertical",
      "default": 12
    },
    {
      "type": "range",
      "id": "atc_button_padding_horizontal",
      "min": 10, "max": 40, "step": 1, "unit": "px",
      "label": "ATC Padding Horizontal",
      "default": 20
    },
    {
      "type": "range",
      "id": "atc_button_font_size",
      "min": 12, "max": 22, "step": 1, "unit": "px",
      "label": "ATC Font Size",
      "default": 15
    },
    {
      "type": "select",
      "id": "atc_button_font_weight",
      "label": "ATC Font Weight",
      "options": [{"value": "400", "label": "Normal"},{"value": "600", "label": "Semi-Bold"},{"value": "700", "label": "Bold"}],
      "default": "600"
    },
    {
      "type": "select",
      "id": "atc_button_text_transform",
      "label": "ATC Text Transform",
      "options": [{"value": "none", "label": "None"},{"value": "uppercase", "label": "Uppercase"},{"value": "capitalize", "label": "Capitalize"}],
      "default": "none"
    },
    {
      "type": "color",
      "id": "atc_button_hover_bg_color",
      "label": "ATC Hover BG",
      "default": "#357ABD"
    },
    {
      "type": "color",
      "id": "atc_button_hover_text_color",
      "label": "ATC Hover Text",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "atc_button_hover_border_color",
      "label": "ATC Hover Border",
      "default": "#357ABD"
    },
    {
      "type": "color",
      "id": "atc_button_disabled_bg_color",
      "label": "ATC Disabled BG",
      "default": "#CCCCCC"
    },
    {
      "type": "color",
      "id": "atc_button_disabled_text_color",
      "label": "ATC Disabled Text",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "atc_button_disabled_border_color",
      "label": "ATC Disabled Border",
      "default": "#CCCCCC"
    }
  ],
  "presets": [
    {
      "name": "Product Form - Build Your Box",
      "settings": {
      }
    }
  ]
}
{%- endschema -%}