{%- doc -%}
  @prompt
  Refactor the provided Shopify snippet and section into a single Liquid block.
  The block should replace the product form (variant options, quantity selector, add to cart, subscribe buttons, etc.) on a product page.
  The final appearance should match the provided target images.
  Product images (carousel, USP icons) should be removed from this block.

  Functional Requirements:
  - Bag Quantity Selection: Buttons for 1, 2, 3, 4 bags. "Best Deal" badge for 4 bags. This selection determines the target number of items. Default selection configurable.
  - Purchase Type Selection:
    - "Subscribe & Save": Displays discounted price, original price (strikethrough), and benefits list. Has an optional promotional banner.
    - "One-time Purchase": Displays its price.
  - Flavor Selection:
    - List of available flavors (from Skio API), each with name and description (from product variant metafields).
    - "Add +" button per flavor, which changes to a quantity stepper ("-", input, "+") upon clicking.
  - Dynamic Pricing: Prices update based on selected bag quantity, purchase type, and current flavor selections using Skio logic.
  - Subtotal & Savings: Display calculated subtotal and savings amount.
  - Add to Cart Button:
    - Text updates dynamically (e.g., "ADD TO CART", "SELECT X MORE BAGS").
    - Enabled/disabled based on whether the target number of flavors/bags has been met.
  - Informational Messages: Messages like "X Flavor(s) to Go" or "All Set! (You can add more)" near the flavor selection header.
  - Skio Integration: Continue using Skio API for dynamic box pricing, variant information, and subscription plan details. Requires a "main product" ID for the Skio API call.

  Styling Considerations:
  - Adhere closely to the visual style of the target images.
  - All CSS namespaced using `{{ rob_custom }}`.
  - Highly customizable via schema settings (colors, fonts, spacing, texts).

  UX Specifications:
  - Interactive price updates.
  - Clear visual feedback for selections and requirements.
  - Loading state for flavors.

  Metafield Dependencies:
  - Product variant metafield for flavor description (e.g., `metafields.custom.flavor_description`). A collection can be specified to source these variants if not directly on the main Skio product.
  - The block uses a main product (the "box product") whose ID is used for Skio API calls.

  Schema Requirements:
  - Comprehensive schema for all text customization (titles, labels, button texts, messages, benefits), colors (backgrounds, text, borders for various elements and states), spacing, border styles, font settings.
  - Settings for main product for Skio, collection for flavor metafields, default bag count, promotional banners, etc.
  - At least one preset.
{%- enddoc -%}

{% assign rob_custom = block.id | replace: '_', '' | downcase %}

{% comment %} Global Liquid Logic Start {% endcomment %}
{%- liquid
  assign product_for_skio_setting = block.settings.main_product_for_skio
  assign box_product_for_skio_obj = all_products[product_for_skio_setting]
  if box_product_for_skio_obj == blank and product != blank and product.id == product_for_skio_setting.id
    assign box_product_for_skio_obj = product
  endif

  assign box_product_id_js = box_product_for_skio_obj.id | default: product.id | json  

  assign collection_for_flavors = collections[block.settings.collection_for_flavor_metafields]

  assign default_bag_count = block.settings.default_bag_count | default: 3
  assign currency_code = cart.currency.iso_code | default: "USD"
-%}
{% comment %} Global Liquid Logic End {% endcomment %}

<script type="application/json" id="flavorMetafields-{{ rob_custom }}">
{
  {%- assign has_metafields = false -%}
  {%- if collection_for_flavors != blank and collection_for_flavors.products_count > 0 -%}
    {%- for p_item in collection_for_flavors.products -%}
      {%- for variant in p_item.variants -%}
        {%- if variant.metafields.custom.flavor_description != blank -%}
          {%- assign has_metafields = true -%}
          "{{ variant.id }}": {{ variant.metafields.custom.flavor_description | json }}{%- unless forloop.last and forloop.parentloop.last %},{% endunless -%}
        {%- elsif variant.metafields.my_fields.flavor_description != blank -%}
          {% comment %} Common alternative namespace {% endcomment %}
          {%- assign has_metafields = true -%}
          "{{ variant.id }}": {{ variant.metafields.my_fields.flavor_description | json }}{%- unless forloop.last and forloop.parentloop.last %},{% endunless -%}
        {%- else -%}
          "{{ variant.id }}": {{ "No flavor description available." | json }}{%- unless forloop.last and forloop.parentloop.last %},{% endunless -%}
        {%- endif -%}
      {%- endfor -%}
    {%- endfor -%}
  {%- elsif box_product_for_skio_obj and box_product_for_skio_obj.variants.size > 0 -%}
    {%- for variant in box_product_for_skio_obj.variants -%}
      {%- if variant.metafields.custom.flavor_description != blank -%}
        {%- assign has_metafields = true -%}
        "{{ variant.id }}": {{ variant.metafields.custom.flavor_description | json }}{%- unless forloop.last %},{% endunless -%}
      {%- elsif variant.metafields.my_fields.flavor_description != blank -%}
        {%- assign has_metafields = true -%}
        "{{ variant.id }}": {{ variant.metafields.my_fields.flavor_description | json }}{%- unless forloop.last %},{% endunless -%}
      {%- else -%}
        "{{ variant.id }}": {{ "No flavor description available." | json }}{%- unless forloop.last %},{% endunless -%}
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</script>

{%- style -%}
  .rf-bab-form-block-{{ rob_custom }} {
    --rf-bab-primary-color-{{ rob_custom }}: {{ block.settings.primary_color }};
    --rf-bab-primary-text-color-{{ rob_custom }}: {{ block.settings.primary_text_color }};
    --rf-bab-secondary-color-{{ rob_custom }}: {{ block.settings.secondary_color }};
    --rf-bab-text-color-{{ rob_custom }}: {{ block.settings.text_color }};
    --rf-bab-light-text-color-{{ rob_custom }}: {{ block.settings.light_text_color }};
    --rf-bab-border-color-{{ rob_custom }}: {{ block.settings.border_color }};
    --rf-bab-background-color-{{ rob_custom }}: {{ block.settings.background_color }};
    --rf-bab-error-color-{{ rob_custom }}: {{ block.settings.error_color }};
    --rf-bab-success-color-{{ rob_custom }}: {{ block.settings.success_color }};
    --rf-bab-info-color-{{ rob_custom }}: {{ block.settings.info_color }};
    --rf-bab-font-family-{{ rob_custom }}: {{ block.settings.font.family }}, {{ block.settings.font.fallback_families }};
    
    font-family: var(--rf-bab-font-family-{{ rob_custom }});
    background-color: var(--rf-bab-background-color-{{ rob_custom }});
    padding: {{ block.settings.block_padding }}px;
    border-radius: {{ block.settings.block_border_radius }}px;
    border: {{ block.settings.block_border_width }}px solid {{ block.settings.block_border_color }};
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
  }

  .bag-selection-container-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    gap: {{ block.settings.bag_option_gap }}px;
    margin-bottom: {{ block.settings.section_spacing }}px;
  }

  .bag-option-{{ rob_custom }} {
    position: relative;
    border: {{ block.settings.bag_option_border_width }}px solid var(--rf-bab-border-color-{{ rob_custom }});
    border-radius: {{ block.settings.bag_option_border_radius }}px;
    padding: {{ block.settings.bag_option_padding_y }}px {{ block.settings.bag_option_padding_x }}px;
    text-align: center;
    cursor: pointer;
    background-color: {{ block.settings.bag_option_bg_color }};
    color: var(--rf-bab-text-color-{{ rob_custom }});
    font-size: {{ block.settings.bag_option_font_size }}px;
    font-weight: {{ block.settings.bag_option_font_weight }};
    transition: border-color 0.3s ease, background-color 0.3s ease;
    min-height: 50px; /* From example */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .bag-option-{{ rob_custom }}:hover {
    border-color: var(--rf-bab-primary-color-{{ rob_custom }});
  }

  .bag-option-{{ rob_custom }}.selected-{{ rob_custom }} {
    border-color: var(--rf-bab-primary-color-{{ rob_custom }});
    background-color: {{ block.settings.bag_option_selected_bg_color }};
    color: {{ block.settings.bag_option_selected_text_color }};
    border-width: {{ block.settings.bag_option_selected_border_width }}px;
  }

  .deal-badge-{{ rob_custom }} {
    position: absolute;
    top: -10px; /* From example */
    left: 50%;
    transform: translateX(-50%);
    background-color: {{ block.settings.best_deal_badge_bg_color }};
    color: {{ block.settings.best_deal_badge_text_color }};
    padding: 2px 6px;
    border-radius: {{ block.settings.best_deal_badge_border_radius }}px;
    font-size: {{ block.settings.best_deal_badge_font_size }}px;
    font-weight: 600;
    white-space: nowrap;
  }

  .bag-count-{{ rob_custom }} {
    /* styles for bag count text if needed */
  }

  .purchase-options-container-{{ rob_custom }} {
    display: flex;
    flex-direction: column;
    gap: {{ block.settings.purchase_option_gap }}px;
    margin-bottom: {{ block.settings.section_spacing }}px;
  }

  .purchase-type-button-{{ rob_custom }} {
    border: 1px solid var(--rf-bab-border-color-{{ rob_custom }});
    border-radius: {{ block.settings.purchase_option_border_radius }}px;
    padding: {{ block.settings.purchase_option_padding_y }}px {{ block.settings.purchase_option_padding_x }}px;
    cursor: pointer;
    background-color: {{ block.settings.purchase_option_bg_color }};
    transition: border-color 0.3s ease, background-color 0.3s ease;
  }
  
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} {
    border-color: var(--rf-bab-primary-color-{{ rob_custom }});
    background-color: {{ block.settings.purchase_option_selected_bg_color }};
  }

  .subscribe-banner-{{ rob_custom }} {
    background-color: {{ block.settings.subscribe_banner_bg_color }};
    color: {{ block.settings.subscribe_banner_text_color }};
    padding: 6px 10px;
    text-align: center;
    font-size: {{ block.settings.subscribe_banner_font_size }}px;
    font-weight: bold;
    border-radius: {{ block.settings.purchase_option_border_radius }}px {{ block.settings.purchase_option_border_radius }}px 0 0; /* Adjust if needed */
    margin: -{{ block.settings.purchase_option_padding_y }}px -{{ block.settings.purchase_option_padding_x }}px {{ block.settings.purchase_option_padding_y }}px; /* Pull to edges */
  }

  .purchase-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
  }

  .purchase-type-label-{{ rob_custom }} {
    font-size: {{ block.settings.purchase_label_font_size }}px;
    font-weight: {{ block.settings.purchase_label_font_weight }};
    color: var(--rf-bab-text-color-{{ rob_custom }});
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} .purchase-type-label-{{ rob_custom }} {
    color: {{ block.settings.purchase_label_selected_text_color }};
  }


  .price-display-{{ rob_custom }} {
    display: flex;
    align-items: baseline;
    gap: 8px;
  }

  .original-price-{{ rob_custom }} {
    font-size: {{ block.settings.original_price_font_size }}px;
    color: var(--rf-bab-light-text-color-{{ rob_custom }});
    text-decoration: line-through;
  }
  .purchase-type-button-{{ rob_custom }}.onetime-button-{{ rob_custom }} .original-price-{{ rob_custom }} {
    display: none; /* Typically one-time purchase doesn't show strikethrough unless it's also discounted */
  }
  .purchase-type-button-{{ rob_custom }}.onetime-button-{{ rob_custom }}.has-discount-{{ rob_custom }} .original-price-{{ rob_custom }} {
    display: inline; /* Show if one-time also has a discount */
  }


  .current-price-{{ rob_custom }} {
    font-size: {{ block.settings.current_price_font_size }}px;
    font-weight: {{ block.settings.current_price_font_weight }};
    color: var(--rf-bab-text-color-{{ rob_custom }});
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} .current-price-{{ rob_custom }} {
     color: {{ block.settings.current_price_selected_text_color }};
  }


  .benefits-list-{{ rob_custom }} {
    list-style: none;
    padding-left: 0;
    margin: 0;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 4px {{ block.settings.benefit_item_gap }}px;
    font-size: {{ block.settings.benefit_font_size }}px;
    color: {{ block.settings.benefit_text_color }};
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} .benefits-list-{{ rob_custom }} {
    color: {{ block.settings.benefit_selected_text_color }};
  }

  .benefit-item-{{ rob_custom }} {
    display: flex;
    align-items: center;
    gap: 6px;
  }

  .checkmark-icon-{{ rob_custom }} {
    width: {{ block.settings.benefit_checkmark_size }}px;
    height: {{ block.settings.benefit_checkmark_size }}px;
    stroke: {{ block.settings.benefit_checkmark_color }}; /* currentColor can be used if text color should apply */
    flex-shrink: 0;
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} .checkmark-icon-{{ rob_custom }} {
    stroke: {{ block.settings.benefit_checkmark_selected_color }};
  }

  .flavor-selection-area-{{ rob_custom }} {
    margin-bottom: {{ block.settings.section_spacing }}px;
  }

  .flavor-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: {{ block.settings.flavor_header_margin_bottom }}px;
  }

  .flavor-title-{{ rob_custom }} {
    font-size: {{ block.settings.flavors_title_font_size }}px;
    font-weight: {{ block.settings.flavors_title_font_weight }};
    color: var(--rf-bab-text-color-{{ rob_custom }});
    margin: 0;
  }

  .flavor-status-message-{{ rob_custom }} {
    font-size: {{ block.settings.flavor_status_font_size }}px;
    padding: 4px 8px;
    border-radius: 4px;
  }
  .flavor-status-message-{{ rob_custom }}.error-{{ rob_custom }} {
    background-color: {{ block.settings.error_message_bg_color }};
    color: var(--rf-bab-error-color-{{ rob_custom }});
  }
  .flavor-status-message-{{ rob_custom }}.info-{{ rob_custom }} {
    background-color: {{ block.settings.info_message_bg_color }};
    color: var(--rf-bab-info-color-{{ rob_custom }});
  }

  .flavors-grid-{{ rob_custom }} {
    display: grid;
    gap: {{ block.settings.flavor_card_gap }}px;
  }
  .loading-flavors-{{ rob_custom }} {
    text-align: center;
    padding: 20px;
    color: var(--rf-bab-light-text-color-{{ rob_custom }});
  }

  .flavor-card-{{ rob_custom }} {
    display: grid;
    grid-template-columns: auto 1fr auto; /* image, info, controls */
    gap: 12px; /* from example */
    align-items: center;
    border: 1px solid var(--rf-bab-border-color-{{ rob_custom }});
    border-radius: {{ block.settings.flavor_card_border_radius }}px;
    padding: {{ block.settings.flavor_card_padding }}px;
    background-color: {{ block.settings.flavor_card_bg_color }};
  }
  /* .flavor-card-{{ rob_custom }}:hover {
    border-color: var(--rf-bab-primary-color-{{ rob_custom }});
  } */ /* This was from old example, target images don't clearly show hover on cards */


  .flavor-image-{{ rob_custom }} img { /* if images were shown */
    width: 60px; height: 60px; object-fit: cover; border-radius: 4px;
  }

  .flavor-info-{{ rob_custom }} {
    display: flex;
    flex-direction: column;
    gap: 4px;
    overflow: hidden;
  }

  .flavor-name-{{ rob_custom }} {
    font-size: {{ block.settings.flavor_name_font_size }}px;
    font-weight: {{ block.settings.flavor_name_font_weight }};
    color: var(--rf-bab-text-color-{{ rob_custom }});
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .flavor-description-{{ rob_custom }} {
    font-size: {{ block.settings.flavor_description_font_size }}px;
    color: var(--rf-bab-light-text-color-{{ rob_custom }});
    line-height: 1.4;
    /* max 2 lines with ellipsis if desired */
  }

  .flavor-controls-{{ rob_custom }} {
    display: flex;
    align-items: center;
    width: {{ block.settings.flavor_controls_width }}px; /* e.g. 100px */
  }

  .flavor-add-button-{{ rob_custom }} {
    background-color: var(--rf-bab-primary-color-{{ rob_custom }});
    color: var(--rf-bab-primary-text-color-{{ rob_custom }});
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    padding: {{ block.settings.small_button_padding_y }}px {{ block.settings.small_button_padding_x }}px;
    font-size: {{ block.settings.small_button_font_size }}px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease;
    width: 100%;
  }
  .flavor-add-button-{{ rob_custom }}:hover {
    background-color: {{ block.settings.primary_color_hover }};
  }

  .quantity-stepper-{{ rob_custom }} {
    display: flex;
    align-items: center;
    border: 1px solid var(--rf-bab-border-color-{{ rob_custom }});
    border-radius: {{ block.settings.button_border_radius }}px;
    width: 100%;
  }

  .quantity-stepper-{{ rob_custom }} button {
    background-color: {{ block.settings.stepper_button_bg_color }};
    color: var(--rf-bab-text-color-{{ rob_custom }});
    border: none;
    width: 30px; /* Adjust as needed */
    height: 30px; /* Adjust as needed */
    font-size: 18px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .quantity-stepper-{{ rob_custom }} button:first-child {
    border-right: 1px solid var(--rf-bab-border-color-{{ rob_custom }});
    border-radius: {{ block.settings.button_border_radius }}px 0 0 {{ block.settings.button_border_radius }}px;
  }
  .quantity-stepper-{{ rob_custom }} button:last-child {
    border-left: 1px solid var(--rf-bab-border-color-{{ rob_custom }});
    border-radius: 0 {{ block.settings.button_border_radius }}px {{ block.settings.button_border_radius }}px 0;
  }
   .quantity-stepper-{{ rob_custom }} button:hover {
    background-color: {{ block.settings.stepper_button_hover_bg_color }};
   }


  .quantity-stepper-{{ rob_custom }} input {
    width: 100%; /* Takes remaining space */
    text-align: center;
    border: none;
    font-size: {{ block.settings.flavor_quantity_font_size }}px;
    font-weight: bold;
    color: var(--rf-bab-text-color-{{ rob_custom }});
    padding: 0 5px;
    background: transparent;
    -moz-appearance: textfield;
    outline: none;
  }
  .quantity-stepper-{{ rob_custom }} input::-webkit-outer-spin-button,
  .quantity-stepper-{{ rob_custom }} input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .form-footer-{{ rob_custom }} {
    margin-top: {{ block.settings.section_spacing }}px;
    display: flex;
    flex-direction: column;
    gap: 8px; /* Gap between subtotal/savings and ATC button */
  }

  .subtotal-summary-{{ rob_custom }},
  .savings-summary-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: {{ block.settings.summary_font_size }}px;
  }
  .subtotal-label-{{ rob_custom }} {
    color: var(--rf-bab-text-color-{{ rob_custom }});
  }
  .subtotal-value-{{ rob_custom }} {
    font-weight: bold;
    color: var(--rf-bab-text-color-{{ rob_custom }});
  }
  .savings-summary-{{ rob_custom }} {
    background-color: {{ block.settings.savings_badge_bg_color }};
    color: {{ block.settings.savings_badge_text_color }};
    padding: {{ block.settings.savings_badge_padding_y }}px {{ block.settings.savings_badge_padding_x }}px;
    border-radius: {{ block.settings.savings_badge_border_radius }}px;
    font-weight: bold;
  }
  .savings-value-{{ rob_custom }} {
    /* Wrapper for prefix + amount */
  }


  .add-to-cart-button-{{ rob_custom }} {
    background-color: var(--rf-bab-primary-color-{{ rob_custom }});
    color: var(--rf-bab-primary-text-color-{{ rob_custom }});
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    padding: {{ block.settings.atc_button_padding_y }}px {{ block.settings.atc_button_padding_x }}px;
    font-size: {{ block.settings.atc_button_font_size }}px;
    font-weight: {{ block.settings.atc_button_font_weight }};
    cursor: pointer;
    width: 100%;
    transition: background-color 0.3s ease, opacity 0.3s ease;
    text-align: center;
  }
  .add-to-cart-button-{{ rob_custom }}:hover:not(:disabled) {
    background-color: {{ block.settings.primary_color_hover }};
  }
  .add-to-cart-button-{{ rob_custom }}:disabled {
    background-color: {{ block.settings.button_disabled_bg_color }};
    color: {{ block.settings.button_disabled_text_color }};
    cursor: not-allowed;
    opacity: 0.7;
  }

{%- endstyle -%}

<div class="rf-bab-form-block-{{ rob_custom }}" {{ block.shopify_attributes }}>
  <rf-bab-form-component-{{ rob_custom }}
    data-ai-gen-id="{{ rob_custom }}"
    data-box-product-id="{{ box_product_id_js }}"
    data-default-bag-count="{{ default_bag_count }}"
    data-currency-code="{{ currency_code }}"
    data-settings="{{ block.settings | json | escape }}"
  >
    {% comment %} Bag Quantity Selection {% endcomment %}
    <div class="bag-selection-container-{{ rob_custom }}">
      {%- for i in (1..4) reversed -%}
        {%- assign bags = i -%}
        <button
          class="bag-option-{{ rob_custom }} {%- if default_bag_count == bags %} selected-{{ rob_custom }}{% endif %} {%- if bags == 4 and block.settings.show_best_deal_badge %} best-deal-{{ rob_custom }}{% endif -%}"
          data-bags="{{ bags }}"
          type="button"
        >
          {%- if bags == 4 and block.settings.show_best_deal_badge -%}
            <span class="deal-badge-{{ rob_custom }}">{{ block.settings.best_deal_badge_text }}</span>
          {%- endif -%}
          <span class="bag-count-{{ rob_custom }}">
            {{ bags }} {{ block.settings.bag_label_singular }}{% if bags != 1 %}{{ block.settings.bag_label_plural_suffix }}{% endif %}
          </span>
        </button>
      {%- endfor -%}
    </div>

    {% comment %} Purchase Type Selection {% endcomment %}
    <div class="purchase-options-container-{{ rob_custom }}">
      {% comment %} Subscribe & Save Option {% endcomment %}
      <div class="purchase-type-button-{{ rob_custom }} subscribe-button-{{ rob_custom }} selected-{{ rob_custom }}" data-purchase-type="subscribe">
        {%- if block.settings.show_subscribe_banner and block.settings.subscribe_banner_text != blank -%}
          <div class="subscribe-banner-{{ rob_custom }}">{{ block.settings.subscribe_banner_text }}</div>
        {%- endif -%}
        <div class="purchase-header-{{ rob_custom }}">
          <span class="purchase-type-label-{{ rob_custom }}">{{ block.settings.subscribe_title }}</span>
          <div class="price-display-{{ rob_custom }}">
            <span class="original-price-{{ rob_custom }}" id="subscribeOriginalPrice-{{ rob_custom }}">$0.00</span>
            <span class="current-price-{{ rob_custom }}" id="subscribeTotalPrice-{{ rob_custom }}">$0.00</span>
          </div>
        </div>
        <ul class="benefits-list-{{ rob_custom }}">
          {%- if block.settings.benefit_1 != blank -%}
            <li class="benefit-item-{{ rob_custom }}">
              <svg class="checkmark-icon-{{ rob_custom }}" viewBox="0 0 12 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 4.5L4.5 8L11 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
              <span>{{ block.settings.benefit_1 }}</span>
            </li>
          {%- endif -%}
          {%- if block.settings.benefit_2 != blank -%}
            <li class="benefit-item-{{ rob_custom }}">
              <svg class="checkmark-icon-{{ rob_custom }}" viewBox="0 0 12 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 4.5L4.5 8L11 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
              <span>{{ block.settings.benefit_2 }}</span>
            </li>
          {%- endif -%}
          {%- if block.settings.benefit_3 != blank -%}
            <li class="benefit-item-{{ rob_custom }}">
              <svg class="checkmark-icon-{{ rob_custom }}" viewBox="0 0 12 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 4.5L4.5 8L11 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
              <span>{{ block.settings.benefit_3 }}</span>
            </li>
          {%- endif -%}
          {%- if block.settings.benefit_4 != blank -%}
            <li class="benefit-item-{{ rob_custom }}">
              <svg class="checkmark-icon-{{ rob_custom }}" viewBox="0 0 12 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 4.5L4.5 8L11 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
              <span>{{ block.settings.benefit_4 }}</span>
            </li>
          {%- endif -%}
        </ul>
      </div>

      {% comment %} One-time Purchase Option {% endcomment %}
      <div class="purchase-type-button-{{ rob_custom }} onetime-button-{{ rob_custom }}" data-purchase-type="onetime">
        <div class="purchase-header-{{ rob_custom }}">
          <span class="purchase-type-label-{{ rob_custom }}">{{ block.settings.onetime_title }}</span>
          <div class="price-display-{{ rob_custom }}">
             <span class="original-price-{{ rob_custom }}" id="onetimeOriginalPrice-{{ rob_custom }}">$0.00</span>
            <span class="current-price-{{ rob_custom }}" id="onetimeTotalPrice-{{ rob_custom }}">$0.00</span>
          </div>
        </div>
      </div>
    </div>

    {% comment %} Flavor Selection Section {% endcomment %}
    <div class="flavor-selection-area-{{ rob_custom }}">
      <div class="flavor-header-{{ rob_custom }}">
        <h3 class="flavor-title-{{ rob_custom }}">{{ block.settings.flavors_title }}</h3>
        <span class="flavor-status-message-{{ rob_custom }}" id="flavorStatusMessage-{{ rob_custom }}"></span>
      </div>
      <div class="flavors-grid-{{ rob_custom }}" id="flavorsGrid-{{ rob_custom }}">
        <div class="loading-flavors-{{ rob_custom }}">{{ block.settings.loading_flavors_text }}</div>
      </div>
    </div>

    {% comment %} Footer: Subtotal & ATC {% endcomment %}
    <div class="form-footer-{{ rob_custom }}">
      <div class="subtotal-summary-{{ rob_custom }}" id="subtotalSummaryContainer-{{ rob_custom }}" style="display: none;">
        <span class="subtotal-label-{{ rob_custom }}">{{ block.settings.subtotal_label }}</span>
        <span class="subtotal-value-{{ rob_custom }}" id="subtotalPrice-{{ rob_custom }}">$0.00</span>
      </div>
      <div class="savings-summary-{{ rob_custom }}" id="savingsSummaryContainer-{{ rob_custom }}" style="display: none;">
        <span class="savings-value-{{ rob_custom }}" id="savingsAmountText-{{ rob_custom }}">
          {{ block.settings.savings_text_prefix }} <span id="savingsAmount-{{ rob_custom }}">$0.00</span>
        </span>
      </div>
      <button
        type="button"
        class="add-to-cart-button-{{ rob_custom }}"
        id="addToCartButton-{{ rob_custom }}"
        disabled
      >
        {{ block.settings.atc_default_text }}
      </button>
    </div>
  </rf-bab-form-component-{{ rob_custom }}>
</div>

<script>
class RfBabFormComponent_{{ rob_custom }} extends HTMLElement {
  constructor() {
    super();
    this.rob_custom = this.dataset.aiGenId;
    this.boxProductId = this.dataset.boxProductId;
    this.defaultBagCount = parseInt(this.dataset.defaultBagCount, 10);
    this.currencyCode = this.dataset.currencyCode;
    this.settings = JSON.parse(this.dataset.settings);

    this.skioData = null;
    this.rawSkioResponse = null;
    this.selectableVariants = [];
    this.isSubscription = true; // Default to subscription
    this.selectedTotalBagTarget = this.defaultBagCount;
    this.flavorMetafields = {};
    this.flavorQuantities = {}; // Stores { variantPlatformId: quantity }

    console.log(`[${this.rob_custom}] Component Initialized. Product ID: ${this.boxProductId}, Default Bags: ${this.defaultBagCount}`);
  }

  connectedCallback() {
    this.cacheDomElements();
    this.loadFlavorMetafields();
    this.initializeEventListeners();
    this.fetchSkioData();
    this.updateSelectedBagUI(this.selectedTotalBagTarget); // Set initial UI for bag selection
    this.updatePurchaseTypeUI(); // Set initial UI for purchase type
    console.log(`[${this.rob_custom}] Component Connected and Event Listeners Initialized.`);
  }

  cacheDomElements() {
    this.dom = {
      bagOptionButtons: this.querySelectorAll(`.bag-option-${this.rob_custom}`),
      purchaseTypeButtons: this.querySelectorAll(`.purchase-type-button-${this.rob_custom}`),
      subscribeOriginalPrice: this.querySelector(`#subscribeOriginalPrice-${this.rob_custom}`),
      subscribeTotalPrice: this.querySelector(`#subscribeTotalPrice-${this.rob_custom}`),
      onetimeOriginalPrice: this.querySelector(`#onetimeOriginalPrice-${this.rob_custom}`), // May not be used if one-time isn't discounted
      onetimeTotalPrice: this.querySelector(`#onetimeTotalPrice-${this.rob_custom}`),
      flavorsGrid: this.querySelector(`#flavorsGrid-${this.rob_custom}`),
      flavorStatusMessage: this.querySelector(`#flavorStatusMessage-${this.rob_custom}`),
      subtotalSummaryContainer: this.querySelector(`#subtotalSummaryContainer-${this.rob_custom}`),
      subtotalPrice: this.querySelector(`#subtotalPrice-${this.rob_custom}`),
      savingsSummaryContainer: this.querySelector(`#savingsSummaryContainer-${this.rob_custom}`),
      savingsAmount: this.querySelector(`#savingsAmount-${this.rob_custom}`),
      addToCartButton: this.querySelector(`#addToCartButton-${this.rob_custom}`),
      loadingFlavorsText: this.querySelector(`.loading-flavors-${this.rob_custom}`)
    };
    console.log(`[${this.rob_custom}] DOM Elements Cached.`);
  }

  loadFlavorMetafields() {
    const metafieldsScript = document.getElementById(`flavorMetafields-${this.rob_custom}`);
    if (metafieldsScript && metafieldsScript.textContent) {
      try {
        this.flavorMetafields = JSON.parse(metafieldsScript.textContent);
        console.log(`[${this.rob_custom}] Flavor metafields loaded:`, Object.keys(this.flavorMetafields).length);
      } catch (e) {
        console.error(`[${this.rob_custom}] Error parsing flavor metafields JSON:`, e);
        console.log(`[${this.rob_custom}] Raw metafields content:`, metafieldsScript.textContent);
      }
    } else {
      console.warn(`[${this.rob_custom}] Flavor metafields script tag not found or empty.`);
    }
  }

  initializeEventListeners() {
    this.dom.bagOptionButtons.forEach(button => {
      button.addEventListener('click', (e) => this.handleBagSelection(e));
    });
    this.dom.purchaseTypeButtons.forEach(button => {
      button.addEventListener('click', (e) => this.handlePurchaseTypeSelection(e));
    });
    this.dom.addToCartButton.addEventListener('click', () => this.handleAddToCart());
  }

  async fetchSkioData() {
    if (!this.boxProductId || this.boxProductId === 'null') {
        console.error(`[${this.rob_custom}] Skio Product ID is missing. Cannot fetch Skio data.`);
        if(this.dom.loadingFlavorsText) this.dom.loadingFlavorsText.textContent = this.settings.skio_error_text;
        return;
    }
    console.log(`[${this.rob_custom}] Fetching Skio data for product ID: ${this.boxProductId}`);
    try {
      const response = await fetch('https://api.skio.com/storefront-http/get-dynamic-box', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productPlatformId: this.boxProductId })
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      this.rawSkioResponse = await response.json();
      console.log(`[${this.rob_custom}] Raw Skio Response:`, this.rawSkioResponse);
      this.skioData = this.parseSkioResponse(this.rawSkioResponse);
      console.log(`[${this.rob_custom}] Parsed Skio Data:`, this.skioData);

      if (this.skioData && this.skioData.selectableProductVariants) {
        this.selectableVariants = this.parseVariantsFromSkio(this.skioData);
        this.populateFlavorSelector();
        this.updatePricesAndValidation(); // Initial price update
      } else {
        console.error(`[${this.rob_custom}] Skio data or selectableProductVariants missing after parsing.`);
         if(this.dom.loadingFlavorsText) this.dom.loadingFlavorsText.textContent = this.settings.skio_error_text;
      }
    } catch (error) {
      console.error(`[${this.rob_custom}] Error fetching or parsing SkioBox data:`, error);
      if(this.dom.loadingFlavorsText) this.dom.loadingFlavorsText.textContent = this.settings.skio_error_text;
    }
  }
  
  parseSkioResponse(apiResponse) {
    if (!apiResponse || !apiResponse.DynamicBox) {
        console.error(`[${this.rob_custom}] Invalid Skio API response structure.`);
        return null;
    }
    const dynamicBox = apiResponse.DynamicBox;
    return {
        boxId: dynamicBox.boxId,
        currencyCode: dynamicBox.currencyCode || 'USD',
        fixedDiscountTier: dynamicBox.fixedDiscountTier || {},
        percentDiscountTier: dynamicBox.percentDiscountTier || {},
        sizeInterval: dynamicBox.sizeInterval || [1, 2, 3, 4], // Defaulting to 1-4 bags
        selectableProductVariants: dynamicBox.selectableProductVariants || [],
        sellingPlanGroup: dynamicBox.sellingPlanGroup || {},
        // Add any other necessary fields from Skio response
    };
  }

  parseVariantsFromSkio(parsedSkioData) {
    if (!parsedSkioData?.selectableProductVariants) return [];
    // The structure seems to be an array of products, each with variants
    return parsedSkioData.selectableProductVariants.flatMap(product =>
        product.productVariants.map(variant => ({
            platformId: variant.platformId, // This is the Shopify variant GID
            productVariantTitle: variant.productVariantTitle,
            imageSrc: variant.imageSrc, // Not used in this block, but good to have
            price: parseFloat(variant.price), // Ensure it's a number
            compareAtPrice: variant.compareAtPrice ? parseFloat(variant.compareAtPrice) : null,
            inventory: variant.inventory,
            productTitle: product.productTitle,
            // Adjusted price and selling plan ID will be determined later based on selection
        }))
    );
  }

  handleBagSelection(event) {
    const selectedButton = event.currentTarget;
    this.selectedTotalBagTarget = parseInt(selectedButton.dataset.bags, 10);
    console.log(`[${this.rob_custom}] Bag quantity selected: ${this.selectedTotalBagTarget}`);
    this.updateSelectedBagUI(this.selectedTotalBagTarget);
    this.updatePricesAndValidation();
  }

  updateSelectedBagUI(bags) {
    this.dom.bagOptionButtons.forEach(btn => {
      btn.classList.toggle(`selected-${this.rob_custom}`, parseInt(btn.dataset.bags, 10) === bags);
    });
  }

  handlePurchaseTypeSelection(event) {
    const selectedButton = event.currentTarget;
    this.isSubscription = selectedButton.dataset.purchaseType === 'subscribe';
    console.log(`[${this.rob_custom}] Purchase type selected: ${this.isSubscription ? 'Subscribe' : 'One-time'}`);
    this.updatePurchaseTypeUI();
    this.updatePricesAndValidation();
  }

  updatePurchaseTypeUI() {
     this.dom.purchaseTypeButtons.forEach(btn => {
      btn.classList.remove(`selected-${this.rob_custom}`);
    });
    const activeBtn = this.isSubscription ? this.querySelector(`.subscribe-button-${this.rob_custom}`) : this.querySelector(`.onetime-button-${this.rob_custom}`);
    if (activeBtn) activeBtn.classList.add(`selected-${this.rob_custom}`);
  }

  populateFlavorSelector() {
    if (!this.selectableVariants || this.selectableVariants.length === 0) {
      this.dom.flavorsGrid.innerHTML = `<div class="loading-flavors-${this.rob_custom}">${this.settings.no_flavors_text}</div>`;
      return;
    }
    this.dom.flavorsGrid.innerHTML = ''; // Clear loading/previous
    this.selectableVariants.forEach(variant => {
      const variantId = variant.platformId.split('/').pop(); // Get numeric ID for metafield lookup
      const description = this.flavorMetafields[variantId] || this.settings.default_flavor_description;

      const card = document.createElement('div');
      card.className = `flavor-card-${this.rob_custom}`;
      card.innerHTML = `
        <div class="flavor-info-${this.rob_custom}">
          <h4 class="flavor-name-${this.rob_custom}">${variant.productVariantTitle}</h4>
          <p class="flavor-description-${this.rob_custom}">${description}</p>
        </div>
        <div class="flavor-controls-${this.rob_custom}" id="controls-${variant.platformId.replace(/[\/:?=]/g, '')}-${this.rob_custom}">
          <button class="flavor-add-button-${this.rob_custom}" data-variant-id="${variant.platformId}">${this.settings.flavor_add_button_text}</button>
        </div>
      `;
      this.dom.flavorsGrid.appendChild(card);

      // Add event listener for the "Add" button
      card.querySelector(`.flavor-add-button-${this.rob_custom}`).addEventListener('click', (e) => this.handleAddFlavorClick(e, variant));
    });
  }

  handleAddFlavorClick(event, variant) {
    const variantId = variant.platformId;
    this.flavorQuantities[variantId] = (this.flavorQuantities[variantId] || 0) + 1;
    if (this.flavorQuantities[variantId] === 1) { // First time adding this flavor
        this.renderQuantityStepper(variant);
    } else { // Already has a stepper, just update its input
        const input = this.querySelector(`#quantity-${variantId.replace(/[\/:?=]/g, '')}-${this.rob_custom}`);
        if (input) input.value = this.flavorQuantities[variantId];
    }
    this.updatePricesAndValidation();
  }

  renderQuantityStepper(variant) {
    const variantId = variant.platformId;
    const controlsContainer = this.querySelector(`#controls-${variantId.replace(/[\/:?=]/g, '')}-${this.rob_custom}`);
    if (!controlsContainer) return;

    controlsContainer.innerHTML = `
      <div class="quantity-stepper-${this.rob_custom}">
        <button data-action="decrease" data-variant-id="${variantId}">-</button>
        <input type="number" value="${this.flavorQuantities[variantId]}" min="0" readonly id="quantity-${variantId.replace(/[\/:?=]/g, '')}-${this.rob_custom}">
        <button data-action="increase" data-variant-id="${variantId}">+</button>
      </div>
    `;
    controlsContainer.querySelectorAll('button').forEach(btn => {
      btn.addEventListener('click', (e) => this.handleQuantityChange(e, variant));
    });
  }

  handleQuantityChange(event, variant) {
    const action = event.currentTarget.dataset.action;
    const variantId = variant.platformId;
    let currentQty = this.flavorQuantities[variantId] || 0;

    if (action === 'increase') {
      currentQty++;
    } else if (action === 'decrease') {
      currentQty = Math.max(0, currentQty - 1);
    }
    this.flavorQuantities[variantId] = currentQty;

    if (currentQty === 0) { // Revert to "Add" button
      delete this.flavorQuantities[variantId];
      const controlsContainer = this.querySelector(`#controls-${variantId.replace(/[\/:?=]/g, '')}-${this.rob_custom}`);
      if(controlsContainer) {
        controlsContainer.innerHTML = `<button class="flavor-add-button-${this.rob_custom}" data-variant-id="${variantId}">${this.settings.flavor_add_button_text}</button>`;
        controlsContainer.querySelector('button').addEventListener('click', (e) => this.handleAddFlavorClick(e, variant));
      }
    } else {
      const input = this.querySelector(`#quantity-${variantId.replace(/[\/:?=]/g, '')}-${this.rob_custom}`);
      if (input) input.value = currentQty;
    }
    this.updatePricesAndValidation();
  }
  
  formatPrice(amount) {
    try {
      return new Intl.NumberFormat(undefined, { style: 'currency', currency: this.currencyCode }).format(amount);
    } catch (e) {
      console.warn(`[${this.rob_custom}] Error formatting price, falling back. Amount: ${amount}, Currency: ${this.currencyCode}`, e);
      return `$${(amount || 0).toFixed(2)}`;
    }
  }

  updatePricesAndValidation() {
    if (!this.skioData || !this.selectableVariants.length) {
        console.log(`[${this.rob_custom}] Skio data or variants not ready for price update.`);
        return;
    }

    let oneTimeBaseTotal = 0;
    let currentSelectedFlavorCount = 0;

    for (const variantId in this.flavorQuantities) {
        const quantity = this.flavorQuantities[variantId];
        if (quantity > 0) {
            const variantData = this.selectableVariants.find(v => v.platformId === variantId);
            if (variantData) {
                oneTimeBaseTotal += variantData.price * quantity;
                currentSelectedFlavorCount += quantity;
            }
        }
    }
    
    // Apply Skio's bag-based discount (percent or fixed) to one-time price
    let oneTimeDiscountedTotal = oneTimeBaseTotal;
    const skioDiscountPercent = parseFloat(this.skioData.percentDiscountTier?.[this.selectedTotalBagTarget] || 0);
    const skioDiscountFixed = parseFloat(this.skioData.fixedDiscountTier?.[this.selectedTotalBagTarget] || 0);

    if (skioDiscountPercent > 0) {
        oneTimeDiscountedTotal = oneTimeBaseTotal * (1 - skioDiscountPercent / 100);
    } else if (skioDiscountFixed > 0 && currentSelectedFlavorCount >= this.selectedTotalBagTarget) { 
        // Fixed discount might apply per box, ensure enough items are selected to form a box
        oneTimeDiscountedTotal = Math.max(0, oneTimeBaseTotal - skioDiscountFixed);
    }
    
    this.dom.onetimeTotalPrice.textContent = this.formatPrice(oneTimeDiscountedTotal / 100); // Assuming prices are in cents from Skio
    if (oneTimeDiscountedTotal < oneTimeBaseTotal && oneTimeBaseTotal > 0) {
        this.dom.onetimeOriginalPrice.textContent = this.formatPrice(oneTimeBaseTotal / 100);
        this.dom.onetimeOriginalPrice.style.display = 'inline';
        this.querySelector(`.onetime-button-${this.rob_custom}`)?.classList.add(`has-discount-${this.rob_custom}`);
    } else {
        this.dom.onetimeOriginalPrice.style.display = 'none';
        this.querySelector(`.onetime-button-${this.rob_custom}`)?.classList.remove(`has-discount-${this.rob_custom}`);
    }

    // Subscription price: Apply selling plan adjustment on top of oneTimeDiscountedTotal
    let subscriptionTotalPrice = oneTimeDiscountedTotal;
    if (this.skioData.sellingPlanGroup && Object.keys(this.skioData.sellingPlanGroup).length > 0) {
        const firstSellingPlanKey = Object.keys(this.skioData.sellingPlanGroup)[0];
        const sellingPlan = this.skioData.sellingPlanGroup[firstSellingPlanKey];
        if (sellingPlan && sellingPlan.priceAdjustmentAmount) { // priceAdjustmentAmount is percentage for Skio
            subscriptionTotalPrice = oneTimeDiscountedTotal * (1 - parseFloat(sellingPlan.priceAdjustmentAmount) / 100);
        }
    }
    this.dom.subscribeTotalPrice.textContent = this.formatPrice(subscriptionTotalPrice / 100);
    this.dom.subscribeOriginalPrice.textContent = this.formatPrice(oneTimeBaseTotal / 100); // Original is always pre-any-discount

    // Update Subtotal and Savings display
    const finalPrice = (this.isSubscription ? subscriptionTotalPrice : oneTimeDiscountedTotal) / 100;
    const originalNonDiscountedPrice = oneTimeBaseTotal / 100;
    const savings = originalNonDiscountedPrice - finalPrice;

    if (currentSelectedFlavorCount >= this.selectedTotalBagTarget && finalPrice > 0) {
        this.dom.subtotalPrice.textContent = this.formatPrice(finalPrice);
        this.dom.subtotalSummaryContainer.style.display = 'flex';

        if (savings > 0) {
            this.dom.savingsAmount.textContent = this.formatPrice(savings);
            this.dom.savingsSummaryContainer.style.display = 'flex';
        } else {
            this.dom.savingsSummaryContainer.style.display = 'none';
        }
    } else {
        this.dom.subtotalSummaryContainer.style.display = 'none';
        this.dom.savingsSummaryContainer.style.display = 'none';
    }
    
    // Validate quantities and update ATC button
    this.validateFlavorQuantities(currentSelectedFlavorCount);
    console.log(`[${this.rob_custom}] Prices and validation updated. Current Bags: ${currentSelectedFlavorCount}, Target: ${this.selectedTotalBagTarget}`);
  }


  validateFlavorQuantities(currentSelectedFlavorCount) {
    const remainingBags = this.selectedTotalBagTarget - currentSelectedFlavorCount;

    if (remainingBags > 0) {
      this.dom.addToCartButton.disabled = true;
      this.dom.addToCartButton.textContent = this.settings.atc_select_more_text.replace('{count}', remainingBags).replace('{s}', remainingBags !== 1 ? this.settings.bag_label_plural_suffix : '');
      this.dom.flavorStatusMessage.textContent = this.settings.status_more_to_go_text.replace('{count}', remainingBags).replace('{s}', remainingBags !== 1 ? this.settings.bag_label_plural_suffix : '');
      this.dom.flavorStatusMessage.className = `flavor-status-message-${this.rob_custom} error-${this.rob_custom}`;
    } else { // Target met or exceeded
      this.dom.addToCartButton.disabled = false;
      this.dom.addToCartButton.textContent = this.settings.atc_ready_text;
      if (currentSelectedFlavorCount > this.selectedTotalBagTarget && this.settings.status_can_add_more_text) {
        this.dom.flavorStatusMessage.textContent = this.settings.status_can_add_more_text;
      } else {
        this.dom.flavorStatusMessage.textContent = this.settings.status_all_set_text;
      }
      this.dom.flavorStatusMessage.className = `flavor-status-message-${this.rob_custom} info-${this.rob_custom}`;
    }
     this.dom.flavorStatusMessage.style.display = this.dom.flavorStatusMessage.textContent ? 'inline-block' : 'none';
  }

  async handleAddToCart() {
    console.log(`[${this.rob_custom}] Add to cart initiated.`);
    this.dom.addToCartButton.disabled = true;
    this.dom.addToCartButton.textContent = this.settings.atc_adding_text;

    const items = [];
    let sellingPlanId = null;

    if (this.isSubscription && this.skioData.sellingPlanGroup && Object.keys(this.skioData.sellingPlanGroup).length > 0) {
        const firstSellingPlanKey = Object.keys(this.skioData.sellingPlanGroup)[0]; // e.g. "gid://shopify/SellingPlanGroup/12345"
        const skioSellingPlan = this.skioData.sellingPlanGroup[firstSellingPlanKey];
        // Find a mapped selling plan ID if available for the variants, otherwise use a default from the group
        // Skio's `variantMapping` under `sellingPlanGroup[id]` would provide specific plan IDs per variant if needed.
        // For a simple dynamic box, often one main selling plan from the group is used.
        // The `planId` from `variantMapping` if it existed, or a primary selling plan from the group.
        // For now, let's assume the first plan in the first group is what we want.
        // sellingPlanId = skioSellingPlan.sellingPlans[0].platformId.split('/').pop(); // Example path, might vary
        // The simple approach from the original snippet was to take the GID of the *group* and extract the ID.
        // However, cart/add.js needs selling_plan ID not group ID.
        // Skio's example for dynamic box usually means the items are added with properties, and Skio handles subscription linking.
        // Let's check if `skioData.sellingPlanGroup[key].variantMapping[variantId].planId` provides the actual selling plan ID.
        // The example used `_dynamicBoxIndex` and `_dynamicBoxId` properties.

        // If Skio requires a specific selling plan to be passed per item:
        // Find the first selling plan ID from the selling plan group data.
        // This logic might need refinement based on actual Skio requirements for dynamic boxes.
        const groupKey = Object.keys(this.skioData.sellingPlanGroup)[0];
        const group = this.skioData.sellingPlanGroup[groupKey];
        if (group.sellingPlans && group.sellingPlans.length > 0) {
             sellingPlanId = group.sellingPlans[0].platformId.split('/').pop(); // Get numeric ID
        } else {
            console.warn(`[${this.rob_custom}] No selling plans found in the Skio data for subscription.`);
        }

    }


    for (const variantId in this.flavorQuantities) {
      const quantity = this.flavorQuantities[variantId];
      if (quantity > 0) {
        const item = {
          id: variantId.split('/').pop(), // Numeric Shopify Variant ID
          quantity: quantity,
          properties: {
            '_dynamicBoxId': this.skioData.boxId,
            '_dynamicBoxGroup': this.selectedTotalBagTarget // Or some other identifier for the chosen bag configuration
            // Add other properties as required by Skio
          }
        };
        if (this.isSubscription && sellingPlanId) {
          item.selling_plan = sellingPlanId;
        }
        items.push(item);
      }
    }

    if (items.length === 0) {
      console.warn(`[${this.rob_custom}] No items to add to cart.`);
      this.dom.addToCartButton.textContent = this.settings.atc_ready_text; // Revert
      this.validateFlavorQuantities(0); // Re-validate
      return;
    }

    console.log(`[${this.rob_custom}] Adding to cart:`, { items: items });

    try {
      const response = await fetch(`${window.Shopify.routes.root}cart/add.js`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ items: items }),
      });
      const cartData = await response.json();
      console.log(`[${this.rob_custom}] Cart add response:`, cartData);
      if (response.ok) {
        document.dispatchEvent(new CustomEvent('cart:updated', { bubbles: true, detail: cartData }));
        // Optionally redirect to cart or show success
        if (this.settings.redirect_to_cart) {
            window.location.href = window.Shopify.routes.root + 'cart';
        } else {
             // Refresh cart drawer if present (theme-dependent)
            const cartDrawer = document.querySelector('cart-drawer') || document.querySelector('.cart-drawer'); // Common selectors
            if (cartDrawer && typeof cartDrawer.open === 'function') {
                // cartDrawer.open(); // Or a method to refresh and open
            } else if (cartDrawer && typeof cartDrawer.refresh === 'function') {
                cartDrawer.refresh(true);
            }
             this.dom.addToCartButton.textContent = this.settings.atc_success_text || 'Added!';
             setTimeout(() => {
                this.dom.addToCartButton.disabled = false;
                this.validateFlavorQuantities(Object.values(this.flavorQuantities).reduce((a, b) => a + b, 0));
             }, 2000);
        }
      } else {
        throw new Error(cartData.description || cartData.message || 'Error adding to cart');
      }
    } catch (error) {
      console.error(`[${this.rob_custom}] Error adding to cart:`, error);
      this.dom.addToCartButton.disabled = false;
      this.dom.addToCartButton.textContent = this.settings.atc_error_text || 'Error - Try Again';
      // Show error message to user
    }
  }
}
customElements.define(`rf-bab-form-component-${rob_custom}`, RfBabFormComponent_{{ rob_custom }});
</script>

{% schema %}
{
  "name": "Build-a-Box Form",
  "tag": "div",
  "class": "rf-bab-form-block-wrapper",
  "settings": [
    {
      "type": "header",
      "content": "Data Configuration"
    },
    {
      "type": "product",
      "id": "main_product_for_skio",
      "label": "Skio Dynamic Box Product",
      "info": "Select the Shopify product configured as a Dynamic Box in Skio."
    },
    {
      "type": "collection",
      "id": "collection_for_flavor_metafields",
      "label": "Flavor Description Collection",
      "info": "Optional: Collection whose product variants provide flavor descriptions via 'custom.flavor_description' metafield. If blank, attempts to use variants from the Skio product."
    },
    {
      "type": "number",
      "id": "default_bag_count",
      "label": "Default Selected Bag Count",
      "default": 3,
      "info": "Number of bags initially selected (1-4)."
    },
    {
        "type": "checkbox",
        "id": "redirect_to_cart",
        "label": "Redirect to cart on add",
        "default": false
    },
    {
      "type": "header",
      "content": "General Styling"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Block Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "block_padding",
      "label": "Block Padding",
      "min": 0, "max": 50, "step": 1, "unit": "px",
      "default": 20
    },
    {
      "type": "range",
      "id": "block_border_radius",
      "label": "Block Border Radius",
      "min": 0, "max": 30, "step": 1, "unit": "px",
      "default": 8
    },
    {
      "type": "range",
      "id": "block_border_width",
      "label": "Block Border Width",
      "min": 0, "max": 5, "step": 1, "unit": "px",
      "default": 0
    },
    {
      "type": "color",
      "id": "block_border_color",
      "label": "Block Border Color",
      "default": "#E0E0E0"
    },
     {
      "type": "range",
      "id": "max_width",
      "label": "Max Width of Block",
      "min": 300, "max": 800, "step": 10, "unit": "px",
      "default": 600
    },
    {
      "type": "font_picker",
      "id": "font",
      "label": "Base Font",
      "default": "sans-serif"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Primary Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "light_text_color",
      "label": "Secondary/Light Text Color",
      "default": "#777777"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Default Border Color",
      "default": "#E0E0E0"
    },
    {
      "type": "range",
      "id": "section_spacing",
      "label": "Spacing Between Sections",
      "min": 10, "max": 40, "step": 1, "unit": "px",
      "default": 20
    },
    {
      "type": "header",
      "content": "Bag Selection Buttons"
    },
    {
      "type": "text",
      "id": "bag_label_singular",
      "label": "Label for Single Bag (e.g., Bag)",
      "default": "Bag"
    },
    {
      "type": "text",
      "id": "bag_label_plural_suffix",
      "label": "Plural Suffix (e.g., s)",
      "default": "s"
    },
    {
      "type": "range",
      "id": "bag_option_gap",
      "label": "Gap Between Bag Buttons",
      "min": 4, "max": 20, "step": 1, "unit": "px",
      "default": 8
    },
    {
      "type": "color",
      "id": "bag_option_bg_color",
      "label": "Bag Button BG Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "bag_option_selected_bg_color",
      "label": "Selected Bag Button BG Color",
      "default": "#F0F0F0"
    },
    {
      "type": "color",
      "id": "bag_option_selected_text_color",
      "label": "Selected Bag Button Text Color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "bag_option_border_width",
      "label": "Bag Button Border Width", "min": 1, "max": 3, "step": 1, "unit": "px", "default": 1
    },
    {
      "type": "range",
      "id": "bag_option_selected_border_width",
      "label": "Selected Bag Button Border Width", "min": 1, "max": 3, "step": 1, "unit": "px", "default": 2
    },
    {
      "type": "range",
      "id": "bag_option_border_radius",
      "label": "Bag Button Border Radius", "min": 0, "max": 20, "step": 1, "unit": "px", "default": 6
    },
    {
      "type": "range",
      "id": "bag_option_padding_y",
      "label": "Bag Button Padding (Y)", "min": 5, "max": 20, "step": 1, "unit": "px", "default": 10
    },
    {
      "type": "range",
      "id": "bag_option_padding_x",
      "label": "Bag Button Padding (X)", "min": 5, "max": 20, "step": 1, "unit": "px", "default": 10
    },
    {
      "type": "range",
      "id": "bag_option_font_size",
      "label": "Bag Button Font Size", "min": 12, "max": 18, "step": 1, "unit": "px", "default": 14
    },
    {
      "type": "select",
      "id": "bag_option_font_weight",
      "label": "Bag Button Font Weight",
      "options": [{"value": "400", "label": "Normal"}, {"value": "600", "label": "Semi-Bold"}, {"value": "700", "label": "Bold"}],
      "default": "600"
    },
    {
      "type": "checkbox",
      "id": "show_best_deal_badge",
      "label": "Show 'Best Deal' Badge (on 4 bags)",
      "default": true
    },
    {
      "type": "text",
      "id": "best_deal_badge_text",
      "label": "Best Deal Badge Text",
      "default": "Best Deal"
    },
    {
      "type": "color",
      "id": "best_deal_badge_bg_color",
      "label": "Best Deal Badge BG",
      "default": "#D32F2F"
    },
    {
      "type": "color",
      "id": "best_deal_badge_text_color",
      "label": "Best Deal Badge Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "best_deal_badge_border_radius", "label": "Best Deal Badge Radius", "min": 0, "max": 10, "step": 1, "unit": "px", "default": 3
    },
    {
      "type": "range",
      "id": "best_deal_badge_font_size", "label": "Best Deal Badge Font Size", "min": 8, "max": 14, "step": 1, "unit": "px", "default": 10
    },
    {
      "type": "header",
      "content": "Purchase Options (Subscribe/One-Time)"
    },
    {
      "type": "text",
      "id": "subscribe_title",
      "label": "Subscribe Option Title",
      "default": "Subscribe & Save"
    },
    {
      "type": "text",
      "id": "onetime_title",
      "label": "One-Time Purchase Title",
      "default": "One-time Purchase"
    },
    {
      "type": "checkbox",
      "id": "show_subscribe_banner",
      "label": "Show Subscribe Banner",
      "default": true
    },
    {
      "type": "text",
      "id": "subscribe_banner_text",
      "label": "Subscribe Banner Text",
      "default": "SAVE 38% ON FIRST ORDER"
    },
    {
      "type": "color",
      "id": "subscribe_banner_bg_color",
      "label": "Subscribe Banner BG Color",
      "default": "#4A00E0"
    },
    {
      "type": "color",
      "id": "subscribe_banner_text_color",
      "label": "Subscribe Banner Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "subscribe_banner_font_size", "label": "Subscribe Banner Font Size", "min":10, "max":16, "step":1, "unit":"px", "default":12
    },
    {
      "type": "range",
      "id": "purchase_option_gap", "label": "Gap Between Purchase Options", "min": 8, "max": 20, "step": 1, "unit": "px", "default": 10
    },
    {
      "type": "color",
      "id": "purchase_option_bg_color", "label": "Purchase Option BG", "default": "#F8F8F8"
    },
    {
      "type": "color",
      "id": "purchase_option_selected_bg_color", "label": "Selected Purchase Option BG", "default": "#E8E0FF"
    },
    {
      "type": "range",
      "id": "purchase_option_border_radius", "label": "Purchase Option Radius", "min": 0, "max": 20, "step": 1, "unit": "px", "default": 8
    },
    {
      "type": "range",
      "id": "purchase_option_padding_y", "label": "Purchase Option Padding (Y)", "min": 10, "max": 25, "step": 1, "unit": "px", "default": 15
    },
    {
      "type": "range",
      "id": "purchase_option_padding_x", "label": "Purchase Option Padding (X)", "min": 10, "max": 25, "step": 1, "unit": "px", "default": 15
    },
    {
      "type": "range",
      "id": "purchase_label_font_size", "label": "Label Font Size", "min":14, "max":20, "step":1, "unit":"px", "default":16
    },
    {
      "type": "select",
      "id": "purchase_label_font_weight", "label": "Label Font Weight", "options": [{"value": "400", "label": "Normal"}, {"value": "600", "label": "Semi-Bold"}, {"value": "700", "label": "Bold"}], "default": "700"
    },
    {
      "type": "color",
      "id": "purchase_label_selected_text_color", "label": "Selected Label Text Color", "default": "#4A00E0"
    },
    {
      "type": "range",
      "id": "original_price_font_size", "label": "Original Price Font Size", "min":10, "max":16, "step":1, "unit":"px", "default":12
    },
    {
      "type": "range",
      "id": "current_price_font_size", "label": "Current Price Font Size", "min":14, "max":20, "step":1, "unit":"px", "default":16
    },
    {
      "type": "select",
      "id": "current_price_font_weight", "label": "Current Price Font Weight", "options": [{"value": "400", "label": "Normal"}, {"value": "600", "label": "Semi-Bold"}, {"value": "700", "label": "Bold"}], "default": "700"
    },
     {
      "type": "color",
      "id": "current_price_selected_text_color", "label": "Selected Current Price Text Color", "default": "#4A00E0"
    },
    {
      "type": "header",
      "content": "Subscription Benefits List"
    },
    {
      "type": "text", "id": "benefit_1", "label": "Benefit 1 Text", "default": "Free shipping"
    },
    {
      "type": "text", "id": "benefit_2", "label": "Benefit 2 Text", "default": "15% OFF future orders"
    },
    {
      "type": "text", "id": "benefit_3", "label": "Benefit 3 Text", "default": "No contract, cancel easily"
    },
    {
      "type": "text", "id": "benefit_4", "label": "Benefit 4 Text", "default": "Out of stock protection"
    },
    {
      "type": "range", "id": "benefit_item_gap", "label": "Gap Between Benefit Items (horizontal)", "min":4,"max":20,"step":1,"unit":"px","default":10
    },
    {
      "type": "range", "id": "benefit_font_size", "label": "Benefit Font Size", "min":10,"max":14,"step":1,"unit":"px","default":12
    },
    {
      "type": "color", "id": "benefit_text_color", "label": "Benefit Text Color", "default":"#555555"
    },
    {
      "type": "color", "id": "benefit_selected_text_color", "label": "Selected Benefit Text Color", "default":"#4A00E0"
    },
    {
      "type": "range", "id": "benefit_checkmark_size", "label": "Checkmark Size", "min":8,"max":16,"step":1,"unit":"px","default":10
    },
    {
      "type": "color", "id": "benefit_checkmark_color", "label": "Checkmark Color", "default":"#555555"
    },
    {
      "type": "color", "id": "benefit_checkmark_selected_color", "label": "Selected Checkmark Color", "default":"#4A00E0"
    },
    {
      "type": "header",
      "content": "Flavor Selection"
    },
    {
      "type": "text", "id": "flavors_title", "label": "Flavors Section Title", "default": "SELECT FLAVORS"
    },
    {
      "type": "range", "id": "flavor_header_margin_bottom", "label": "Flavor Header Margin Bottom", "min":5,"max":20,"step":1,"unit":"px","default":10
    },
    {
      "type": "range", "id": "flavors_title_font_size", "label": "Flavors Title Size", "min":14,"max":22,"step":1,"unit":"px","default":16
    },
    {
      "type": "select", "id": "flavors_title_font_weight", "label": "Flavors Title Weight", "options": [{"value": "400", "label": "Normal"}, {"value": "600", "label": "Semi-Bold"}, {"value": "700", "label": "Bold"}], "default": "700"
    },
    {
      "type": "range", "id": "flavor_status_font_size", "label": "Flavor Status Message Size", "min":10,"max":14,"step":1,"unit":"px","default":12
    },
    {
      "type": "color", "id": "error_message_bg_color", "label": "Error Message BG", "default": "#FFEBEE"
    },
    {
      "type": "color", "id": "error_color", "label": "Error Message Text Color", "default": "#D32F2F"
    },
    {
      "type": "color", "id": "info_message_bg_color", "label": "Info Message BG", "default": "#E3F2FD"
    },
    {
      "type": "color", "id": "info_color", "label": "Info Message Text Color", "default": "#1976D2"
    },
    {
      "type": "text", "id": "loading_flavors_text", "label": "Loading Flavors Text", "default": "Loading flavors..."
    },
    {
      "type": "text", "id": "no_flavors_text", "label": "No Flavors Available Text", "default": "No flavors available at this time."
    },
    {
      "type": "text", "id": "skio_error_text", "label": "Skio/Data Error Text", "default": "Could not load flavor options. Please try again later."
    },
    {
      "type": "range", "id": "flavor_card_gap", "label": "Gap Between Flavor Cards", "min":5,"max":20,"step":1,"unit":"px","default":10
    },
    {
      "type": "color", "id": "flavor_card_bg_color", "label": "Flavor Card BG Color", "default": "#FFFFFF"
    },
    {
      "type": "range", "id": "flavor_card_border_radius", "label": "Flavor Card Radius", "min":0,"max":15,"step":1,"unit":"px","default":8
    },
    {
      "type": "range", "id": "flavor_card_padding", "label": "Flavor Card Padding", "min":8,"max":20,"step":1,"unit":"px","default":12
    },
    {
      "type": "range", "id": "flavor_name_font_size", "label": "Flavor Name Size", "min":13,"max":18,"step":1,"unit":"px","default":15
    },
    {
      "type": "select", "id": "flavor_name_font_weight", "label": "Flavor Name Weight", "options": [{"value": "400", "label": "Normal"}, {"value": "600", "label": "Semi-Bold"}, {"value": "700", "label": "Bold"}], "default": "700"
    },
    {
      "type": "range", "id": "flavor_description_font_size", "label": "Flavor Description Size", "min":10,"max":14,"step":1,"unit":"px","default":12
    },
    {
      "type": "text", "id": "default_flavor_description", "label": "Default Flavor Description", "default": "A delicious choice.", "info": "Used if metafield is missing."
    },
    {
      "type": "range", "id": "flavor_controls_width", "label": "Flavor Controls Width", "min":80,"max":150,"step":5,"unit":"px","default":100
    },
    {
      "type": "text", "id": "flavor_add_button_text", "label": "Flavor 'Add' Button Text", "default": "Add +"
    },
    {
      "type": "color", "id": "stepper_button_bg_color", "label": "Stepper Button BG Color", "default":"#F5F5F5"
    },
     {
      "type": "color", "id": "stepper_button_hover_bg_color", "label": "Stepper Button Hover BG", "default":"#E0E0E0"
    },
    {
      "type": "range", "id": "flavor_quantity_font_size", "label": "Flavor Quantity Input Size", "min":12,"max":16,"step":1,"unit":"px","default":14
    },
    {
      "type": "header",
      "content": "Summary & Add to Cart Button"
    },
    {
      "type": "text", "id": "subtotal_label", "label": "Subtotal Label", "default": "Subtotal:"
    },
    {
      "type": "text", "id": "savings_text_prefix", "label": "Savings Text Prefix", "default": "You're saving "
    },
    {
      "type": "range", "id": "summary_font_size", "label": "Summary Font Size", "min":12,"max":18,"step":1,"unit":"px","default":14
    },
    {
      "type": "color", "id": "savings_badge_bg_color", "label": "Savings Badge BG", "default": "#E8F5E9"
    },
    {
      "type": "color", "id": "savings_badge_text_color", "label": "Savings Badge Text Color", "default": "#2E7D32"
    },
    {
      "type": "range", "id": "savings_badge_padding_y", "label": "Savings Badge Padding Y", "min":2,"max":10,"step":1,"unit":"px","default":4
    },
    {
      "type": "range", "id": "savings_badge_padding_x", "label": "Savings Badge Padding X", "min":5,"max":15,"step":1,"unit":"px","default":8
    },
    {
      "type": "range", "id": "savings_badge_border_radius", "label": "Savings Badge Radius", "min":0,"max":10,"step":1,"unit":"px","default":4
    },
    {
      "type": "text", "id": "atc_default_text", "label": "ATC Button Default Text", "default": "SELECT FLAVORS"
    },
    {
      "type": "text", "id": "atc_select_more_text", "label": "ATC Button 'Select More' Text", "default": "SELECT {count} MORE BAG{s}", "info":"Use {count} and {s} for dynamic values."
    },
    {
      "type": "text", "id": "atc_ready_text", "label": "ATC Button Ready Text", "default": "ADD TO CART"
    },
    {
      "type": "text", "id": "atc_adding_text", "label": "ATC Button Adding Text", "default": "ADDING..."
    },
    {
      "type": "text", "id": "atc_success_text", "label": "ATC Button Success Text", "default": "ADDED!"
    },
    {
      "type": "text", "id": "atc_error_text", "label": "ATC Button Error Text", "default": "ERROR - TRY AGAIN"
    },
    {
      "type": "text", "id": "status_more_to_go_text", "label": "Flavor Status 'More to Go'", "default": "{count} Flavor{s} to Go", "info":"Use {count} and {s}."
    },
    {
      "type": "text", "id": "status_all_set_text", "label": "Flavor Status 'All Set'", "default": "All Set!"
    },
    {
      "type": "text", "id": "status_can_add_more_text", "label": "Flavor Status 'Can Add More'", "default": "All Set! (You can add more)"
    },
    {
      "type": "color", "id": "primary_color", "label": "Primary Action Color", "default": "#673AB7"
    },
    {
      "type": "color", "id": "primary_color_hover", "label": "Primary Action Color (Hover)", "default": "#512DA8"
    },
    {
      "type": "color", "id": "primary_text_color", "label": "Text on Primary Action Color", "default": "#FFFFFF"
    },
    {
      "type": "color", "id": "secondary_color", "label": "Secondary Action Color", "default": "#CDDC39"
    },
    {
      "type": "range", "id": "button_border_radius", "label": "General Button Radius", "min":0,"max":20,"step":1,"unit":"px","default":6
    },
    {
      "type": "range", "id": "small_button_padding_y", "label": "Small Button Padding Y", "min":5,"max":15,"step":1,"unit":"px","default":8
    },
    {
      "type": "range", "id": "small_button_padding_x", "label": "Small Button Padding X", "min":8,"max":20,"step":1,"unit":"px","default":12
    },
    {
      "type": "range", "id": "small_button_font_size", "label": "Small Button Font Size", "min":12,"max":16,"step":1,"unit":"px","default":14
    },
    {
      "type": "range", "id": "atc_button_padding_y", "label": "ATC Button Padding Y", "min":10,"max":25,"step":1,"unit":"px","default":12
    },
    {
      "type": "range", "id": "atc_button_padding_x", "label": "ATC Button Padding X", "min":15,"max":30,"step":1,"unit":"px","default":20
    },
    {
      "type": "range", "id": "atc_button_font_size", "label": "ATC Button Font Size", "min":14,"max":20,"step":1,"unit":"px","default":16
    },
    {
      "type": "select", "id": "atc_button_font_weight", "label": "ATC Button Font Weight", "options": [{"value": "400", "label": "Normal"}, {"value": "600", "label": "Semi-Bold"}, {"value": "700", "label": "Bold"}], "default": "700"
    },
    {
      "type": "color", "id": "button_disabled_bg_color", "label": "Disabled Button BG Color", "default": "#BDBDBD"
    },
    {
      "type": "color", "id": "button_disabled_text_color", "label": "Disabled Button Text Color", "default": "#757575"
    }
  ],
  "presets": [
    {
      "name": "Build-a-Box Form"
    }
  ]
}
{% endschema %}