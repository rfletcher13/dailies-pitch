{%- comment -%}
  IMPORTANT: This block replaces the standard product form.
  It relies on the global `product` object for the current product page.
  It also uses Skio.com's API for dynamic box functionality.
  Flavor descriptions and nutritional information are expected to be variant metafields.
{%- endcomment -%}

{% doc %}
  @prompt
  The user wants to refactor an existing Shopify product page snippet and section into a single, self-contained Shopify Liquid Block. This block will replace the standard product form (variant options, quantity selector, add to cart, subscribe buttons, etc.) on a product page.

  Functional Requirements:
  1.  Integrate Skio.com dynamic box functionality.
  2.  Allow users to select the number of "bags" (e.g., 1, 2, 3, 4 bags), with a "Best Deal" badge for one option.
  3.  Offer "Subscribe & Save" and "One-time Purchase" options.
  4.  Display dynamic pricing based on the number of bags and purchase type (including strikethrough original prices and savings).
  5.  Allow users to select different product "flavors" (variants) up to the chosen number of bags.
  6.  Each flavor should display its name, a short description (from a variant metafield), and an image.
  7.  Quantity controls (+/- buttons, or an "Add" button switching to quantity controls) for each flavor.
  8.  Display a message indicating how many more flavors need to be selected or an "All Set!" message.
  9.  A main "Add to Cart" button, which updates its text (e.g., "SELECT X MORE BAGS" or "ADD TO CART {{price}}") based on selection state.
  10. Add selected items to the cart using Shopify's AJAX API, including necessary Skio properties and selling plan ID for subscriptions.
  11. (Optional, configurable) Display product title, breadcrumbs, ratings, tags, and a custom product description.
  12. (Optional, configurable) Display a "Risk-Free Trial" section with an icon and text.
  13. (Optional, configurable) Display a collapsible "Nutritional Information" section with a dropdown to select a flavor and view its nutritional image (from a variant metafield).
  14. Display a "SAVE X% ON FIRST ORDER" banner.
  15. Images: The main product carousel and general USP icons from the original snippet should be removed. Small images for each flavor in the selection list should be kept as shown in the target UI examples.

  Styling Considerations:
  1.  The block's appearance should match the provided UI example images.
  2.  All CSS must be namespaced using a unique ID.
  3.  Styling options (colors, fonts, spacing, borders) should be highly configurable via the Shopify schema.

  UX Specifications:
  1.  Clear visual distinction between selected and unselected options.
  2.  Interactive updates to price and selection status messages.
  3.  Responsive design for various screen sizes.

  Metafield Dependencies:
  1.  `variant.metafields.custom.flavor_description`: Text metafield for flavor descriptions.
  2.  `variant.metafields.custom.nutritional_information`: File metafield (image) for nutritional information. (Note: Schema will allow configuration of these metafield keys).

  Structure Requirements:
  1.  Single file output.
  2.  Strict order: `% doc %`, `rob_custom` assignment, global Liquid, `% style %`, HTML, `script`, `% schema %`.
  3.  JavaScript encapsulated (Custom Element preferred).
  4.  Comprehensive and detailed Shopify schema.
  5.  Console logs for debugging.
{% enddoc %}

{% assign rob_custom = block.id | replace: '_', '' | downcase %}

{%- liquid
  assign product_obj = product
  if block.settings.product_to_configure != blank and all_products[block.settings.product_to_configure.handle]
    assign product_obj = all_products[block.settings.product_to_configure.handle]
  endif

  assign show_product_header = block.settings.show_product_header
  assign custom_product_description = block.settings.custom_product_description
  assign product_tags_display = product_obj.tags | join: " | "
  if block.settings.product_tags_override != blank
    assign product_tags_display = block.settings.product_tags_override
  endif

  assign show_risk_free_trial = block.settings.show_risk_free_trial
  assign guarantee_icon = block.settings.guarantee_icon
  assign guarantee_text = block.settings.guarantee_text

  assign show_nutritional_info = block.settings.show_nutritional_info_dropdown
  assign nutritional_info_title = block.settings.nutritional_info_title

  assign flavor_desc_metafield_namespace = block.settings.flavor_description_metafield | split: '.' | first | default: "custom"
  assign flavor_desc_metafield_key = block.settings.flavor_description_metafield | split: '.' | last | default: "flavor_description"
  assign nutritional_info_metafield_namespace = block.settings.nutritional_info_metafield | split: '.' | first | default: "custom"
  assign nutritional_info_metafield_key = block.settings.nutritional_info_metafield | split: '.' | last | default: "nutritional_information"

  assign bag_label_singular = block.settings.bag_label
  assign bag_label_plural = block.settings.bag_label | append: 's' 
  if block.settings.bag_label == "Bag" 
    assign bag_label_plural = "Bags"
  endif

-%}

<script type="application/json" id="flavorData-{{ rob_custom }}">
  {
    "variants": {
      {%- for variant_obj in product_obj.variants -%}
        "{{ variant_obj.id }}": {
          "description": {{ variant_obj.metafields[flavor_desc_metafield_namespace][flavor_desc_metafield_key] | default: "No flavor description available." | json }},
          "nutritional_info_url": {% if variant_obj.metafields[nutritional_info_metafield_namespace][nutritional_info_metafield_key].type == 'file_reference' and variant_obj.metafields[nutritional_info_metafield_namespace][nutritional_info_metafield_key].value != blank %}{{ variant_obj.metafields[nutritional_info_metafield_namespace][nutritional_info_metafield_key].value | file_img_url: 'original' | json }}{% else %}null{% endif %}
        }
        {%- unless forloop.last %},{% endunless -%}
      {%- endfor -%}
    },
    "product_id": {{ product_obj.id | json }},
    "product_base_price": {{ product_obj.price | json }},
    "product_currency_code": {{ cart.currency.iso_code | json }},
    "routes": {
      "cart_add_url": {{ routes.cart_add_url | json }}
    },
    "settings": {
      "default_bags": {{ block.settings.default_selected_bags }},
      "enable_debug": {{ block.settings.enable_js_debug | json }},
      "bag_label_singular": {{ bag_label_singular | json }},
      "bag_label_plural": {{ bag_label_plural | json }},
      "placeholder_image_url": "{{ 'product-1' | placeholder_svg_tag | replace: '"', "'" | replace: '<', '%3C' | replace: '>', '%3E' | replace: '#', '%23' | prepend: 'data:image/svg+xml,' }}"
    },
    "translations": {
      "add_to_cart": {{ 'products.product.add_to_cart' | t | json }},
      "adding_to_cart": {{ 'products.product.adding_to_cart' | t | json }},
      "select_more_bags_cta": {{ block.settings.cta_select_more_text | json }},
      "add_to_cart_cta": {{ block.settings.cta_add_to_cart_text | json }},
      "status_needed_text": {{ block.settings.flavor_status_needed_text | json }},
      "status_all_set_text": {{ block.settings.flavor_status_all_set_text | json }},
      "loading_text": {{ 'general.loading' | t | json }}
    }
  }
</script>

{%- capture rob_custom_css -%}
  :host {
    display: block;
  }
  .product-form-replacement-{{ rob_custom }} {
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    padding: {{ block.settings.padding_block }}px {{ block.settings.padding_inline }}px;
    font-family: var(--font-body-family); /* Example: use theme's font */
  }

  /* Product Header (Optional) */
  .product-header-{{ rob_custom }} {
    margin-bottom: 20px;
    border-bottom: 1px solid {{ block.settings.divider_color }};
    padding-bottom: 20px;
  }
  .breadcrumb-{{ rob_custom }} {
    font-size: {{ block.settings.breadcrumb_font_size }}px;
    color: {{ block.settings.breadcrumb_text_color }};
    margin-bottom: 10px;
  }
  .breadcrumb-{{ rob_custom }} a {
    color: {{ block.settings.breadcrumb_link_color }};
    text-decoration: none;
  }
  .breadcrumb-{{ rob_custom }} a:hover {
    text-decoration: underline;
  }
  .product-title-{{ rob_custom }} {
    font-size: {{ block.settings.product_title_font_size }}px;
    font-weight: bold;
    color: {{ block.settings.product_title_color }};
    margin: 0 0 10px;
    text-transform: {{ block.settings.product_title_transform }};
  }
  .product-rating-{{ rob_custom }} {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
    font-size: {{ block.settings.rating_reviews_font_size }}px;
  }
  .rating-left-{{ rob_custom }} { display: flex; align-items: center; gap: 10px; }
  .stars-{{ rob_custom }} { color: {{ block.settings.stars_color }}; letter-spacing: 2px; }
  .reviews-{{ rob_custom }} { color: {{ block.settings.reviews_text_color }}; }
  .product-tags-{{ rob_custom }} { color: {{ block.settings.tags_text_color }}; }
  .product-description-{{ rob_custom }} {
    font-size: {{ block.settings.description_font_size }}px;
    line-height: 1.6;
    color: {{ block.settings.description_text_color }};
  }
  .product-description-{{ rob_custom }} p { margin: 0 0 1em 0; }

  /* Save Banner */
  .save-banner-{{ rob_custom }} {
    background-color: {{ block.settings.banner_bg_color }};
    color: {{ block.settings.banner_text_color }};
    padding: 8px 15px;
    text-align: center;
    font-weight: bold;
    font-size: {{ block.settings.banner_font_size }}px;
    border-radius: {{ block.settings.banner_border_radius }}px;
    margin-bottom: 20px;
  }

  /* Bag Selection */
  .bag-selection-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.bags_per_row }}, 1fr);
    gap: {{ block.settings.bag_option_gap }}px;
    margin-bottom: 20px;
  }
  .bag-option-{{ rob_custom }} {
    position: relative;
    border: 1px solid {{ block.settings.bag_option_border_color }};
    border-radius: {{ block.settings.bag_option_border_radius }}px;
    padding: 12px 6px;
    text-align: center;
    cursor: pointer;
    background-color: {{ block.settings.bag_option_bg_color }};
    transition: border 0.3s ease, background-color 0.3s ease;
    min-height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .bag-option-{{ rob_custom }}.selected-{{ rob_custom }} {
    border: 2px solid {{ block.settings.bag_option_selected_border_color }};
    background-color: {{ block.settings.bag_option_selected_bg_color }};
  }
  .bag-option-{{ rob_custom }}:hover {
    border-color: {{ block.settings.bag_option_hover_border_color }};
  }
  .deal-badge-{{ rob_custom }} {
    position: absolute;
    top: -10px;
    left: 50%;
    transform: translateX(-50%);
    background-color: {{ block.settings.deal_badge_bg_color }};
    color: {{ block.settings.deal_badge_text_color }};
    padding: 2px 6px;
    border-radius: 4px;
    font-size: {{ block.settings.deal_badge_font_size }}px;
    font-weight: 600;
    white-space: nowrap;
  }
  .bag-count-{{ rob_custom }} {
    font-size: {{ block.settings.bag_count_font_size }}px;
    font-weight: 600;
    color: {{ block.settings.bag_count_text_color }};
  }
  .bag-option-{{ rob_custom }}.selected-{{ rob_custom }} .bag-count-{{ rob_custom }} {
    color: {{ block.settings.bag_count_selected_text_color }};
  }

  /* Purchase Options */
  .purchase-options-{{ rob_custom }} {
    display: flex;
    flex-direction: column;
    gap: {{ block.settings.purchase_option_gap }}px;
    margin-bottom: 20px;
  }
  .purchase-type-button-{{ rob_custom }} {
    background-color: {{ block.settings.purchase_option_bg_color }};
    border: 1px solid {{ block.settings.purchase_option_border_color }};
    border-radius: {{ block.settings.purchase_option_border_radius }}px;
    padding: 15px;
    cursor: pointer;
    transition: border-color 0.3s ease, background-color 0.3s ease;
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} {
    border-color: {{ block.settings.purchase_option_selected_border_color }};
    background-color: {{ block.settings.purchase_option_selected_bg_color }};
  }
  .purchase-type-button-{{ rob_custom }}:hover {
    border-color: {{ block.settings.purchase_option_hover_border_color }};
  }
  .purchase-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-bottom: 10px;
  }
  .purchase-type-label-{{ rob_custom }} {
    font-weight: bold;
    font-size: {{ block.settings.purchase_label_font_size }}px;
    color: {{ block.settings.purchase_label_text_color }};
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} .purchase-type-label-{{ rob_custom }} {
    color: {{ block.settings.purchase_label_selected_text_color }};
  }
  .price-container-{{ rob_custom }} { display: flex; align-items: baseline; gap: 8px; }
  .original-price-{{ rob_custom }} {
    color: {{ block.settings.original_price_color }};
    font-size: {{ block.settings.price_font_size | minus: 2 }}px;
    text-decoration: line-through;
  }
  .purchase-type-price-{{ rob_custom }} {
    font-size: {{ block.settings.price_font_size }}px;
    color: {{ block.settings.discounted_price_color }};
    font-weight: bold;
  }
  .purchase-type-button-{{ rob_custom }}.selected-{{ rob_custom }} .purchase-type-price-{{ rob_custom }} {
     color: {{ block.settings.discounted_price_selected_color }};
  }
  .subscribe-benefits-grid-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
    font-size: {{ block.settings.benefit_font_size }}px;
    color: {{ block.settings.benefit_text_color }};
  }
  .subscribe-benefits-grid-{{ rob_custom }} .benefit-item-{{ rob_custom }} { display: flex; align-items: flex-start; gap: 5px; }
  .subscribe-benefits-grid-{{ rob_custom }} .checkmark-{{ rob_custom }} { color: {{ block.settings.benefit_checkmark_color }}; font-weight: bold; }

  /* Flavor Section */
  .flavor-section-{{ rob_custom }} { margin-bottom: 20px; }
  .flavor-section-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }
  .flavors-title-{{ rob_custom }} {
    font-size: {{ block.settings.flavors_title_font_size }}px;
    font-weight: bold;
    color: {{ block.settings.flavors_title_color }};
    margin: 0;
  }
  .flavor-status-message-{{ rob_custom }} {
    font-size: {{ block.settings.flavor_status_font_size }}px;
    padding: 5px 10px;
    border-radius: {{ block.settings.flavor_status_border_radius }}px;
  }
  .flavor-status-message-{{ rob_custom }}.info-{{ rob_custom }} {
    background-color: {{ block.settings.flavor_status_info_bg_color }};
    color: {{ block.settings.flavor_status_info_text_color }};
  }
  .flavor-status-message-{{ rob_custom }}.error-{{ rob_custom }} {
    background-color: {{ block.settings.flavor_status_error_bg_color }};
    color: {{ block.settings.flavor_status_error_text_color }};
  }

  .variants-grid-{{ rob_custom }} { display: flex; flex-direction: column; gap: 10px; }
  .variant-card-{{ rob_custom }} {
    display: grid;
    grid-template-columns: {{ block.settings.flavor_image_size }}px 1fr auto;
    align-items: center;
    gap: 12px;
    border: 1px solid {{ block.settings.flavor_card_border_color }};
    border-radius: {{ block.settings.flavor_card_border_radius }}px;
    padding: 12px;
    background-color: {{ block.settings.flavor_card_bg_color }};
  }
  .variant-image-{{ rob_custom }} {
    width: {{ block.settings.flavor_image_size }}px;
    height: {{ block.settings.flavor_image_size }}px;
  }
  .variant-image-{{ rob_custom }} img { width: 100%; height: 100%; object-fit: cover; border-radius: 4px; }
  .variant-info-{{ rob_custom }} { display: flex; flex-direction: column; gap: 4px; overflow: hidden; }
  .variant-title-{{ rob_custom }} h4 {
    margin: 0;
    font-size: {{ block.settings.flavor_name_font_size }}px;
    font-weight: bold;
    color: {{ block.settings.flavor_name_color }};
  }
  .variant-description-{{ rob_custom }} span {
    font-size: {{ block.settings.flavor_desc_font_size }}px;
    color: {{ block.settings.flavor_desc_color }};
    line-height: 1.3;
  }
  .quantity-controls-{{ rob_custom }} { display: flex; align-items: center; gap: 6px; width: auto; } /* Adjusted width */
  .add-btn-{{ rob_custom }} {
    background-color: {{ block.settings.flavor_add_btn_bg_color }};
    color: {{ block.settings.flavor_add_btn_text_color }};
    border: none;
    border-radius: {{ block.settings.flavor_button_border_radius }}px;
    padding: 8px 16px; /* Consistent padding */
    font-size: {{ block.settings.flavor_button_font_size }}px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 75px; /* Ensure minimum width */
    text-align: center;
  }
  .add-btn-{{ rob_custom }}:hover { background-color: {{ block.settings.flavor_add_btn_hover_bg_color }}; }
  .quantity-input-group-{{ rob_custom }} {
    display: flex;
    align-items: center;
    border: 1px solid {{ block.settings.flavor_qty_border_color }};
    border-radius: {{ block.settings.flavor_button_border_radius }}px;
    overflow: hidden; /* To make child radius work */
  }
  .quantity-btn-{{ rob_custom }} {
    background-color: {{ block.settings.flavor_qty_btn_bg_color }};
    color: {{ block.settings.flavor_qty_btn_text_color }};
    border: none;
    width: 30px; /* Consistent width */
    height: 30px; /* Consistent height */
    font-size: 1.2em;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  .quantity-btn-{{ rob_custom }}:hover { background-color: {{ block.settings.flavor_qty_btn_hover_bg_color }}; }
  .variant-quantity-{{ rob_custom }} {
    width: 35px; /* Consistent width */
    height: 30px; /* Match button height */
    text-align: center;
    border: none;
    font-size: {{ block.settings.flavor_button_font_size }}px;
    font-weight: 600;
    color: {{ block.settings.flavor_qty_input_text_color }};
    background-color: {{ block.settings.flavor_qty_input_bg_color }};
    -moz-appearance: textfield;
    outline: none;
    padding: 0;
  }
  .variant-quantity-{{ rob_custom }}::-webkit-outer-spin-button,
  .variant-quantity-{{ rob_custom }}::-webkit-inner-spin-button {
    -webkit-appearance: none; margin: 0;
  }

  /* Price Summary */
  .price-summary-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-top: 10px;
    border-top: 1px solid {{ block.settings.divider_color }};
  }
  .subtotal-{{ rob_custom }} {
    font-size: {{ block.settings.subtotal_font_size }}px;
    font-weight: bold;
    color: {{ block.settings.subtotal_text_color }};
  }
  .savings-badge-{{ rob_custom }} {
    background-color: {{ block.settings.savings_badge_bg_color }};
    color: {{ block.settings.savings_badge_text_color }};
    padding: 6px 12px;
    border-radius: {{ block.settings.savings_badge_border_radius }}px;
    font-size: {{ block.settings.savings_badge_font_size }}px;
    font-weight: 600;
  }

  /* Main CTA Button */
  .main-cta-button-{{ rob_custom }} {
    background-color: {{ block.settings.cta_bg_color }};
    color: {{ block.settings.cta_text_color }};
    border: none;
    border-radius: {{ block.settings.cta_border_radius }}px;
    padding: 15px 20px;
    font-size: {{ block.settings.cta_font_size }}px;
    font-weight: bold;
    cursor: pointer;
    width: 100%;
    transition: background-color 0.3s ease, opacity 0.3s ease;
    text-align: center;
  }
  .main-cta-button-{{ rob_custom }}:hover { background-color: {{ block.settings.cta_hover_bg_color }}; }
  .main-cta-button-{{ rob_custom }}:disabled {
    background-color: {{ block.settings.cta_disabled_bg_color }};
    color: {{ block.settings.cta_disabled_text_color }};
    cursor: not-allowed;
    opacity: 0.7;
  }

  /* Risk-Free Trial */
  .risk-free-trial-{{ rob_custom }} {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 20px 0;
    margin-top: 20px;
    border-top: 1px solid {{ block.settings.divider_color }};
  }
  .risk-free-icon-{{ rob_custom }} img, .risk-free-icon-{{ rob_custom }} svg {
    width: {{ block.settings.guarantee_icon_size }}px;
    height: {{ block.settings.guarantee_icon_size }}px;
    color: {{ block.settings.guarantee_icon_color }}; /* For SVG stroke/fill if not inlined */
  }
  .risk-free-text-{{ rob_custom }} {
    font-size: {{ block.settings.guarantee_text_font_size }}px;
    line-height: 1.5;
    color: {{ block.settings.guarantee_text_color }};
  }
  .risk-free-text-{{ rob_custom }} strong { font-weight: bold; }


  /* Nutritional Info Dropdown */
  .nutritional-info-section-{{ rob_custom }} {
    margin-top: 20px;
    border-top: 1px solid {{ block.settings.divider_color }};
    padding-top: 20px;
  }
  .nutritional-info-toggle-{{ rob_custom }} {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0; /* Remove horizontal padding to align with other content */
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: {{ block.settings.nutritional_toggle_font_size }}px;
    font-weight: bold;
    color: {{ block.settings.nutritional_toggle_text_color }};
    text-align: left;
  }
  .nutritional-info-toggle-{{ rob_custom }} svg {
    transition: transform 0.3s ease;
    width: 20px; height: 20px;
    stroke: {{ block.settings.nutritional_toggle_icon_color }};
  }
  .nutritional-info-toggle-{{ rob_custom }}[aria-expanded="true"] svg { transform: rotate(180deg); }
  .nutritional-info-content-{{ rob_custom }} {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out, padding 0.3s ease-out;
    padding: 0; /* No padding when collapsed */
  }
  .nutritional-info-content-{{ rob_custom }}.expanded-{{ rob_custom }} {
    max-height: 1000px; /* Adjust as needed */
    padding: 15px 0; /* Vertical padding only */
  }
  .nutritional-flavor-dropdown-{{ rob_custom }} {
    width: 100%;
    padding: 10px;
    border: 1px solid {{ block.settings.dropdown_border_color }};
    border-radius: {{ block.settings.dropdown_border_radius }}px;
    font-size: {{ block.settings.dropdown_font_size }}px;
    margin-bottom: 15px;
  }
  .nutritional-image-container-{{ rob_custom }} img {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    display: block;
    margin: 0 auto;
  }

  /* Helper class */
  .hidden-{{ rob_custom }} {
    display: none !important;
  }

  @media (max-width: 768px) {
    .product-form-replacement-{{ rob_custom }} {
      padding: {{ block.settings.padding_block_mobile }}px {{ block.settings.padding_inline_mobile }}px;
    }
    .bag-selection-{{ rob_custom }} {
      grid-template-columns: repeat({{ block.settings.bags_per_row_mobile }}, 1fr);
    }
    .subscribe-benefits-grid-{{ rob_custom }} {
      grid-template-columns: 1fr; /* Stack benefits on mobile */
    }
    .variant-card-{{ rob_custom }} {
      grid-template-columns: {{ block.settings.flavor_image_size_mobile }}px 1fr auto;
      gap: 8px;
    }
    .variant-image-{{ rob_custom }} {
      width: {{ block.settings.flavor_image_size_mobile }}px;
      height: {{ block.settings.flavor_image_size_mobile }}px;
    }
  }

{%- endcapture -%}
{% style %}
  {{ rob_custom_css | replace: ' robbingcustom', '-' | replace: 'rob_custom', rob_custom }}
{% endstyle %}

<product-form-replacement-{{ rob_custom }} {{ block.shopify_attributes }}>
  <div class="product-form-replacement-inner-{{ rob_custom }}">

    {% if show_product_header %}
      <div class="product-header-{{ rob_custom }}">
        <div class="breadcrumb-{{ rob_custom }}">
          <a href="{{ routes.root_url }}">{{ 'general.breadcrumbs.home' | t }}</a> >
          {% if product_obj.collections.first %}
            <a href="{{ product_obj.collections.first.url }}">{{ product_obj.collections.first.title }}</a> >
          {% else %}
            <a href="{{ routes.all_products_collection_url }}">{{ 'collections.general.all_products' | t }}</a> >
          {% endif %}
          <span>{{ product_obj.title }}</span>
        </div>
        <h1 class="product-title-{{ rob_custom }}">{{ product_obj.title }}</h1>
        {% if block.settings.show_rating_reviews %}
          <div class="product-rating-{{ rob_custom }}">
            <div class="rating-left-{{ rob_custom }}">
              <div class="stars-{{ rob_custom }}">★★★★★</div> {# Placeholder - integrate with reviews app if needed #}
              <span class="reviews-{{ rob_custom }}">({{ product_obj.metafields.reviews.rating_count | default: '0' }} {{ 'products.product.reviews' | t }})</span>
            </div>
            {% if product_tags_display != blank and block.settings.show_tags %}
              <div class="product-tags-{{ rob_custom }}">{{ product_tags_display }}</div>
            {% endif %}
          </div>
        {% endif %}
        {% if custom_product_description != blank %}
          <div class="product-description-{{ rob_custom }}">{{ custom_product_description }}</div>
        {% endif %}
      </div>
    {% endif %}

    {% if block.settings.banner_text != blank %}
      <div class="save-banner-{{ rob_custom }}">{{ block.settings.banner_text }}</div>
    {% endif %}

    <div class="bag-selection-{{ rob_custom }}">
      {% for i in (1..block.settings.max_bags) reversed %}
        <div class="bag-option-{{ rob_custom }}{% if i == block.settings.best_deal_bag_count %} best-deal-{{ rob_custom }}{% endif %}" data-bags="{{ i }}">
          {% if i == block.settings.best_deal_bag_count and block.settings.best_deal_badge_text != blank %}
            <span class="deal-badge-{{ rob_custom }}">{{ block.settings.best_deal_badge_text }}</span>
          {% endif %}
          <span class="bag-count-{{ rob_custom }}">{{ i }} {% if i == 1 %}{{ bag_label_singular }}{% else %}{{ bag_label_plural }}{% endif %}</span>
        </div>
      {% endfor %}
    </div>

    <div class="purchase-options-{{ rob_custom }}">
      <div class="purchase-type-button-{{ rob_custom }}" data-purchase-type="subscribe">
        <div class="purchase-header-{{ rob_custom }}">
          <div class="purchase-type-label-{{ rob_custom }}">{{ block.settings.subscribe_title }}</div>
          <div class="price-container-{{ rob_custom }}">
            <span class="original-price-{{ rob_custom }}" data-price-type="subscribe-original">$0.00</span>
            <span class="purchase-type-price-{{ rob_custom }}" data-price-type="subscribe-total">$0.00</span>
          </div>
        </div>
        {% if block.settings.benefit_1 != blank or block.settings.benefit_2 != blank or block.settings.benefit_3 != blank or block.settings.benefit_4 != blank %}
        <div class="subscribe-benefits-grid-{{ rob_custom }}">
          {% if block.settings.benefit_1 != blank %}<div class="benefit-item-{{ rob_custom }}"><span class="checkmark-{{ rob_custom }}">✓</span><span>{{ block.settings.benefit_1 }}</span></div>{% endif %}
          {% if block.settings.benefit_2 != blank %}<div class="benefit-item-{{ rob_custom }}"><span class="checkmark-{{ rob_custom }}">✓</span><span>{{ block.settings.benefit_2 }}</span></div>{% endif %}
          {% if block.settings.benefit_3 != blank %}<div class="benefit-item-{{ rob_custom }}"><span class="checkmark-{{ rob_custom }}">✓</span><span>{{ block.settings.benefit_3 }}</span></div>{% endif %}
          {% if block.settings.benefit_4 != blank %}<div class="benefit-item-{{ rob_custom }}"><span class="checkmark-{{ rob_custom }}">✓</span><span>{{ block.settings.benefit_4 }}</span></div>{% endif %}
        </div>
        {% endif %}
      </div>
      <div class="purchase-type-button-{{ rob_custom }}" data-purchase-type="onetime">
        <div class="purchase-header-{{ rob_custom }}">
          <div class="purchase-type-label-{{ rob_custom }}">{{ block.settings.onetime_title }}</div>
          <div class="price-container-{{ rob_custom }}">
            <span class="original-price-{{ rob_custom }}" data-price-type="onetime-original">$0.00</span>
            <span class="purchase-type-price-{{ rob_custom }}" data-price-type="onetime-total">$0.00</span>
          </div>
        </div>
      </div>
    </div>

    <div class="flavor-section-{{ rob_custom }}">
      <div class="flavor-section-header-{{ rob_custom }}">
        <h3 class="flavors-title-{{ rob_custom }}">{{ block.settings.flavors_title }}</h3>
        <div class="flavor-status-message-{{ rob_custom }} hidden-{{ rob_custom }}"></div>
      </div>
      <div class="variants-grid-{{ rob_custom }}">
        <p class="loading-flavors-{{ rob_custom }}">{{ 'general.loading' | t }}</p>
      </div>
    </div>

    <div class="price-summary-{{ rob_custom }} hidden-{{ rob_custom }}">
      <div class="subtotal-{{ rob_custom }}">
        {{ 'cart.general.subtotal' | t }}: <span class="subtotal-price-{{ rob_custom }}">$0.00</span>
      </div>
      <div class="savings-badge-{{ rob_custom }} hidden-{{ rob_custom }}">
        {{ block.settings.savings_badge_text_prefix }} <span class="savings-amount-{{ rob_custom }}">$0.00</span>
      </div>
    </div>

    <button class="main-cta-button-{{ rob_custom }}" type="button" disabled>
      {{ block.settings.cta_default_text }}
    </button>

    {% if show_risk_free_trial %}
      <div class="risk-free-trial-{{ rob_custom }}">
        <div class="risk-free-icon-{{ rob_custom }}">
          {% if guarantee_icon != blank %}
            {{ guarantee_icon | image_url: width: block.settings.guarantee_icon_size, height: block.settings.guarantee_icon_size | image_tag: alt: 'Guarantee icon', loading: 'lazy', widths: block.settings.guarantee_icon_size }}
          {% else %}
            <svg viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
              <circle cx="20" cy="20" r="19" stroke="currentColor" stroke-width="2" stroke-dasharray="4 4"/>
              <path d="M12 20L17 25L28 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          {% endif %}
        </div>
        <div class="risk-free-text-{{ rob_custom }}">{{ guarantee_text }}</div>
      </div>
    {% endif %}

    {% if show_nutritional_info %}
      <div class="nutritional-info-section-{{ rob_custom }}">
        <button class="nutritional-info-toggle-{{ rob_custom }}" aria-expanded="false" aria-controls="nutritional-content-{{ rob_custom }}">
          <span>{{ nutritional_info_title }}</span>
          <svg class="toggle-icon-{{ rob_custom }}" viewBox="0 0 24 24" width="24" height="24" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>
        </button>
        <div class="nutritional-info-content-{{ rob_custom }}" id="nutritional-content-{{ rob_custom }}">
          <select class="nutritional-flavor-dropdown-{{ rob_custom }}" aria-label="{{ block.settings.nutritional_dropdown_placeholder }}">
            <option value="">{{ block.settings.nutritional_dropdown_placeholder }}</option>
            {% comment %} Options will be populated by JavaScript {% endcomment %}
          </select>
          <div class="nutritional-image-container-{{ rob_custom }}">
            <img class="nutritional-image-{{ rob_custom }} hidden-{{ rob_custom }}" src="" alt="{{ 'products.product.nutritional_information_alt' | t }}" loading="lazy">
          </div>
        </div>
      </div>
    {% endif %}

  </div>
</product-form-replacement-{{ rob_custom }}>

<script>
class ProductFormReplacement_{{ rob_custom }} extends HTMLElement {
  constructor() {
    super();
    this.rob_custom = '{{ rob_custom }}';
    this.flavorDataEl = document.getElementById(`flavorData-${this.rob_custom}`);
    if (!this.flavorDataEl) {
      console.error(`[PFR-${this.rob_custom}] Flavor data script tag not found!`);
      return;
    }
    try {
      this.jsonData = JSON.parse(this.flavorDataEl.textContent);
    } catch (e) {
      console.error(`[PFR-${this.rob_custom}] Error parsing JSON data:`, e);
      return;
    }

    this.config = this.jsonData.settings;
    this.translations = this.jsonData.translations;
    this.productShopifyId = this.jsonData.product_id;
    this.productBasePrice = this.jsonData.product_base_price; // Price in cents
    this.currencyCode = this.jsonData.product_currency_code;
    this.variantMetafields = this.jsonData.variants;
    this.routes = this.jsonData.routes;

    this.DEBUG = this.config.enable_debug || false;
    this.logDebug('Component instantiated', this.jsonData);

    this.skioData = null;
    this.selectableVariants = [];
    this.selectedBagCount = parseInt(this.config.default_bags, 10) || 4;
    this.isSubscription = true; // Default to subscription
    this.selectedFlavors = {}; // variantPlatformId: quantity

    this.selectors = {
      bagOptions: `.bag-option-${this.rob_custom}`,
      purchaseTypeButtons: `.purchase-type-button-${this.rob_custom}`,
      variantsGrid: `.variants-grid-${this.rob_custom}`,
      loadingFlavors: `.loading-flavors-${this.rob_custom}`,
      flavorStatusMessage: `.flavor-status-message-${this.rob_custom}`,
      priceOriginal: (type) => `.original-price-${this.rob_custom}[data-price-type="${type}-original"]`,
      priceTotal: (type) => `.purchase-type-price-${this.rob_custom}[data-price-type="${type}-total"]`,
      priceSummary: `.price-summary-${this.rob_custom}`,
      subtotalPrice: `.subtotal-price-${this.rob_custom}`,
      savingsBadge: `.savings-badge-${this.rob_custom}`,
      savingsAmount: `.savings-amount-${this.rob_custom}`,
      mainCtaButton: `.main-cta-button-${this.rob_custom}`,
      nutritionalInfoToggle: `.nutritional-info-toggle-${this.rob_custom}`,
      nutritionalInfoContent: `.nutritional-info-content-${this.rob_custom}`,
      nutritionalFlavorDropdown: `.nutritional-flavor-dropdown-${this.rob_custom}`,
      nutritionalImage: `.nutritional-image-${this.rob_custom}`,
    };

    this.dom = {};
    Object.keys(this.selectors).forEach(key => {
      if (typeof this.selectors[key] !== 'function') {
        const elements = this.querySelectorAll(this.selectors[key]);
        if (elements.length === 1 && !key.endsWith('Options') && !key.endsWith('Buttons') && !key.endsWith('Grid')) {
            this.dom[key] = elements[0];
        } else {
            this.dom[key] = elements; // Keep as NodeList for multiple elements
        }
      }
    });
    this.logDebug('DOM elements cached:', this.dom);
  }

  logDebug(...args) {
    if (this.DEBUG) {
      console.log(`[PFR-${this.rob_custom}]`, ...args);
    }
  }

  connectedCallback() {
    this.logDebug('Component connected to DOM');
    if (!this.jsonData) return;

    this.fetchSkioData().then(() => {
      this.initializeBagSelection();
      this.initializePurchaseTypeSelection();
      this.populateVariantSelector();
      this.initializeNutritionalInfo();
      this.updateUI();
    }).catch(error => {
      console.error(`[PFR-${this.rob_custom}] Critical error during Skio data fetch or initial setup:`, error);
      if (this.dom.variantsGrid && this.dom.variantsGrid.length > 0) {
          this.dom.variantsGrid[0].innerHTML = `<p style="color:red;">Error loading product options. Please try again later.</p>`;
      }
      if (this.dom.loadingFlavors) this.dom.loadingFlavors.classList.add(`hidden-${this.rob_custom}`);
    });

    if(this.dom.mainCtaButton) {
      this.dom.mainCtaButton.addEventListener('click', this.handleAddToCart.bind(this));
    }
  }

  async fetchSkioData() {
    this.logDebug('Fetching Skio data for product ID:', this.productShopifyId);
    try {
      // Note: Skio API endpoint and payload structure might vary. This is based on common patterns.
      const response = await fetch('https://api.skio.com/storefront-http/get-dynamic-box', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        // Ensure productPlatformId is in the correct GID format
        body: JSON.stringify({ productPlatformId: `gid://shopify/Product/${this.productShopifyId}` })
      });
      if (!response.ok) {
        const errorBody = await response.text();
        throw new Error(`Skio API request failed: ${response.status} ${response.statusText}. Body: ${errorBody}`);
      }
      const data = await response.json();
      this.logDebug('Raw Skio response:', data);
      if (!data.DynamicBox) {
        throw new Error('Skio response does not contain DynamicBox data.');
      }
      this.skioData = data.DynamicBox; // Store the whole DynamicBox object
      this.logDebug('Parsed Skio data:', this.skioData);
      this.parseSelectableVariants();
    } catch (error) {
      console.error(`[PFR-${this.rob_custom}] Error fetching or parsing SkioBox data:`, error);
      throw error;
    }
  }

  parseSelectableVariants() {
    if (!this.skioData || !this.skioData.selectableProductVariants) {
      this.selectableVariants = [];
      return;
    }
    this.selectableVariants = this.skioData.selectableProductVariants.flatMap(product =>
      product.productVariants.map(variant => ({
        platformId: variant.platformId,
        shopifyVariantId: variant.platformId.split('/').pop(),
        title: variant.productVariantTitle,
        imageSrc: variant.imageSrc || this.config.placeholder_image_url,
        price: parseFloat(variant.price), // One-time price in Skio's currency
        compareAtPrice: variant.compareAtPrice ? parseFloat(variant.compareAtPrice) : null,
        // inventory: variant.inventory, // Skio might provide inventory details
      }))
    );
    this.logDebug('Parsed selectable variants:', this.selectableVariants);
  }

  initializeBagSelection() {
    if (!this.dom.bagOptions || this.dom.bagOptions.length === 0) return;
    this.dom.bagOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        this.selectedBagCount = parseInt(e.currentTarget.dataset.bags);
        this.logDebug('Bag selection changed to:', this.selectedBagCount);
        this.clearFlavorSelections(); // Reset flavors when bag count changes for simplicity
        this.updateUI();
      });
    });
    const initialBagOption = this.querySelector(`.bag-option-${this.rob_custom}[data-bags="${this.selectedBagCount}"]`);
    if (initialBagOption) {
      initialBagOption.classList.add(`selected-${this.rob_custom}`);
    }
  }
  
  clearFlavorSelections() {
    this.selectedFlavors = {};
    // Reset visual state of flavor selectors
    if (this.dom.variantsGrid && this.dom.variantsGrid.length > 0) {
        this.dom.variantsGrid[0].querySelectorAll(`.quantity-input-group-${this.rob_custom}`).forEach(group => {
            group.classList.add(`hidden-${this.rob_custom}`);
            group.querySelector(`.variant-quantity-${this.rob_custom}`).value = 0;
        });
        this.dom.variantsGrid[0].querySelectorAll(`.add-btn-${this.rob_custom}`).forEach(btn => {
            btn.classList.remove(`hidden-${this.rob_custom}`);
        });
    }
  }

  initializePurchaseTypeSelection() {
    if (!this.dom.purchaseTypeButtons || this.dom.purchaseTypeButtons.length === 0) return;
    this.dom.purchaseTypeButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        this.isSubscription = e.currentTarget.dataset.purchaseType === 'subscribe';
        this.logDebug('Purchase type changed. Is subscription:', this.isSubscription);
        this.updateUI();
      });
    });
    const initialPurchaseType = this.isSubscription ? 'subscribe' : 'onetime';
    const initialButton = this.querySelector(`.purchase-type-button-${this.rob_custom}[data-purchase-type="${initialPurchaseType}"]`);
    if (initialButton) {
      initialButton.classList.add(`selected-${this.rob_custom}`);
    }
  }

  populateVariantSelector() {
    const variantsGridEl = this.dom.variantsGrid.length > 0 ? this.dom.variantsGrid[0] : null;
    if (!variantsGridEl || !this.selectableVariants.length) {
      if (variantsGridEl) variantsGridEl.innerHTML = `<p>No flavors available for this product.</p>`;
      if (this.dom.loadingFlavors) this.dom.loadingFlavors.classList.add(`hidden-${this.rob_custom}`);
      return;
    }

    variantsGridEl.innerHTML = '';
    this.selectableVariants.forEach(variant => {
      const variantShopifyId = variant.shopifyVariantId;
      const flavorDescription = this.variantMetafields[variantShopifyId]?.description || '';

      const card = document.createElement('div');
      card.className = `variant-card-${this.rob_custom}`;
      card.innerHTML = `
        <div class="variant-image-${this.rob_custom}">
          <img src="${variant.imageSrc}" alt="${variant.title}" loading="lazy">
        </div>
        <div class="variant-info-${this.rob_custom}">
          <div class="variant-title-${this.rob_custom}"><h4>${variant.title}</h4></div>
          <div class="variant-description-${this.rob_custom}"><span>${flavorDescription}</span></div>
        </div>
        <div class="quantity-controls-${this.rob_custom}">
          <button class="add-btn-${this.rob_custom}" data-variant-id="${variant.platformId}">${this.translations.add_to_cart}</button>
          <div class="quantity-input-group-${this.rob_custom} hidden-${this.rob_custom}">
            <button class="quantity-btn-${this.rob_custom}" data-action="decrease" data-variant-id="${variant.platformId}">-</button>
            <input type="number" class="variant-quantity-${this.rob_custom}" value="0" min="0" max="99" data-variant-id="${variant.platformId}" readonly>
            <button class="quantity-btn-${this.rob_custom}" data-action="increase" data-variant-id="${variant.platformId}">+</button>
          </div>
        </div>
      `;
      variantsGridEl.appendChild(card);
    });
    if (this.dom.loadingFlavors) this.dom.loadingFlavors.classList.add(`hidden-${this.rob_custom}`);
    this.initializeVariantQuantityControls();
    this.populateNutritionalDropdown();
  }

  initializeVariantQuantityControls() {
    const variantsGridEl = this.dom.variantsGrid.length > 0 ? this.dom.variantsGrid[0] : null;
    if (!variantsGridEl) return;

    variantsGridEl.querySelectorAll(`.add-btn-${this.rob_custom}`).forEach(btn => {
      btn.addEventListener('click', (e) => this.handleAddButtonClick(e.currentTarget));
    });
    variantsGridEl.querySelectorAll(`.quantity-btn-${this.rob_custom}`).forEach(btn => {
      btn.addEventListener('click', (e) => this.handleQuantityButtonClick(e.currentTarget));
    });
  }

  handleAddButtonClick(buttonEl) {
    const variantId = buttonEl.dataset.variantId;
    if (this.getCurrentTotalSelectedItems() >= this.selectedBagCount) {
        // Optionally alert user or provide feedback that box is full
        this.logDebug('Box is full. Cannot add new flavor.');
        return;
    }
    const quantityGroup = buttonEl.nextElementSibling;
    const input = quantityGroup.querySelector(`.variant-quantity-${this.rob_custom}`);

    buttonEl.classList.add(`hidden-${this.rob_custom}`);
    quantityGroup.classList.remove(`hidden-${this.rob_custom}`);
    input.value = 1;
    this.selectedFlavors[variantId] = 1;
    this.logDebug('Flavor added:', variantId, this.selectedFlavors);
    this.updateUI();
  }

  handleQuantityButtonClick(buttonEl) {
    const variantId = buttonEl.dataset.variantId;
    const action = buttonEl.dataset.action;
    const quantityGroup = buttonEl.parentElement;
    const input = quantityGroup.querySelector(`.variant-quantity-${this.rob_custom}`);
    const addBtn = quantityGroup.previousElementSibling;
    let currentValue = parseInt(input.value);
    const currentTotalItems = this.getCurrentTotalSelectedItems();
    const currentItemQtyInBox = this.selectedFlavors[variantId] || 0;

    if (action === 'increase') {
      if (currentTotalItems < this.selectedBagCount) {
        currentValue = Math.min(currentValue + 1, 99);
      } else {
        this.logDebug('Box is full. Cannot increase quantity.');
        return; // Box is full, do not increase
      }
    } else { // decrease
      currentValue = Math.max(currentValue - 1, 0);
    }

    input.value = currentValue;
    if (currentValue === 0) {
      delete this.selectedFlavors[variantId];
      addBtn.classList.remove(`hidden-${this.rob_custom}`);
      quantityGroup.classList.add(`hidden-${this.rob_custom}`);
    } else {
      this.selectedFlavors[variantId] = currentValue;
    }
    this.logDebug('Flavor quantity changed:', variantId, currentValue, this.selectedFlavors);
    this.updateUI();
  }

  getCurrentTotalSelectedItems() {
    return Object.values(this.selectedFlavors).reduce((sum, qty) => sum + qty, 0);
  }

  calculatePrices() {
    let onetimeOriginalTotal = 0;
    let subscribeOriginalTotal = 0;
    let onetimeSubtotalAgg = 0;
    let subscribeSubtotalAgg = 0;

    for (const variantPlatformId in this.selectedFlavors) {
        const quantity = this.selectedFlavors[variantPlatformId];
        const variantInfo = this.selectableVariants.find(v => v.platformId === variantPlatformId);
        if (!variantInfo) continue;

        const baseItemPrice = variantInfo.price; // Price from Skio, assume it's in major units
        const compareAtItemPrice = variantInfo.compareAtPrice || baseItemPrice;

        onetimeOriginalTotal += compareAtItemPrice * quantity;
        subscribeOriginalTotal += compareAtItemPrice * quantity;

        // One-time price calculations
        let itemOnetimePrice = baseItemPrice;
        if (this.skioData?.percentDiscountTier && this.skioData.percentDiscountTier[this.selectedBagCount.toString()]) {
            const discountPercent = parseFloat(this.skioData.percentDiscountTier[this.selectedBagCount.toString()]);
            itemOnetimePrice *= (1 - discountPercent / 100);
        }
        onetimeSubtotalAgg += itemOnetimePrice * quantity;

        // Subscription price calculations
        let itemSubscribePrice = baseItemPrice; // Start with base price
        const sellingPlanGroupId = this.skioData?.sellingPlanGroup ? Object.keys(this.skioData.sellingPlanGroup)[0] : null;
        if (sellingPlanGroupId) {
            const sellingPlanData = this.skioData.sellingPlanGroup[sellingPlanGroupId];
            const variantMapping = sellingPlanData.variantMapping && sellingPlanData.variantMapping[variantPlatformId];

            if (variantMapping && typeof variantMapping.adjustedPrice !== 'undefined') {
                itemSubscribePrice = parseFloat(variantMapping.adjustedPrice); // Skio's pre-calculated price
            } else if (sellingPlanData.priceAdjustmentAmount) {
                const adjAmount = parseFloat(sellingPlanData.priceAdjustmentAmount);
                 // Assuming priceAdjustmentType is PERCENTAGE for simplicity as it's most common
                itemSubscribePrice *= (1 - adjAmount / 100);
            }
            // Optional: If Skio tiers (percentDiscountTier) also apply on top of basic subscription discount
            // and are not included in adjustedPrice. This depends on Skio's setup.
            // if (this.skioData?.percentDiscountTier && this.skioData.percentDiscountTier[this.selectedBagCount.toString()] && !(variantMapping && typeof variantMapping.adjustedPrice !== 'undefined')) {
            //    const discountPercent = parseFloat(this.skioData.percentDiscountTier[this.selectedBagCount.toString()]);
            //    itemSubscribePrice *= (1 - discountPercent / 100);
            // }
        }
        subscribeSubtotalAgg += itemSubscribePrice * quantity;
    }

    let finalOnetimeTotal = onetimeSubtotalAgg;
    if (this.skioData?.fixedDiscountTier && this.skioData.fixedDiscountTier[this.selectedBagCount.toString()]) {
        const fixedDiscount = parseFloat(this.skioData.fixedDiscountTier[this.selectedBagCount.toString()]);
        // Assuming fixed discount is in major units as well, matching prices. If in cents, adjust.
        finalOnetimeTotal = Math.max(0, finalOnetimeTotal - fixedDiscount);
    }
    
    // Assuming fixed discounts might also apply to subscriptions if not covered by adjustedPrice
    let finalSubscribeTotal = subscribeSubtotalAgg;
    // if (this.skioData?.fixedDiscountTier && this.skioData.fixedDiscountTier[this.selectedBagCount.toString()]) {
    //    This part is highly dependent on Skio's specific setup logic for fixed discounts on subscriptions.
    //    Often, `adjustedPrice` would be final. If applying fixed discount here, ensure it's intended.
    // }

    return {
        onetimeOriginal: onetimeOriginalTotal,
        onetimeTotal: finalOnetimeTotal,
        subscribeOriginal: subscribeOriginalTotal,
        subscribeTotal: finalSubscribeTotal,
    };
  }

  updateUI() {
    this.logDebug('Updating UI. Selected bags:', this.selectedBagCount, 'Is Sub:', this.isSubscription, 'Flavors:', this.selectedFlavors);

    this.dom.bagOptions.forEach(opt => {
      opt.classList.toggle(`selected-${this.rob_custom}`, parseInt(opt.dataset.bags) === this.selectedBagCount);
    });

    this.dom.purchaseTypeButtons.forEach(btn => {
      btn.classList.toggle(`selected-${this.rob_custom}`, (btn.dataset.purchaseType === 'subscribe') === this.isSubscription);
    });

    const prices = this.calculatePrices();
    this.logDebug('Calculated prices:', prices);

    const onetimeOriginalEl = this.querySelector(this.selectors.priceOriginal('onetime'));
    const onetimeTotalEl = this.querySelector(this.selectors.priceTotal('onetime'));
    const subscribeOriginalEl = this.querySelector(this.selectors.priceOriginal('subscribe'));
    const subscribeTotalEl = this.querySelector(this.selectors.priceTotal('subscribe'));

    if (onetimeOriginalEl) onetimeOriginalEl.textContent = this.formatCurrency(prices.onetimeOriginal);
    if (onetimeTotalEl) onetimeTotalEl.textContent = this.formatCurrency(prices.onetimeTotal);
    if (subscribeOriginalEl) subscribeOriginalEl.textContent = this.formatCurrency(prices.subscribeOriginal);
    if (subscribeTotalEl) subscribeTotalEl.textContent = this.formatCurrency(prices.subscribeTotal);

    const currentTotalItems = this.getCurrentTotalSelectedItems();
    const itemsNeeded = this.selectedBagCount - currentTotalItems;

    if (itemsNeeded > 0) {
      this.dom.flavorStatusMessage.textContent = this.translations.status_needed_text.replace('%s', itemsNeeded);
      this.dom.flavorStatusMessage.className = `flavor-status-message-${this.rob_custom} error-${this.rob_custom}`;
      this.dom.mainCtaButton.textContent = this.translations.select_more_bags_cta.replace('%s', itemsNeeded);
      this.dom.mainCtaButton.disabled = true;
      this.dom.priceSummary.classList.add(`hidden-${this.rob_custom}`);
    } else { // itemsNeeded <= 0 (box is full or overfilled - latter prevented by qty controls)
      this.dom.flavorStatusMessage.textContent = this.translations.status_all_set_text;
      this.dom.flavorStatusMessage.className = `flavor-status-message-${this.rob_custom} info-${this.rob_custom}`;
      
      const currentPrice = this.isSubscription ? prices.subscribeTotal : prices.onetimeTotal;
      const ctaText = this.translations.add_to_cart_cta.replace('{{price}}', this.formatCurrency(currentPrice));
      this.dom.mainCtaButton.textContent = ctaText;
      this.dom.mainCtaButton.disabled = false;

      this.dom.subtotalPrice.textContent = this.formatCurrency(currentPrice);
      const originalPriceForSavings = this.isSubscription ? prices.subscribeOriginal : prices.onetimeOriginal;
      const savings = originalPriceForSavings - currentPrice;
      if (savings > 0.005) { // Check for meaningful savings
        this.dom.savingsAmount.textContent = this.formatCurrency(savings);
        this.dom.savingsBadge.classList.remove(`hidden-${this.rob_custom}`);
      } else {
        this.dom.savingsBadge.classList.add(`hidden-${this.rob_custom}`);
      }
      this.dom.priceSummary.classList.remove(`hidden-${this.rob_custom}`);
    }
    this.dom.flavorStatusMessage.classList.remove(`hidden-${this.rob_custom}`);
  }

  formatCurrency(amount) {
    return new Intl.NumberFormat(document.documentElement.lang || 'en-US', {
      style: 'currency',
      currency: this.skioData?.currencyCode || this.currencyCode || 'USD'
    }).format(amount);
  }

  async handleAddToCart() {
    this.logDebug('Add to cart initiated.');
    this.dom.mainCtaButton.disabled = true;
    this.dom.mainCtaButton.textContent = this.translations.adding_to_cart;

    if (!this.skioData || !this.skioData.boxId) {
      console.error(`[PFR-${this.rob_custom}] Skio boxId is missing. Cannot add to cart.`);
      this.dom.mainCtaButton.textContent = 'Error: Config Missing'; // TODO: translation
      return;
    }

    const items = [];
    for (const variantPlatformId in this.selectedFlavors) {
      const quantity = this.selectedFlavors[variantPlatformId];
      const shopifyVariantId = variantPlatformId.split('/').pop();

      const item = {
        id: shopifyVariantId,
        quantity: quantity,
        properties: {
          _dynamicBoxId: this.skioData.boxId,
          _dynamicBoxIndex: "0" // Assuming single box instance on page
        }
      };

      if (this.isSubscription) {
        if (!this.skioData.sellingPlanGroup || Object.keys(this.skioData.sellingPlanGroup).length === 0) {
          console.error(`[PFR-${this.rob_custom}] Skio sellingPlanGroup data is missing for subscription.`);
          this.dom.mainCtaButton.textContent = 'Error: Sub Plan Missing'; // TODO: translation
          return;
        }
        const mainSellingPlanGroupId = Object.keys(this.skioData.sellingPlanGroup)[0];
        const mainSellingPlanData = this.skioData.sellingPlanGroup[mainSellingPlanGroupId];
        
        let sellingPlanId = null;
        const variantMapping = mainSellingPlanData.variantMapping && mainSellingPlanData.variantMapping[variantPlatformId];
        if (variantMapping && variantMapping.planId) {
            sellingPlanId = variantMapping.planId;
        } else if (mainSellingPlanData.planId) { // Group-level planId
            sellingPlanId = mainSellingPlanData.planId;
        } else if (mainSellingPlanData.plans && mainSellingPlanData.plans.length > 0) { // First plan in group's plans array
            sellingPlanId = mainSellingPlanData.plans[0].platformId;
        }
        
        if (!sellingPlanId) {
            console.error(`[PFR-${this.rob_custom}] Could not determine selling_plan ID for variant ${variantPlatformId}.`);
            this.dom.mainCtaButton.textContent = 'Error: Sub Plan ID Missing'; // TODO: translation
            return;
        }
        item.selling_plan = sellingPlanId.split('/').pop(); // Numeric ID
      }
      items.push(item);
    }

    if (items.length === 0) {
      this.logDebug('No items selected to add to cart.');
      this.updateUI();
      return;
    }

    this.logDebug('Adding to cart with items:', items);

    try {
      const response = await fetch(`${this.routes.cart_add_url}.js`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ items: items })
      });
      const cartData = await response.json();
      this.logDebug('Cart add response:', cartData);
      if (response.ok) {
        document.dispatchEvent(new CustomEvent('cart:updated', { bubbles: true, detail: cartData }));
        // Optional: redirect or clear selections. For now, just update UI.
        // this.clearFlavorSelections(); // Example: clear selections after adding
      } else {
        console.error(`[PFR-${this.rob_custom}] Error adding to cart:`, cartData.description || 'Unknown error');
        alert(`Error: ${cartData.description || 'Could not add items to cart.'}`);
      }
    } catch (error) {
      console.error(`[PFR-${this.rob_custom}] Network error adding to cart:`, error);
      alert('Network error. Please try again.');
    } finally {
      this.updateUI(); // Re-enable button and update text based on current state
    }
  }

  initializeNutritionalInfo() {
    if (!this.dom.nutritionalInfoToggle || !this.dom.nutritionalInfoContent) return;

    this.dom.nutritionalInfoToggle.addEventListener('click', () => {
      const isExpanded = this.dom.nutritionalInfoToggle.getAttribute('aria-expanded') === 'true';
      this.dom.nutritionalInfoToggle.setAttribute('aria-expanded', !isExpanded);
      this.dom.nutritionalInfoContent.classList.toggle(`expanded-${this.rob_custom}`);
    });

    this.dom.nutritionalFlavorDropdown.addEventListener('change', (e) => {
      const selectedVariantShopifyId = e.target.value;
      if (selectedVariantShopifyId && this.variantMetafields[selectedVariantShopifyId]) {
        const nutritionalInfoUrl = this.variantMetafields[selectedVariantShopifyId].nutritional_info_url;
        if (nutritionalInfoUrl) {
          this.dom.nutritionalImage.src = nutritionalInfoUrl;
          this.dom.nutritionalImage.classList.remove(`hidden-${this.rob_custom}`);
        } else {
          this.dom.nutritionalImage.classList.add(`hidden-${this.rob_custom}`);
          this.dom.nutritionalImage.src = '';
        }
      } else {
        this.dom.nutritionalImage.classList.add(`hidden-${this.rob_custom}`);
        this.dom.nutritionalImage.src = '';
      }
    });
  }
  
  populateNutritionalDropdown() {
    if (!this.dom.nutritionalFlavorDropdown || !this.selectableVariants.length) return;
    
    this.dom.nutritionalFlavorDropdown.innerHTML = `<option value="">${this.dom.nutritionalFlavorDropdown.firstElementChild.textContent}</option>`; // Reset, keep placeholder
    this.selectableVariants.forEach(variant => {
        const option = document.createElement('option');
        option.value = variant.shopifyVariantId;
        option.textContent = variant.title;
        if (!this.variantMetafields[variant.shopifyVariantId]?.nutritional_info_url) {
           // option.disabled = true; // Or visually indicate no info available
        }
        this.dom.nutritionalFlavorDropdown.appendChild(option);
    });
  }

}
customElements.define('product-form-replacement-{{ rob_custom }}', ProductFormReplacement_{{ rob_custom }});
</script>

{% schema %}
{
  "name": "Product Form Replacement",
  "tag": "div",
  "class": "product-form-replacement-block",
  "settings": [
    {
      "type": "header",
      "content": "Product Configuration"
    },
    {
      "type": "product",
      "id": "product_to_configure",
      "label": "Product to Configure",
      "info": "Leave blank to use the current product. Select a product if using this block on a non-product page or to override."
    },
    {
      "type": "checkbox",
      "id": "enable_js_debug",
      "label": "Enable JavaScript Debugging",
      "info": "Outputs detailed logs to the browser console.",
      "default": false
    },
    {
      "type": "header",
      "content": "General Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 400,
      "max": 1200,
      "step": 20,
      "unit": "px",
      "label": "Max Width of Block",
      "default": 700
    },
    {
      "type": "range",
      "id": "padding_block",
      "min": 0,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Vertical Padding (Top/Bottom)",
      "default": 20
    },
    {
      "type": "range",
      "id": "padding_inline",
      "min": 0,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Horizontal Padding (Left/Right)",
      "default": 10
    },
    {
      "type": "range",
      "id": "padding_block_mobile",
      "min": 0,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Mobile Vertical Padding",
      "default": 10
    },
    {
      "type": "range",
      "id": "padding_inline_mobile",
      "min": 0,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Mobile Horizontal Padding",
      "default": 10
    },
    {
      "type": "color",
      "id": "divider_color",
      "label": "Divider Line Color",
      "default": "#e0e0e0"
    },
    {
      "type": "header",
      "content": "Product Information Display (Optional)"
    },
    {
      "type": "checkbox",
      "id": "show_product_header",
      "label": "Show Product Header",
      "info": "Displays breadcrumbs, title, rating, tags, and description.",
      "default": false
    },
    {
      "type": "richtext",
      "id": "custom_product_description",
      "label": "Custom Product Description",
      "info": "Displayed if 'Show Product Header' is checked. Overrides theme's default description for this block."
    },
    {
      "type": "text",
      "id": "product_tags_override",
      "label": "Product Tags Override",
      "info": "Manually set tags, e.g., 'Tag1 | Tag2 | Tag3'. If blank, uses product's actual tags."
    },
    {
      "type": "checkbox",
      "id": "show_rating_reviews",
      "label": "Show Rating & Reviews Count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_tags",
      "label": "Show Product Tags",
      "default": true
    },
    {
      "type": "header",
      "content": "Top Banner"
    },
    {
      "type": "text",
      "id": "banner_text",
      "label": "Banner Text",
      "default": "SAVE 38% ON FIRST ORDER"
    },
    {
      "type": "color",
      "id": "banner_bg_color",
      "label": "Banner Background Color",
      "default": "#4A00E0"
    },
    {
      "type": "color",
      "id": "banner_text_color",
      "label": "Banner Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "banner_font_size",
      "min": 10, "max": 24, "step": 1, "unit": "px",
      "label": "Banner Font Size",
      "default": 14
    },
    {
      "type": "range",
      "id": "banner_border_radius",
      "min": 0, "max": 20, "step": 1, "unit": "px",
      "label": "Banner Border Radius",
      "default": 4
    },
    {
      "type": "header",
      "content": "Bag Selection (Quantity Tiers)"
    },
    {
      "type": "range",
      "id": "max_bags",
      "min": 2, "max": 6, "step": 1,
      "label": "Maximum Bag Options",
      "default": 4,
      "info": "Sets the upper limit for bag choices displayed (e.g., 1 to 4 bags)."
    },
    {
      "type": "range",
      "id": "default_selected_bags",
      "min": 1, "max": 6, "step": 1,
      "label": "Default Selected Bags",
      "info": "Must be less than or equal to Maximum Bag Options.",
      "default": 3
    },
    {
      "type": "range",
      "id": "best_deal_bag_count",
      "min": 1, "max": 6, "step": 1,
      "label": "Bag Count for 'Best Deal' Badge",
      "default": 4
    },
    {
      "type": "text",
      "id": "best_deal_badge_text",
      "label": "'Best Deal' Badge Text",
      "default": "Best Deal"
    },
    {
      "type": "text",
      "id": "bag_label",
      "label": "Bag Label (Singular Noun)",
      "default": "Bag",
      "info": "E.g., 'Bag', 'Item', 'Coffee'. Plural 's' will be added automatically."
    },
    {
      "type": "select",
      "id": "bags_per_row",
      "label": "Bags per Row (Desktop)",
      "options": [ { "value": "2", "label": "2" }, { "value": "3", "label": "3" }, { "value": "4", "label": "4" } ],
      "default": "4"
    },
    {
      "type": "select",
      "id": "bags_per_row_mobile",
      "label": "Bags per Row (Mobile)",
      "options": [ { "value": "2", "label": "2" }, { "value": "3", "label": "3" } ],
      "default": "2"
    },
    {
      "type": "range",
      "id": "bag_option_gap",
      "min": 4, "max": 20, "step": 1, "unit": "px",
      "label": "Gap Between Bag Options",
      "default": 8
    },
    {
      "type": "header",
      "content": "Purchase Options (Subscribe/Onetime)"
    },
    {
      "type": "text",
      "id": "subscribe_title",
      "label": "Subscribe Option Title",
      "default": "Subscribe & Save"
    },
    {
      "type": "text",
      "id": "onetime_title",
      "label": "One-time Purchase Title",
      "default": "One-time Purchase"
    },
    {
      "type": "text",
      "id": "benefit_1", "label": "Subscription Benefit 1", "default": "FREE SHIPPING on first order"
    },
    {
      "type": "text", "id": "benefit_2", "label": "Benefit 2", "default": "15% OFF future orders" },
    {
      "type": "text", "id": "benefit_3", "label": "Benefit 3", "default": "NO CONTRACT cancel easily" },
    {
      "type": "text", "id": "benefit_4", "label": "Benefit 4", "default": "OUT OF STOCK PROTECTION" },
    {
      "type": "range",
      "id": "purchase_option_gap",
      "min": 4, "max": 20, "step": 1, "unit": "px",
      "label": "Gap Between Purchase Options",
      "default": 10
    },
    {
      "type": "header",
      "content": "Flavor Selection"
    },
    {
      "type": "text",
      "id": "flavors_title",
      "label": "Flavors Section Title",
      "default": "SELECT FLAVORS"
    },
    {
      "type": "text",
      "id": "flavor_status_needed_text",
      "label": "Status Text (More Needed)",
      "default": "%s Flavor(s) to Go",
      "info": "Use %s as a placeholder for the count."
    },
    {
      "type": "text",
      "id": "flavor_status_all_set_text",
      "label": "Status Text (All Set)",
      "default": "All Set! (You can add more)"
    },
    {
      "type": "range",
      "id": "flavor_image_size", "min": 40, "max": 80, "step": 5, "unit": "px",
      "label": "Flavor Image Size (Desktop)", "default": 60
    },
    {
      "type": "range",
      "id": "flavor_image_size_mobile", "min": 30, "max": 60, "step": 5, "unit": "px",
      "label": "Flavor Image Size (Mobile)", "default": 40
    },
    {
      "type": "header",
      "content": "Pricing Display"
    },
    {
      "type": "text",
      "id": "savings_badge_text_prefix",
      "label": "Savings Badge Text Prefix",
      "default": "You're saving"
    },
    {
      "type": "header",
      "content": "Main Call-to-Action Button"
    },
    {
      "type": "text",
      "id": "cta_default_text",
      "label": "Default CTA Text (Initial/Loading)",
      "default": "SELECT OPTIONS"
    },
    {
      "type": "text",
      "id": "cta_select_more_text",
      "label": "CTA Text (Select More Flavors)",
      "default": "SELECT %s MORE BAGS",
      "info": "Use %s as a placeholder for the count."
    },
    {
      "type": "text",
      "id": "cta_add_to_cart_text",
      "label": "CTA Text (Add to Cart)",
      "default": "ADD TO CART - {{price}}",
      "info": "{{price}} will be replaced with the total price."
    },
    {
      "type": "header",
      "content": "Metafield Configuration"
    },
    {
      "type": "text",
      "id": "flavor_description_metafield",
      "label": "Flavor Description Metafield",
      "default": "custom.flavor_description",
      "info": "Variant metafield for flavor description. Format: namespace.key"
    },
    {
      "type": "text",
      "id": "nutritional_info_metafield",
      "label": "Nutritional Info Metafield (File)",
      "default": "custom.nutritional_information",
      "info": "Variant metafield (file type) for nutritional image. Format: namespace.key"
    },
    {
      "type": "header",
      "content": "Risk-Free Trial (Optional)"
    },
    {
      "type": "checkbox", "id": "show_risk_free_trial", "label": "Show Risk-Free Trial", "default": true },
    {
      "type": "image_picker", "id": "guarantee_icon", "label": "Guarantee Icon" },
    {
      "type": "richtext", "id": "guarantee_text", "label": "Guarantee Text", "default": "<p><strong>Try it risk-free.</strong> If you're not in love, we'll refund you.</p>" },
    {
      "type": "header",
      "content": "Nutritional Information (Optional)"
    },
    {
      "type": "checkbox", "id": "show_nutritional_info_dropdown", "label": "Show Nutritional Info Dropdown", "default": true },
    {
      "type": "text", "id": "nutritional_info_title", "label": "Nutritional Info Title", "default": "Nutritional Information" },
    {
      "type": "text", "id": "nutritional_dropdown_placeholder", "label": "Nutritional Dropdown Placeholder", "default": "Select a Flavor" },
    {
      "type": "header",
      "content": "Color Scheme & Styling"
    },
    { "type": "paragraph", "content": "Product Header Styling" },
    { "type": "color", "id": "breadcrumb_text_color", "label": "Breadcrumb Text", "default": "#666666" },
    { "type": "color", "id": "breadcrumb_link_color", "label": "Breadcrumb Link", "default": "#333333" },
    { "type": "range", "id": "breadcrumb_font_size", "min": 10, "max": 18, "step": 1, "unit": "px", "label": "Breadcrumb Font Size", "default": 14 },
    { "type": "color", "id": "product_title_color", "label": "Product Title", "default": "#000000" },
    { "type": "range", "id": "product_title_font_size", "min": 18, "max": 36, "step": 1, "unit": "px", "label": "Product Title Font Size", "default": 24 },
    {
      "type": "select", "id": "product_title_transform", "label": "Product Title Transform",
      "options": [ { "value": "none", "label": "None" }, { "value": "uppercase", "label": "Uppercase" }, { "value": "capitalize", "label": "Capitalize" } ],
      "default": "uppercase"
    },
    { "type": "color", "id": "stars_color", "label": "Rating Stars Color", "default": "#FFD700" },
    { "type": "color", "id": "reviews_text_color", "label": "Reviews Text Color", "default": "#333333" },
    { "type": "color", "id": "tags_text_color", "label": "Tags Text Color", "default": "#666666" },
    { "type": "range", "id": "rating_reviews_font_size", "min": 10, "max": 18, "step": 1, "unit": "px", "label": "Rating/Reviews Font Size", "default": 14 },
    { "type": "color", "id": "description_text_color", "label": "Description Text Color", "default": "#333333" },
    { "type": "range", "id": "description_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Description Font Size", "default": 16 },
    { "type": "paragraph", "content": "Bag Selection Styling" },
    { "type": "color", "id": "bag_option_bg_color", "label": "Bag Option BG", "default": "#FFFFFF" },
    { "type": "color", "id": "bag_option_border_color", "label": "Bag Option Border", "default": "#e0e0e0" },
    { "type": "color", "id": "bag_option_hover_border_color", "label": "Bag Option Hover Border", "default": "#b0b0b0" },
    { "type": "color", "id": "bag_option_selected_bg_color", "label": "Bag Option Selected BG", "default": "#f0f7ff" },
    { "type": "color", "id": "bag_option_selected_border_color", "label": "Bag Option Selected Border", "default": "#4a90e2" },
    { "type": "range", "id": "bag_option_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Bag Option Border Radius", "default": 6 },
    { "type": "color", "id": "deal_badge_bg_color", "label": "Deal Badge BG", "default": "#d32f2f" },
    { "type": "color", "id": "deal_badge_text_color", "label": "Deal Badge Text", "default": "#FFFFFF" },
    { "type": "range", "id": "deal_badge_font_size", "min": 8, "max": 14, "step": 1, "unit": "px", "label": "Deal Badge Font Size", "default": 10 },
    { "type": "color", "id": "bag_count_text_color", "label": "Bag Count Text", "default": "#333333" },
    { "type": "color", "id": "bag_count_selected_text_color", "label": "Bag Count Selected Text", "default": "#4a90e2" },
    { "type": "range", "id": "bag_count_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Bag Count Font Size", "default": 14 },

    { "type": "paragraph", "content": "Purchase Option Styling" },
    { "type": "color", "id": "purchase_option_bg_color", "label": "Purchase Option BG", "default": "#f8f8f8" },
    { "type": "color", "id": "purchase_option_border_color", "label": "Purchase Option Border", "default": "#e0e0e0" },
    { "type": "color", "id": "purchase_option_hover_border_color", "label": "Purchase Option Hover Border", "default": "#4a90e2" },
    { "type": "color", "id": "purchase_option_selected_bg_color", "label": "Purchase Option Selected BG", "default": "#e6f2ff" },
    { "type": "color", "id": "purchase_option_selected_border_color", "label": "Purchase Option Selected Border", "default": "#4a90e2" },
    { "type": "range", "id": "purchase_option_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Purchase Option Border Radius", "default": 8 },
    { "type": "color", "id": "purchase_label_text_color", "label": "Purchase Label Text", "default": "#333333" },
    { "type": "color", "id": "purchase_label_selected_text_color", "label": "Purchase Label Selected Text", "default": "#0056b3" },
    { "type": "range", "id": "purchase_label_font_size", "min": 12, "max": 22, "step": 1, "unit": "px", "label": "Purchase Label Font Size", "default": 16 },
    { "type": "color", "id": "original_price_color", "label": "Original Price Text", "default": "#666666" },
    { "type": "color", "id": "discounted_price_color", "label": "Discounted Price Text", "default": "#4a90e2" },
    { "type": "color", "id": "discounted_price_selected_color", "label": "Discounted Price Selected Box Text", "default": "#0056b3" },
    { "type": "range", "id": "price_font_size", "min": 12, "max": 22, "step": 1, "unit": "px", "label": "Price Font Size", "default": 16 },
    { "type": "color", "id": "benefit_text_color", "label": "Benefit Text Color", "default": "#555555" },
    { "type": "color", "id": "benefit_checkmark_color", "label": "Benefit Checkmark Color", "default": "#4a90e2" },
    { "type": "range", "id": "benefit_font_size", "min": 10, "max": 16, "step": 1, "unit": "px", "label": "Benefit Font Size", "default": 12 },

    { "type": "paragraph", "content": "Flavor Selection Styling" },
    { "type": "color", "id": "flavors_title_color", "label": "Flavors Title Text", "default": "#333333" },
    { "type": "range", "id": "flavors_title_font_size", "min": 14, "max": 24, "step": 1, "unit": "px", "label": "Flavors Title Font Size", "default": 18 },
    { "type": "color", "id": "flavor_status_info_bg_color", "label": "Flavor Status Info BG", "default": "rgba(74, 144, 226, 0.1)" },
    { "type": "color", "id": "flavor_status_info_text_color", "label": "Flavor Status Info Text", "default": "#4a90e2" },
    { "type": "color", "id": "flavor_status_error_bg_color", "label": "Flavor Status Error BG", "default": "rgba(211, 47, 47, 0.1)" },
    { "type": "color", "id": "flavor_status_error_text_color", "label": "Flavor Status Error Text", "default": "#d32f2f" },
    { "type": "range", "id": "flavor_status_font_size", "min": 10, "max": 16, "step": 1, "unit": "px", "label": "Flavor Status Font Size", "default": 13 },
    { "type": "range", "id": "flavor_status_border_radius", "min": 0, "max": 10, "step": 1, "unit": "px", "label": "Flavor Status Border Radius", "default": 4 },
    { "type": "color", "id": "flavor_card_bg_color", "label": "Flavor Card BG", "default": "#FFFFFF" },
    { "type": "color", "id": "flavor_card_border_color", "label": "Flavor Card Border", "default": "#e0e0e0" },
    { "type": "range", "id": "flavor_card_border_radius", "min": 0, "max": 12, "step": 1, "unit": "px", "label": "Flavor Card Border Radius", "default": 8 },
    { "type": "color", "id": "flavor_name_color", "label": "Flavor Name Text", "default": "#333333" },
    { "type": "range", "id": "flavor_name_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Flavor Name Font Size", "default": 15 },
    { "type": "color", "id": "flavor_desc_color", "label": "Flavor Description Text", "default": "#666666" },
    { "type": "range", "id": "flavor_desc_font_size", "min": 10, "max": 16, "step": 1, "unit": "px", "label": "Flavor Description Font Size", "default": 13 },
    { "type": "color", "id": "flavor_add_btn_bg_color", "label": "Flavor 'Add' Button BG", "default": "#4a90e2" },
    { "type": "color", "id": "flavor_add_btn_text_color", "label": "Flavor 'Add' Button Text", "default": "#FFFFFF" },
    { "type": "color", "id": "flavor_add_btn_hover_bg_color", "label": "Flavor 'Add' Button Hover BG", "default": "#357abd" },
    { "type": "range", "id": "flavor_button_font_size", "min": 12, "max": 18, "step": 1, "unit": "px", "label": "Flavor Button Font Size", "default": 14 },
    { "type": "range", "id": "flavor_button_border_radius", "min": 0, "max": 10, "step": 1, "unit": "px", "label": "Flavor Button Border Radius", "default": 6 },
    { "type": "color", "id": "flavor_qty_border_color", "label": "Flavor Qty Control Border", "default": "#cccccc" },
    { "type": "color", "id": "flavor_qty_btn_bg_color", "label": "Flavor Qty Button BG", "default": "#f5f5f5" },
    { "type": "color", "id": "flavor_qty_btn_text_color", "label": "Flavor Qty Button Text", "default": "#333333" },
    { "type": "color", "id": "flavor_qty_btn_hover_bg_color", "label": "Flavor Qty Button Hover BG", "default": "#e0e0e0" },
    { "type": "color", "id": "flavor_qty_input_bg_color", "label": "Flavor Qty Input BG", "default": "#FFFFFF" },
    { "type": "color", "id": "flavor_qty_input_text_color", "label": "Flavor Qty Input Text", "default": "#333333" },

    { "type": "paragraph", "content": "Price Summary Styling" },
    { "type": "color", "id": "subtotal_text_color", "label": "Subtotal Text Color", "default": "#000000" },
    { "type": "range", "id": "subtotal_font_size", "min": 14, "max": 24, "step": 1, "unit": "px", "label": "Subtotal Font Size", "default": 18 },
    { "type": "color", "id": "savings_badge_bg_color", "label": "Savings Badge BG", "default": "rgba(74, 144, 226, 0.1)" },
    { "type": "color", "id": "savings_badge_text_color", "label": "Savings Badge Text", "default": "#4a90e2" },
    { "type": "range", "id": "savings_badge_font_size", "min": 12, "max": 18, "step": 1, "unit": "px", "label": "Savings Badge Font Size", "default": 14 },
    { "type": "range", "id": "savings_badge_border_radius", "min": 0, "max": 10, "step": 1, "unit": "px", "label": "Savings Badge Border Radius", "default": 6 },

    { "type": "paragraph", "content": "Main CTA Button Styling" },
    { "type": "color", "id": "cta_bg_color", "label": "CTA BG Color", "default": "#4A00E0" },
    { "type": "color", "id": "cta_text_color", "label": "CTA Text Color", "default": "#FFFFFF" },
    { "type": "color", "id": "cta_hover_bg_color", "label": "CTA Hover BG Color", "default": "#3A00B3" },
    { "type": "color", "id": "cta_disabled_bg_color", "label": "CTA Disabled BG Color", "default": "#cccccc" },
    { "type": "color", "id": "cta_disabled_text_color", "label": "CTA Disabled Text Color", "default": "#666666" },
    { "type": "range", "id": "cta_font_size", "min": 14, "max": 24, "step": 1, "unit": "px", "label": "CTA Font Size", "default": 16 },
    { "type": "range", "id": "cta_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "CTA Border Radius", "default": 8 },

    { "type": "paragraph", "content": "Risk-Free Trial Styling" },
    { "type": "range", "id": "guarantee_icon_size", "min": 20, "max": 60, "step": 5, "unit": "px", "label": "Guarantee Icon Size", "default": 40 },
    { "type": "color", "id": "guarantee_icon_color", "label": "Guarantee Icon SVG Color", "default": "#4A00E0" },
    { "type": "color", "id": "guarantee_text_color", "label": "Guarantee Text Color", "default": "#333333" },
    { "type": "range", "id": "guarantee_text_font_size", "min": 12, "max": 18, "step": 1, "unit": "px", "label": "Guarantee Text Font Size", "default": 15 },

    { "type": "paragraph", "content": "Nutritional Info Styling" },
    { "type": "color", "id": "nutritional_toggle_text_color", "label": "Nutritional Toggle Text", "default": "#333333" },
    { "type": "range", "id": "nutritional_toggle_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Nutritional Toggle Font Size", "default": 16 },
    { "type": "color", "id": "nutritional_toggle_icon_color", "label": "Nutritional Toggle Icon", "default": "#333333" },
    { "type": "color", "id": "dropdown_border_color", "label": "Dropdown Border Color", "default": "#cccccc" },
    { "type": "range", "id": "dropdown_border_radius", "min": 0, "max": 10, "step": 1, "unit": "px", "label": "Dropdown Border Radius", "default": 4 },
    { "type": "range", "id": "dropdown_font_size", "min": 12, "max": 18, "step": 1, "unit": "px", "label": "Dropdown Font Size", "default": 14 }
  ],
  "presets": [
    {
      "name": "Product Form Replacement"
    }
  ]
}
{% endschema %}