{%- comment -%}
  IMPORTANT: THIS IS A LIQUID BLOCK FILE.
  IT REQUIRES THE FOLLOWING METAFIELDS TO BE SET UP ON VARIANTS:
  - custom.flavor_description (text or richtext) - For the detailed flavor description.
  - custom.nutritional_information (richtext or text containing image URL or HTML) - For the "See Label" content.
  - custom.variant_flag (text) - For one of_the badges in the modal (e.g., "105mg Caffeine").
  - custom.servings (text) - For another badge in the modal (e.g., "20 Servings").
  - custom.primary_color (color string, e.g., "#RRGGBB") - Background color for the 'servings' badge.
  - custom.secondary_color (color string, e.g., "#RRGGBB") - Background color for the 'variant_flag' badge.
{%- endcomment -%}

{%- doc -%}
  @prompt
  The user wants a Shopify Liquid block that implements a "Build a Box" feature using the Skio Dynamic Box API.

  Functional Requirements:
  - API Integration: Fetch data from Skio Dynamic Box API (`https://api.skio.com/storefront-http/get-dynamic-box`) via POST.
    - The `productPlatformId` for the API call will be derived from a product selected in the Shopify Theme Customizer.
  - Product Display:
    - Display selectable product variants returned from the `selectableProductVariants` array in the API response.
    - Each variant listed should show its image, title, and a short description (from variant metafield `custom.flavor_description`).
  - Quantity Selection:
    - Allow users to select a quantity tier (e.g., 1 Bag, 2 Bags, 3 Bags) based on `sizeInterval` from the API response.
  - Pricing:
    - Prices should recalculate dynamically based on the selected quantity tier, using `percentDiscountTier` from the API response.
    - Support for "Subscribe & Save" vs. "One-time Purchase" options, affecting base prices and selling plan association.
  - Variant Modal:
    - Clicking on a variant in the list should open a modal displaying more details.
    - Modal Content:
      - Variant image.
      - Product title (from Skio's `productTitle`) and flavor name (from Skio's `productVariantTitle`).
      - Full flavor description (variant metafield `custom.flavor_description`).
      - Badges:
        - One badge for servings (variant metafield `custom.servings`). Background color from `custom.primary_color` (variant metafield).
        - Another badge for a general flag (variant metafield `custom.variant_flag`). Background color from `custom.secondary_color` (variant metafield).
        - Font color for badges to be configurable via schema.
      - "See Label" Accordion:
        - Expands to show nutrition facts panel.
        - Content from variant metafield `custom.nutritional_information` (can be image URL or HTML).
  - UI/UX:
    - "N Flavor(s) to Go" text: Dynamically updates based on selected quantity tier and number of items added by the user.
    - Add to Cart Button:
      - Disabled if the user has not selected the required number of items for the chosen quantity tier. Disabled state should have distinct text (e.g., "SELECT X MORE BAGS") and styling.
      - Enabled when the required number of items (or more, if allowed by Skio logic) is selected. Enabled state should have text (e.g., "ADD TO CART") and styling.
    - Subtotal & Savings Display:
      - Subtotal and savings amount should only be displayed once the user has met the minimum item selection requirement for the chosen quantity tier.
      - Prices and discounts must be responsive to user selections.
  - Console Logging:
    - Include console logs for API calls, responses, errors, and key data points for debugging.

  Styling Considerations:
  - Styles should be namespaced using `{{ rob_custom }}`.
  - Many styling aspects (colors, fonts, spacing) should be configurable via block settings in the schema.
  - The overall look should be inspired by the provided images, including the modal layout.

  Metafield Dependencies:
  - `product.metafields.custom.product_id_for_skio` (This was initially considered, but using a `product` setting in schema is better).
  - `variant.metafields.custom.flavor_description` (Text)
  - `variant.metafields.custom.nutritional_information` (Rich Text or Text (URL/HTML))
  - `variant.metafields.custom.variant_flag` (Text)
  - `variant.metafields.custom.servings` (Text)
  - `variant.metafields.custom.primary_color` (Text - hex color for servings badge bg)
  - `variant.metafields.custom.secondary_color` (Text - hex color for variant_flag badge bg)

  Schema Requirements:
  - Extremely detailed schema for granular control over text, colors, spacing, and behavior.
  - Setting for the Shopify Product GID to be used for the Skio API call (via `product` type setting).
  - Settings for button texts, labels, colors (normal, hover, disabled), etc.
  - Settings for modal appearance and badge font color.
{%- enddoc -%}

{%- liquid
  assign rob_custom = block.id | replace: '_', '' | downcase

  assign product_shopify_id_numeric = null
  if block.settings.product_for_skio != blank
    assign product_shopify_id_parts = block.settings.product_for_skio.id | split: '/'
    assign product_shopify_id_numeric = product_shopify_id_parts.last
  endif

  assign variant_metafields_json_string = '{}'
  if block.settings.product_for_skio != blank and block.settings.product_for_skio.variants.size > 0
    assign temp_json_parts_array = array
    for variant in block.settings.product_for_skio.variants
      assign variant_id_str = variant.id | append: '' 
      assign flavor_description = variant.metafields.custom.flavor_description | default: "" | json
      assign nutritional_information = variant.metafields.custom.nutritional_information | default: "" | json 
      assign variant_flag = variant.metafields.custom.variant_flag | default: "" | json
      assign servings = variant.metafields.custom.servings | default: "" | json
      assign primary_color = variant.metafields.custom.primary_color | default: "#F0F0F0" | json
      assign secondary_color = variant.metafields.custom.secondary_color | default: "#E0E0E0" | json

      capture variant_json_part
        echo '"' | append: variant_id_str | append: '":{'
        echo '"flavor_description":' | append: flavor_description | append: ','
        echo '"nutritional_information":' | append: nutritional_information | append: ','
        echo '"variant_flag":' | append: variant_flag | append: ','
        echo '"servings":' | append: servings | append: ','
        echo '"primary_color":' | append: primary_color | append: ','
        echo '"secondary_color":' | append: secondary_color
        echo '}'
      endcapture
      assign temp_json_parts_array = temp_json_parts_array | push: variant_json_part
    endfor
    assign variant_metafields_json_string = "{ {{ temp_json_parts_array | join: ',' }} }"
  endif
-%}

{%- style -%}
  .skio-dynamic-box-wrapper-{{ rob_custom }} {
    background-color: {{ block.settings.section_bg_color }};
    padding: {{ block.settings.section_padding_top }}px {{ block.settings.section_padding_x }}px {{ block.settings.section_padding_bottom }}px {{ block.settings.section_padding_x }}px;
    color: {{ block.settings.primary_text_color }};
    font-family: var(--font-body-family);
  }
  .skio-dynamic-box-wrapper-{{ rob_custom }} * {
    box-sizing: border-box;
  }

  .purchase-options-{{ rob_custom }} {
    display: flex;
    flex-direction: column;
    gap: {{ block.settings.spacing_xs }}px;
    margin-bottom: {{ block.settings.spacing_lg }}px;
  }
  .purchase-option-{{ rob_custom }} {
    border: 1px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
    padding: {{ block.settings.spacing_md }}px;
    cursor: pointer;
    background-color: {{ block.settings.purchase_option_bg_default }};
    color: {{ block.settings.purchase_option_text_default }};
    transition: background-color 0.3s, border-color 0.3s;
  }
  .purchase-option-{{ rob_custom }}.selected-{{ rob_custom }} {
    border-color: {{ block.settings.purchase_option_border_selected }};
    background-color: {{ block.settings.purchase_option_bg_selected }};
    color: {{ block.settings.purchase_option_text_selected }};
    box-shadow: 0 0 0 2px {{ block.settings.purchase_option_border_selected }};
  }
  .purchase-option-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
    margin-bottom: {{ block.settings.spacing_sm }}px;
  }
  .purchase-option-title-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_lg }}px;
  }
  .purchase-option-price-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_md }}px;
  }
  .original-price-{{ rob_custom }} {
    text-decoration: line-through;
    color: {{ block.settings.secondary_text_color }};
    margin-right: {{ block.settings.spacing_xs }}px;
  }
  .discount-badge-{{ rob_custom }} {
    background-color: {{ block.settings.discount_badge_bg }};
    color: {{ block.settings.discount_badge_text }};
    padding: {{ block.settings.spacing_xxs }}px {{ block.settings.spacing_xs }}px;
    border-radius: {{ block.settings.border_radius_sm }}px;
    font-size: {{ block.settings.font_size_sm }}px;
    margin-left: {{ block.settings.spacing_sm }}px;
  }
  .purchase-option-benefits-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_sm }}px;
    color: {{ block.settings.secondary_text_color }};
    list-style: none;
    padding-left: 0;
    margin: 0;
  }
  .purchase-option-benefits-{{ rob_custom }} li {
    margin-bottom: {{ block.settings.spacing_xxs }}px;
    display: flex;
    align-items: center;
  }
  .purchase-option-benefits-{{ rob_custom }} li svg {
    width: 16px;
    height: 16px;
    margin-right: {{ block.settings.spacing_xs }}px;
    fill: {{ block.settings.checkmark_color }};
  }

  .quantity-tiers-{{ rob_custom }} {
    display: flex;
    gap: {{ block.settings.spacing_sm }}px;
    margin-bottom: {{ block.settings.spacing_lg }}px;
    flex-wrap: wrap;
  }
  .quantity-tier-button-{{ rob_custom }} {
    padding: {{ block.settings.qty_btn_padding_y }}px {{ block.settings.qty_btn_padding_x }}px;
    border: 1px solid {{ block.settings.qty_btn_border_default }};
    background-color: {{ block.settings.qty_btn_bg_default }};
    color: {{ block.settings.qty_btn_text_default }};
    border-radius: {{ block.settings.border_radius }}px;
    cursor: pointer;
    font-size: {{ block.settings.font_size_md }}px;
    transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    flex-grow: 1;
    text-align: center;
  }
  .quantity-tier-button-{{ rob_custom }}.selected-{{ rob_custom }} {
    background-color: {{ block.settings.qty_btn_bg_selected }};
    color: {{ block.settings.qty_btn_text_selected }};
    border-color: {{ block.settings.qty_btn_border_selected }};
    font-weight: bold;
  }

  .flavors-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: {{ block.settings.spacing_md }}px;
  }
  .flavors-title-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_xl }}px;
    font-weight: bold;
    color: {{ block.settings.primary_text_color }};
  }
  .flavors-to-go-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_md }}px;
    color: {{ block.settings.primary_text_color }};
    background-color: {{ block.settings.flavors_to_go_bg }};
    padding: {{ block.settings.spacing_xs }}px {{ block.settings.spacing_sm }}px;
    border-radius: {{ block.settings.border_radius_lg }}px;
  }

  .variants-grid-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: {{ block.settings.variant_gap }}px;
    margin-bottom: {{ block.settings.spacing_lg }}px;
  }
  .variant-card-{{ rob_custom }} {
    border: 1px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
    padding: {{ block.settings.spacing_md }}px;
    background-color: {{ block.settings.variant_card_bg }};
    display: flex;
    flex-direction: column;
    text-align: left;
    cursor: pointer; /* To indicate clickable for modal */
    transition: box-shadow 0.3s;
  }
  .variant-card-{{ rob_custom }}:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  .variant-image-container-{{ rob_custom }} {
    width: 100%;
    padding-bottom: 100%; /* 1:1 Aspect Ratio */
    position: relative;
    margin-bottom: {{ block.settings.spacing_sm }}px;
    background-color: #f5f5f5;
    border-radius: {{ block.settings.border_radius_sm }}px;
    overflow: hidden;
  }
  .variant-image-{{ rob_custom }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .variant-title-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_lg }}px;
    font-weight: bold;
    color: {{ block.settings.variant_card_text_color }};
    margin-bottom: {{ block.settings.spacing_xs }}px;
    min-height: calc({{ block.settings.font_size_lg }}px * 2.4); /* Approx 2 lines */
  }
  .variant-short-description-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_sm }}px;
    color: {{ block.settings.secondary_text_color }};
    margin-bottom: {{ block.settings.spacing_sm }}px;
    flex-grow: 1;
    display: -webkit-box;
    -webkit-line-clamp: 2; /* Limit to 2 lines */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    min-height: calc({{ block.settings.font_size_sm }}px * 2.4); /* Approx 2 lines */
  }
  .variant-controls-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto; /* Pushes to bottom */
  }
  .variant-price-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_md }}px;
    color: {{ block.settings.variant_card_text_color }};
    font-weight: bold;
  }
  .add-variant-button-{{ rob_custom }}, .quantity-control-{{ rob_custom }} button {
    background-color: {{ block.settings.variant_add_button_bg }};
    color: {{ block.settings.variant_add_button_text_color }};
    border: none;
    padding: {{ block.settings.spacing_xs }}px {{ block.settings.spacing_sm }}px;
    border-radius: {{ block.settings.border_radius_sm }}px;
    cursor: pointer;
    font-size: {{ block.settings.font_size_md }}px;
    transition: background-color 0.3s;
  }
  .add-variant-button-{{ rob_custom }}:hover {
    opacity: 0.8;
  }
  .quantity-control-{{ rob_custom }} {
    display: flex;
    align-items: center;
    background-color: {{ block.settings.variant_quantity_button_bg }};
    border-radius: {{ block.settings.border_radius_sm }}px;
  }
  .quantity-control-{{ rob_custom }} button {
    background-color: transparent;
    color: {{ block.settings.variant_quantity_text_color }};
    padding: {{ block.settings.spacing_xs }}px;
    font-size: {{ block.settings.font_size_lg }}px;
    line-height: 1;
  }
  .quantity-control-{{ rob_custom }} span {
    padding: 0 {{ block.settings.spacing_sm }}px;
    font-size: {{ block.settings.font_size_md }}px;
    color: {{ block.settings.variant_quantity_text_color }};
    min-width: 20px;
    text-align: center;
  }

  .summary-section-{{ rob_custom }} {
    margin-bottom: {{ block.settings.spacing_lg }}px;
    padding-top: {{ block.settings.spacing_md }}px;
    border-top: 1px solid {{ block.settings.border_color }};
  }
  .summary-line-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    font-size: {{ block.settings.font_size_md }}px;
    margin-bottom: {{ block.settings.spacing_xs }}px;
  }
  .summary-line-{{ rob_custom }} .label-{{ rob_custom }} {
    color: {{ block.settings.secondary_text_color }};
  }
  .summary-line-{{ rob_custom }} .value-{{ rob_custom }} {
    color: {{ block.settings.primary_text_color }};
    font-weight: bold;
  }
  .savings-line-{{ rob_custom }} .value-{{ rob_custom }} {
    color: {{ block.settings.savings_text_color }};
  }

  .add-to-cart-button-{{ rob_custom }} {
    width: 100%;
    padding: {{ block.settings.cart_btn_padding_y }}px {{ block.settings.cart_btn_padding_x }}px;
    border: none;
    border-radius: {{ block.settings.border_radius }}px;
    font-size: {{ block.settings.font_size_lg }}px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
  }
  .add-to-cart-button-{{ rob_custom }}.enabled-{{ rob_custom }} {
    background-color: {{ block.settings.add_to_cart_bg_enabled }};
    color: {{ block.settings.add_to_cart_text_color_enabled }};
  }
  .add-to-cart-button-{{ rob_custom }}.disabled-{{ rob_custom }} {
    background-color: {{ block.settings.add_to_cart_bg_disabled }};
    color: {{ block.settings.add_to_cart_text_color_disabled }};
    cursor: not-allowed;
  }

  /* Modal Styling */
  .modal-overlay-{{ rob_custom }} {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0s linear 0.3s;
  }
  .modal-overlay-{{ rob_custom }}.visible-{{ rob_custom }} {
    opacity: 1;
    visibility: visible;
    transition-delay: 0s;
  }
  .modal-content-{{ rob_custom }} {
    background-color: {{ block.settings.modal_bg_color }};
    color: {{ block.settings.modal_text_color }};
    padding: {{ block.settings.spacing_xl }}px;
    border-radius: {{ block.settings.border_radius_lg }}px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    transform: scale(0.9);
    transition: transform 0.3s ease;
  }
  .modal-overlay-{{ rob_custom }}.visible-{{ rob_custom }} .modal-content-{{ rob_custom }} {
    transform: scale(1);
  }
  .modal-close-button-{{ rob_custom }} {
    position: absolute;
    top: {{ block.settings.spacing_md }}px;
    right: {{ block.settings.spacing_md }}px;
    background: none;
    border: none;
    font-size: {{ block.settings.font_size_xl }}px;
    color: {{ block.settings.modal_close_button_color }};
    cursor: pointer;
    line-height: 1;
  }
  .modal-image-{{ rob_custom }} {
    width: 100%;
    max-height: 300px;
    object-fit: contain;
    margin-bottom: {{ block.settings.spacing_md }}px;
    border-radius: {{ block.settings.border_radius_sm }}px;
  }
  .modal-badges-{{ rob_custom }} {
    display: flex;
    gap: {{ block.settings.spacing_sm }}px;
    margin-bottom: {{ block.settings.spacing_sm }}px;
    flex-wrap: wrap;
  }
  .modal-badge-{{ rob_custom }} {
    padding: {{ block.settings.spacing_xxs }}px {{ block.settings.spacing_sm }}px;
    border-radius: {{ block.settings.border_radius_pill }}px; /* Pill shape */
    font-size: {{ block.settings.font_size_xs }}px;
    font-weight: bold;
    color: {{ block.settings.modal_badge_font_color }};
    text-transform: uppercase;
  }
  .modal-product-title-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_xxl }}px;
    font-weight: bold;
    margin-bottom: {{ block.settings.spacing_xs }}px;
    color: {{ block.settings.modal_text_color }}
  }
  .modal-flavor-title-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_lg }}px;
    font-weight: normal;
    margin-bottom: {{ block.settings.spacing_sm }}px;
    color: {{ block.settings.modal_text_color }}
  }
  .modal-description-{{ rob_custom }} {
    font-size: {{ block.settings.font_size_md }}px;
    margin-bottom: {{ block.settings.spacing_md }}px;
    line-height: 1.6;
    color: {{ block.settings.modal_text_color }}
  }
  .modal-description-{{ rob_custom }} p {
    margin-bottom: {{ block.settings.spacing_sm }}px;
  }
  .accordion-{{ rob_custom }} .accordion-header-{{ rob_custom }} {
    background-color: {{ block.settings.accordion_header_bg }};
    color: {{ block.settings.accordion_header_text_color }};
    padding: {{ block.settings.spacing_sm }}px {{ block.settings.spacing_md }}px;
    border: 1px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius_sm }}px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
    margin-top: {{ block.settings.spacing_md }}px;
  }
  .accordion-{{ rob_custom }} .accordion-header-{{ rob_custom }} .arrow-{{ rob_custom }} {
    transition: transform 0.3s;
  }
  .accordion-{{ rob_custom }} .accordion-header-{{ rob_custom }}.active-{{ rob_custom }} .arrow-{{ rob_custom }} {
    transform: rotate(180deg);
  }
  .accordion-{{ rob_custom }} .accordion-content-{{ rob_custom }} {
    padding: {{ block.settings.spacing_md }}px;
    border: 1px solid {{ block.settings.border_color }};
    border-top: none;
    border-radius: 0 0 {{ block.settings.border_radius_sm }}px {{ block.settings.border_radius_sm }}px;
    display: none;
    background-color: {{ block.settings.accordion_content_bg }};
  }
  .accordion-{{ rob_custom }} .accordion-content-{{ rob_custom }}.active-{{ rob_custom }} {
    display: block;
  }
  .accordion-{{ rob_custom }} .accordion-content-{{ rob_custom }} img {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 0 auto;
  }
  .loading-state-{{ rob_custom }}, .error-state-{{ rob_custom }} {
    text-align: center;
    padding: {{ block.settings.spacing_xl }}px;
    font-size: {{ block.settings.font_size_lg }}px;
  }

  @media (max-width: 768px) {
    .variants-grid-{{ rob_custom }} {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
    .modal-content-{{ rob_custom }} {
      padding: {{ block.settings.spacing_lg }}px;
    }
    .flavors-header-{{ rob_custom }} {
      flex-direction: column;
      align-items: flex-start;
      gap: {{ block.settings.spacing_sm }}px;
    }
  }
  @media (max-width: 480px) {
    .purchase-options-{{ rob_custom }} {
      gap: {{ block.settings.spacing_xs }}px; /* Tighter spacing for purchase options on mobile */
    }
    .purchase-option-{{ rob_custom }} {
      padding: {{ block.settings.spacing_sm }}px;
    }
    .quantity-tiers-{{ rob_custom }} {
      display: grid;
      grid-template-columns: 1fr 1fr; /* 2 buttons per row */
    }
    .variants-grid-{{ rob_custom }} {
      grid-template-columns: 1fr; /* Single column for variants */
    }
    .modal-product-title-{{ rob_custom }} {
      font-size: {{ block.settings.font_size_xl }}px;
    }
    .modal-flavor-title-{{ rob_custom }} {
      font-size: {{ block.settings.font_size_md }}px;
    }
  }

{%- endstyle -%}

<div class="skio-dynamic-box-wrapper-{{ rob_custom }}" {{ block.shopify_attributes }}>
  {%- if product_shopify_id_numeric != blank -%}
    <dynamic-box-builder-{{ rob_custom }}
      data-product-id="{{ product_shopify_id_numeric }}"
      data-variant-metafields="{{ variant_metafields_json_string }}"
      data-rob-custom="{{ rob_custom }}"
    >
      <div class="loading-state-{{ rob_custom }}">
        {{ 'general.loading' | t }}
      </div>
    </dynamic-box-builder-{{ rob_custom }}>
  {%- else -%}
    <div class="error-state-{{ rob_custom }}">
      Please select a product in the theme customizer for the Skio Dynamic Box.
    </div>
  {%- endif -%}
</div>

<script>
  class DynamicBoxBuilder{{ rob_custom }} extends HTMLElement {
    constructor() {
      super();
      this.rob_custom = this.dataset.robCustom;
      this.productId = this.dataset.productId;
      try {
        this.variantMetafields = JSON.parse(this.dataset.variantMetafields);
      } catch (e) {
        console.error(`[SkioBox-${this.rob_custom}] Error parsing variant metafields:`, e);
        this.variantMetafields = {};
      }

      this.skioData = null;
      this.selectedPurchaseType = 'subscription'; // 'subscription' or 'onetime'
      this.selectedQuantityTier = null; // e.g., 4 (for 4 bags)
      this.selectedVariants = {}; // { 'variantPlatformId': count }
      this.currencyCode = 'USD'; // Default, will be updated from API

      this.settings = {
        texts: {
          subscribeTitle: "{{ block.settings.subscribe_title | escape }}",
          oneTimeTitle: "{{ block.settings.one_time_title | escape }}",
          subscribeSaveBadge: "{{ block.settings.subscribe_save_badge_text | escape }}",
          freeShipping: "{{ block.settings.free_shipping_text | escape }}",
          noContract: "{{ block.settings.no_contract_text | escape }}",
          futureDiscount: "{{ block.settings.future_orders_discount_text | escape }}",
          outOfStock: "{{ block.settings.out_of_stock_protection_text | escape }}",
          selectFlavorsTitle: "{{ block.settings.select_flavors_title | escape }}",
          flavorToGoSingular: "{{ block.settings.flavor_to_go_text_singular | escape }}",
          flavorToGoPlural: "{{ block.settings.flavor_to_go_text_plural | escape }}",
          allSetText: "{{ block.settings.all_set_text | escape }}",
          addToCart: "{{ block.settings.add_to_cart_text | escape }}",
          selectMoreText: "{{ block.settings.select_more_text | escape }}",
          subtotalLabel: "{{ block.settings.subtotal_label | escape }}",
          originalPriceLabel: "{{ block.settings.original_price_label | escape }}",
          discountLabel: "{{ block.settings.discount_label | escape }}",
          totalLabel: "{{ block.settings.total_label | escape }}",
          savingsText: "{{ block.settings.savings_text | escape }}",
          seeLabelText: "{{ block.settings.see_label_text | escape }}",
          addLabel: "{{ block.settings.add_button_text | escape }}"
        }
      };
    }

    connectedCallback() {
      console.log(`[SkioBox-${this.rob_custom}] Custom element connected. Product ID: ${this.productId}`);
      if (!this.productId) {
        this.renderError("Product ID for Skio is not configured.");
        return;
      }
      this.fetchSkioData();
    }

    async fetchSkioData() {
      console.log(`[SkioBox-${this.rob_custom}] Fetching Skio data for product ID: ${this.productId}`);
      this.innerHTML = `<div class="loading-state-${this.rob_custom}">${ "{{ 'general.loading' | t }}" }</div>`;
      try {
        const response = await fetch('https://api.skio.com/storefront-http/get-dynamic-box', {
          method: 'POST',
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ "productPlatformId": [`gid://shopify/Product/${this.productId}`] })
        });
        console.log(`[SkioBox-${this.rob_custom}] API Response Status: ${response.status}`);
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ message: "Failed to parse error response" }));
          throw new Error(`API request failed with status ${response.status}: ${errorData.message || response.statusText}`);
        }
        this.skioData = await response.json();
        console.log(`[SkioBox-${this.rob_custom}] Skio API Data:`, this.skioData);

        if (this.skioData && this.skioData.ok && this.skioData.DynamicBox) {
          this.currencyCode = this.skioData.DynamicBox.currencyCode || 'USD';
          // Set default quantity tier to the first one if not set
          if (!this.selectedQuantityTier && this.skioData.DynamicBox.sizeInterval && this.skioData.DynamicBox.sizeInterval.length > 0) {
            this.selectedQuantityTier = this.skioData.DynamicBox.sizeInterval[0];
          }
           // Default purchase type based on schema
          this.selectedPurchaseType = "{{ block.settings.default_purchase_type }}";

          this.render();
        } else {
          throw new Error("Skio API response is not valid or 'DynamicBox' is missing.");
        }
      } catch (error) {
        console.error(`[SkioBox-${this.rob_custom}] Error fetching Skio data:`, error);
        this.renderError(`Error loading products: ${error.message}`);
      }
    }

    renderError(message) {
      this.innerHTML = `<div class="error-state-${this.rob_custom}">${message}</div>`;
    }

    formatPrice(amount, currencyCode) {
      try {
        return new Intl.NumberFormat(document.documentElement.lang || 'en-US', {
          style: 'currency',
          currency: currencyCode || this.currencyCode,
        }).format(amount);
      } catch (e) {
        // Fallback for invalid currency code or other errors
        return `${(amount || 0).toFixed(2)} ${currencyCode || this.currencyCode}`;
      }
    }

    getMetafield(variantShopifyId, field) {
        const numericShopifyId = variantShopifyId.includes('/') ? variantShopifyId.split('/').pop() : variantShopifyId;
        const meta = this.variantMetafields[numericShopifyId];
        if (meta && meta[field] !== undefined) {
            return meta[field];
        }
        // console.warn(`[SkioBox-${this.rob_custom}] Metafield ${field} not found for variant Shopify ID ${numericShopifyId}`);
        return '';
    }

    render() {
      const { DynamicBox } = this.skioData;
      if (!DynamicBox) {
        this.renderError("DynamicBox data is not available.");
        return;
      }

      const hasSubscriptionOption = DynamicBox.sellingPlanGroup && Object.keys(DynamicBox.sellingPlanGroup).length > 0;
      let subscriptionDiscountPercent = 0;
      if(hasSubscriptionOption) {
        const firstSellingPlanGroupKey = Object.keys(DynamicBox.sellingPlanGroup)[0];
        const firstSellingPlan = DynamicBox.sellingPlanGroup[firstSellingPlanGroupKey];
        if (firstSellingPlan && firstSellingPlan.priceAdjustmentType === 'PERCENTAGE') {
            subscriptionDiscountPercent = firstSellingPlan.priceAdjustmentAmount || 0;
        }
      }

      // Base prices for display
      const firstVariantPrice = DynamicBox.selectableProductVariants?.[0]?.productVariants?.[0]?.price || 0;
      const oneTimeDisplayPrice = this.formatPrice(firstVariantPrice * (this.selectedQuantityTier || 1));
      const subscriptionDisplayPrice = this.formatPrice(firstVariantPrice * (this.selectedQuantityTier || 1) * (1 - subscriptionDiscountPercent / 100));

      // Determine default selected quantity tier
      if (!this.selectedQuantityTier && DynamicBox.sizeInterval && DynamicBox.sizeInterval.length > 0) {
          this.selectedQuantityTier = DynamicBox.sizeInterval[0];
      }
      
      let html = `
        <div class="purchase-options-${this.rob_custom}">
          ${hasSubscriptionOption ? `
            <div class="purchase-option-${this.rob_custom} ${this.selectedPurchaseType === 'subscription' ? `selected-${this.rob_custom}` : ''}" data-type="subscription">
              <div class="purchase-option-header-${this.rob_custom}">
                <span class="purchase-option-title-${this.rob_custom}">${this.settings.texts.subscribeTitle}</span>
                <span class="purchase-option-price-${this.rob_custom}">
                  ${subscriptionDiscountPercent > 0 ? `<span class="original-price-${this.rob_custom}">${oneTimeDisplayPrice}</span>` : ''}
                  ${subscriptionDisplayPrice}
                  ${subscriptionDiscountPercent > 0 ? `<span class="discount-badge-${this.rob_custom}">${this.settings.texts.subscribeSaveBadge.replace('{discount}', subscriptionDiscountPercent)}</span>` : ''}
                </span>
              </div>
              <ul class="purchase-option-benefits-${this.rob_custom}">
                ${this.settings.texts.freeShipping ? `<li><svg viewBox="0 0 20 20"><path d="M7.5 15.5L2.5 10.5L4 9L7.5 12.5L16 4L17.5 5.5L7.5 15.5Z"/></svg> ${this.settings.texts.freeShipping}</li>` : ''}
                ${this.settings.texts.noContract ? `<li><svg viewBox="0 0 20 20"><path d="M7.5 15.5L2.5 10.5L4 9L7.5 12.5L16 4L17.5 5.5L7.5 15.5Z"/></svg> ${this.settings.texts.noContract}</li>` : ''}
                ${this.settings.texts.futureDiscount && subscriptionDiscountPercent > 0 ? `<li><svg viewBox="0 0 20 20"><path d="M7.5 15.5L2.5 10.5L4 9L7.5 12.5L16 4L17.5 5.5L7.5 15.5Z"/></svg> ${this.settings.texts.futureDiscount.replace('{discount}', subscriptionDiscountPercent)}</li>` : ''}
                ${this.settings.texts.outOfStock ? `<li><svg viewBox="0 0 20 20"><path d="M7.5 15.5L2.5 10.5L4 9L7.5 12.5L16 4L17.5 5.5L7.5 15.5Z"/></svg> ${this.settings.texts.outOfStock}</li>` : ''}
              </ul>
            </div>
          ` : ''}
          <div class="purchase-option-${this.rob_custom} ${this.selectedPurchaseType === 'onetime' ? `selected-${this.rob_custom}` : ''}" data-type="onetime">
            <div class="purchase-option-header-${this.rob_custom}">
              <span class="purchase-option-title-${this.rob_custom}">${this.settings.texts.oneTimeTitle}</span>
              <span class="purchase-option-price-${this.rob_custom}">${oneTimeDisplayPrice}</span>
            </div>
          </div>
        </div>

        <div class="quantity-tiers-${this.rob_custom}">
          ${DynamicBox.sizeInterval.map(tier => `
            <button class="quantity-tier-button-${this.rob_custom} ${this.selectedQuantityTier === tier ? `selected-${this.rob_custom}` : ''}" data-tier="${tier}">
              ${tier} ${tier === 1 ? "{{ 'products.product.bag_singular' | t: count: '' | trim }}" : "{{ 'products.product.bag_plural' | t: count: '' | trim }}"}
            </button>
          `).join('')}
        </div>

        <div class="flavors-header-${this.rob_custom}">
          <h2 class="flavors-title-${this.rob_custom}">${DynamicBox.settings.header || this.settings.texts.selectFlavorsTitle}</h2>
          <div class="flavors-to-go-${this.rob_custom}" id="flavors-to-go-status-${this.rob_custom}"></div>
        </div>

        <div class="variants-grid-${this.rob_custom}">
          ${DynamicBox.selectableProductVariants.flatMap(productGroup =>
            productGroup.productVariants.map(variant => {
              const selectedCount = this.selectedVariants[variant.platformId] || 0;
              const flavorDesc = this.getMetafield(variant.platformId, 'flavor_description');
              const price = this.getVariantPrice(variant.platformId);

              return `
                <div class="variant-card-${this.rob_custom}" data-variant-id="${variant.platformId}" data-product-group-title="${productGroup.productTitle}">
                  <div class="variant-image-container-${this.rob_custom}">
                    <img src="${variant.imageSrc || productGroup.productImageSrc || '{{ "product-1" | placeholder_svg_tag }}'}" alt="${variant.productVariantTitle}" class="variant-image-${this.rob_custom}" loading="lazy">
                  </div>
                  <h3 class="variant-title-${this.rob_custom}">${variant.productVariantTitle}</h3>
                  ${flavorDesc ? `<div class="variant-short-description-${this.rob_custom}">${this.stripHtml(flavorDesc).substring(0, 100)}${this.stripHtml(flavorDesc).length > 100 ? '...' : ''}</div>` : ''}
                  <div class="variant-controls-${this.rob_custom}">
                    <span class="variant-price-${this.rob_custom}">${this.formatPrice(price)}</span>
                    ${selectedCount > 0 ? `
                      <div class="quantity-control-${this.rob_custom}">
                        <button data-action="decrease" data-variant-id="${variant.platformId}">-</button>
                        <span>${selectedCount}</span>
                        <button data-action="increase" data-variant-id="${variant.platformId}">+</button>
                      </div>
                    ` : `
                      <button class="add-variant-button-${this.rob_custom}" data-action="add" data-variant-id="${variant.platformId}">${this.settings.texts.addLabel}</button>
                    `}
                  </div>
                </div>
              `;
            }).join('')
          ).join('')}
        </div>

        <div class="summary-section-${this.rob_custom}" id="summary-section-${this.rob_custom}" style="display: none;">
          <div class="summary-line-${this.rob_custom}">
            <span class="label-${this.rob_custom}">${this.settings.texts.originalPriceLabel}</span>
            <span class="value-${this.rob_custom}" id="original-price-${this.rob_custom}"></span>
          </div>
          <div class="summary-line-${this.rob_custom} discount-line-${this.rob_custom}" style="display: none;">
            <span class="label-${this.rob_custom}">${this.settings.texts.discountLabel}</span>
            <span class="value-${this.rob_custom}" id="discount-amount-${this.rob_custom}"></span>
          </div>
          <div class="summary-line-${this.rob_custom} total-line-${this.rob_custom}">
            <span class="label-${this.rob_custom}">${this.settings.texts.totalLabel}</span>
            <span class="value-${this.rob_custom}" id="final-price-${this.rob_custom}"></span>
          </div>
          <div class="summary-line-${this.rob_custom} savings-line-${this.rob_custom}" style="display: none;">
            <span class="label-${this.rob_custom}"></span>
            <span class="value-${this.rob_custom}" id="savings-amount-${this.rob_custom}"></span>
          </div>
        </div>

        <button class="add-to-cart-button-${this.rob_custom}" id="add-to-cart-button-${this.rob_custom}" disabled></button>

        ${this.renderModalStructure()}
      `;
      this.innerHTML = html;
      this.addEventListeners();
      this.updateUI();
    }
    
    stripHtml(html) {
      let tmp = document.createElement("DIV");
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText || "";
    }


    renderModalStructure() {
      return `
        <div class="modal-overlay-${this.rob_custom}" id="variant-modal-overlay-${this.rob_custom}">
          <div class="modal-content-${this.rob_custom}">
            <button class="modal-close-button-${this.rob_custom}" aria-label="Close modal">×</button>
            <img src="" alt="" class="modal-image-${this.rob_custom}" id="modal-variant-image-${this.rob_custom}">
            <div class="modal-badges-${this.rob_custom}" id="modal-variant-badges-${this.rob_custom}"></div>
            <h2 class="modal-product-title-${this.rob_custom}" id="modal-product-title-${this.rob_custom}"></h2>
            <h3 class="modal-flavor-title-${this.rob_custom}" id="modal-flavor-title-${this.rob_custom}"></h3>
            <div class="modal-description-${this.rob_custom}" id="modal-variant-description-${this.rob_custom}"></div>
            <div class="accordion-${this.rob_custom}">
              <div class="accordion-header-${this.rob_custom}" id="accordion-header-nutrition-${this.rob_custom}">
                <span>${this.settings.texts.seeLabelText}</span>
                <span class="arrow-${this.rob_custom}">▼</span>
              </div>
              <div class="accordion-content-${this.rob_custom}" id="accordion-content-nutrition-${this.rob_custom}">
                <div id="modal-nutrition-info-${this.rob_custom}"></div>
              </div>
            </div>
          </div>
        </div>`;
    }

    addEventListeners() {
      // Purchase Type Selection
      this.querySelectorAll(`.purchase-option-${this.rob_custom}`).forEach(el => {
        el.addEventListener('click', (e) => {
          this.selectedPurchaseType = e.currentTarget.dataset.type;
          console.log(`[SkioBox-${this.rob_custom}] Purchase type changed to: ${this.selectedPurchaseType}`);
          this.render(); // Re-render to update pricing and selections potentially
        });
      });

      // Quantity Tier Selection
      this.querySelectorAll(`.quantity-tier-button-${this.rob_custom}`).forEach(button => {
        button.addEventListener('click', (e) => {
          this.selectedQuantityTier = parseInt(e.currentTarget.dataset.tier);
          console.log(`[SkioBox-${this.rob_custom}] Quantity tier selected: ${this.selectedQuantityTier}`);
          this.querySelectorAll(`.quantity-tier-button-${this.rob_custom}`).forEach(btn => btn.classList.remove(`selected-${this.rob_custom}`));
          e.currentTarget.classList.add(`selected-${this.rob_custom}`);
          this.updateUI();
        });
      });

      // Variant Card Clicks (Add, Increase, Decrease, Open Modal)
      this.querySelectorAll(`.variant-card-${this.rob_custom}`).forEach(card => {
        card.addEventListener('click', (e) => {
            // If click is on a button, let button handler take over
            if (e.target.closest('button')) return;
            const variantId = card.dataset.variantId;
            const productGroupTitle = card.dataset.productGroupTitle;
            this.openModal(variantId, productGroupTitle);
        });

        card.querySelectorAll('button[data-action]').forEach(button => {
          button.addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent card click (modal open)
            const action = e.currentTarget.dataset.action;
            const variantId = e.currentTarget.dataset.variantId;
            this.handleVariantQuantityChange(variantId, action);
          });
        });
      });

      // Modal Close
      this.querySelector(`#variant-modal-overlay-${this.rob_custom}`)?.addEventListener('click', (e) => {
        if (e.target.id === `variant-modal-overlay-${this.rob_custom}` || e.target.classList.contains(`modal-close-button-${this.rob_custom}`)) {
          this.closeModal();
        }
      });
      this.querySelector(`.modal-close-button-${this.rob_custom}`)?.addEventListener('click', () => this.closeModal());
      
      // Accordion
      this.querySelector(`#accordion-header-nutrition-${this.rob_custom}`)?.addEventListener('click', (e) => {
        const header = e.currentTarget;
        const content = this.querySelector(`#accordion-content-nutrition-${this.rob_custom}`);
        header.classList.toggle(`active-${this.rob_custom}`);
        content.classList.toggle(`active-${this.rob_custom}`);
        content.style.display = content.classList.contains(`active-${this.rob_custom}`) ? 'block' : 'none';
      });

      // Add to Cart
      this.querySelector(`#add-to-cart-button-${this.rob_custom}`)?.addEventListener('click', () => this.addToCart());
    }

    handleVariantQuantityChange(variantId, action) {
      let currentCount = this.selectedVariants[variantId] || 0;
      if (action === 'add' || action === 'increase') {
        currentCount++;
      } else if (action === 'decrease') {
        currentCount = Math.max(0, currentCount - 1);
      }

      if (currentCount === 0) {
        delete this.selectedVariants[variantId];
      } else {
        this.selectedVariants[variantId] = currentCount;
      }
      console.log(`[SkioBox-${this.rob_custom}] Variant ${variantId} quantity updated to ${currentCount}. Selected variants:`, this.selectedVariants);
      this.updateVariantCardUI(variantId);
      this.updateUI();
    }

    updateVariantCardUI(variantId) {
        const card = this.querySelector(`.variant-card-${this.rob_custom}[data-variant-id="${variantId}"]`);
        if (!card) return;

        const controlsContainer = card.querySelector(`.variant-controls-${this.rob_custom}`);
        const currentCount = this.selectedVariants[variantId] || 0;
        const price = this.getVariantPrice(variantId);

        let controlsHTML;
        if (currentCount > 0) {
            controlsHTML = `
                <span class="variant-price-${this.rob_custom}">${this.formatPrice(price)}</span>
                <div class="quantity-control-${this.rob_custom}">
                    <button data-action="decrease" data-variant-id="${variantId}">-</button>
                    <span>${currentCount}</span>
                    <button data-action="increase" data-variant-id="${variantId}">+</button>
                </div>`;
        } else {
            controlsHTML = `
                <span class="variant-price-${this.rob_custom}">${this.formatPrice(price)}</span>
                <button class="add-variant-button-${this.rob_custom}" data-action="add" data-variant-id="${variantId}">${this.settings.texts.addLabel}</button>`;
        }
        controlsContainer.innerHTML = controlsHTML;

        // Re-attach event listeners for new controls
        controlsContainer.querySelectorAll('button[data-action]').forEach(button => {
            button.addEventListener('click', (e) => {
                e.stopPropagation();
                const action = e.currentTarget.dataset.action;
                const id = e.currentTarget.dataset.variantId;
                this.handleVariantQuantityChange(id, action);
            });
        });
    }

    getVariantPrice(variantPlatformId) {
      const { DynamicBox } = this.skioData;
      const variantData = DynamicBox.selectableProductVariants
        .flatMap(pg => pg.productVariants)
        .find(v => v.platformId === variantPlatformId);

      if (!variantData) return 0;

      if (this.selectedPurchaseType === 'subscription') {
        const sellingPlanGroupKey = Object.keys(DynamicBox.sellingPlanGroup)[0]; // Assumes one selling plan group
        if (sellingPlanGroupKey) {
            const plan = DynamicBox.sellingPlanGroup[sellingPlanGroupKey];
            if (plan.variantMapping && plan.variantMapping[variantPlatformId]) {
                return plan.variantMapping[variantPlatformId].adjustedPrice;
            }
        }
      }
      return variantData.price;
    }

    calculatePrices() {
      const totalSelectedItems = Object.values(this.selectedVariants).reduce((sum, count) => sum + count, 0);
      if (totalSelectedItems === 0) {
        return { originalPrice: 0, finalPrice: 0, discountAmount: 0, totalSavings: 0, discountPercent: 0 };
      }

      let originalPrice = 0;
      Object.entries(this.selectedVariants).forEach(([variantId, count]) => {
        const price = this.getVariantPrice(variantId);
        originalPrice += price * count;
      });
      
      let discountPercent = 0;
      const { percentDiscountTier, fixedDiscountTier } = this.skioData.DynamicBox;

      if (percentDiscountTier && percentDiscountTier[this.selectedQuantityTier.toString()]) {
          discountPercent = parseFloat(percentDiscountTier[this.selectedQuantityTier.toString()]) || 0;
      }
      // Note: fixedDiscountTier logic might be needed if it's used. For now, focusing on percentDiscountTier.

      const discountAmount = originalPrice * (discountPercent / 100);
      const finalPrice = originalPrice - discountAmount;
      
      // Calculate total savings if it's a subscription
      let oneTimePriceForAllItems = 0;
      if (this.selectedPurchaseType === 'subscription') {
        Object.entries(this.selectedVariants).forEach(([variantId, count]) => {
          const variantData = this.skioData.DynamicBox.selectableProductVariants
            .flatMap(pg => pg.productVariants)
            .find(v => v.platformId === variantId);
          if (variantData) {
            oneTimePriceForAllItems += variantData.price * count;
          }
        });
      }
      const totalSavings = this.selectedPurchaseType === 'subscription' ? oneTimePriceForAllItems - finalPrice : discountAmount;


      console.log(`[SkioBox-${this.rob_custom}] Pricing: Original: ${originalPrice}, Discount %: ${discountPercent}, Discount Amount: ${discountAmount}, Final: ${finalPrice}, Total Savings: ${totalSavings}`);
      return { originalPrice, finalPrice, discountAmount, totalSavings, discountPercent };
    }

    updateUI() {
      if (!this.skioData || !this.skioData.DynamicBox) return;

      const totalSelectedItems = Object.values(this.selectedVariants).reduce((sum, count) => sum + count, 0);
      const remainingItems = this.selectedQuantityTier - totalSelectedItems;

      // Flavors to Go Status
      const statusEl = this.querySelector(`#flavors-to-go-status-${this.rob_custom}`);
      if (statusEl) {
        if (remainingItems > 0) {
          const text = remainingItems === 1 ? this.settings.texts.flavorToGoSingular : this.settings.texts.flavorToGoPlural;
          statusEl.textContent = text.replace('{count}', remainingItems);
        } else {
          statusEl.textContent = this.settings.texts.allSetText;
        }
      }

      // Add to Cart Button
      const cartButton = this.querySelector(`#add-to-cart-button-${this.rob_custom}`);
      if (cartButton) {
        if (totalSelectedItems >= this.selectedQuantityTier) {
          cartButton.textContent = this.settings.texts.addToCart;
          cartButton.disabled = false;
          cartButton.classList.remove(`disabled-${this.rob_custom}`);
          cartButton.classList.add(`enabled-${this.rob_custom}`);
        } else {
          cartButton.textContent = this.settings.texts.selectMoreText.replace('{count}', remainingItems);
          cartButton.disabled = true;
          cartButton.classList.remove(`enabled-${this.rob_custom}`);
          cartButton.classList.add(`disabled-${this.rob_custom}`);
        }
      }

      // Summary Section
      const summarySection = this.querySelector(`#summary-section-${this.rob_custom}`);
      const originalPriceEl = this.querySelector(`#original-price-${this.rob_custom}`);
      const discountAmountEl = this.querySelector(`#discount-amount-${this.rob_custom}`);
      const finalPriceEl = this.querySelector(`#final-price-${this.rob_custom}`);
      const savingsAmountEl = this.querySelector(`#savings-amount-${this.rob_custom}`);
      const discountLineEl = this.querySelector(`.discount-line-${this.rob_custom}`);
      const savingsLineEl = this.querySelector(`.savings-line-${this.rob_custom}`);


      if (totalSelectedItems >= this.selectedQuantityTier) {
        const { originalPrice, finalPrice, discountAmount, totalSavings, discountPercent } = this.calculatePrices();
        if (summarySection) summarySection.style.display = 'block';
        if (originalPriceEl) originalPriceEl.textContent = this.formatPrice(originalPrice);
        if (discountAmountEl && discountLineEl) {
            if (discountAmount > 0) {
                discountAmountEl.textContent = `- ${this.formatPrice(discountAmount)} (${discountPercent}%)`;
                discountLineEl.style.display = 'flex';
            } else {
                discountLineEl.style.display = 'none';
            }
        }
        if (finalPriceEl) finalPriceEl.textContent = this.formatPrice(finalPrice);

        if (savingsAmountEl && savingsLineEl) {
          if (totalSavings > 0) {
              savingsAmountEl.textContent = this.settings.texts.savingsText.replace('{amount}', this.formatPrice(totalSavings));
              savingsLineEl.style.display = 'flex';
          } else {
              savingsLineEl.style.display = 'none';
          }
        }

      } else {
        if (summarySection) summarySection.style.display = 'none';
      }
    }

    openModal(variantPlatformId, productGroupTitle) {
      const { DynamicBox } = this.skioData;
      const variantData = DynamicBox.selectableProductVariants
        .flatMap(pg => pg.productVariants)
        .find(v => v.platformId === variantPlatformId);

      if (!variantData) {
        console.error(`[SkioBox-${this.rob_custom}] Variant data not found for modal: ${variantPlatformId}`);
        return;
      }

      this.querySelector(`#modal-variant-image-${this.rob_custom}`).src = variantData.imageSrc || '{{ "product-1" | placeholder_svg_tag }}';
      this.querySelector(`#modal-variant-image-${this.rob_custom}`).alt = variantData.productVariantTitle;
      
      this.querySelector(`#modal-product-title-${this.rob_custom}`).textContent = productGroupTitle;
      this.querySelector(`#modal-flavor-title-${this.rob_custom}`).textContent = `Flavor: ${variantData.productVariantTitle}`;
      
      const description = this.getMetafield(variantData.platformId, 'flavor_description');
      this.querySelector(`#modal-variant-description-${this.rob_custom}`).innerHTML = description; // Assumes description might be HTML

      // Badges
      const badgesContainer = this.querySelector(`#modal-variant-badges-${this.rob_custom}`);
      badgesContainer.innerHTML = ''; // Clear previous badges
      const servings = this.getMetafield(variantData.platformId, 'servings');
      const variantFlag = this.getMetafield(variantData.platformId, 'variant_flag');
      const servingsColor = this.getMetafield(variantData.platformId, 'primary_color');
      const flagColor = this.getMetafield(variantData.platformId, 'secondary_color');

      if (servings) {
        const badge = document.createElement('span');
        badge.className = `modal-badge-${this.rob_custom}`;
        badge.textContent = servings;
        badge.style.backgroundColor = servingsColor;
        badgesContainer.appendChild(badge);
      }
      if (variantFlag) {
        const badge = document.createElement('span');
        badge.className = `modal-badge-${this.rob_custom}`;
        badge.textContent = variantFlag;
        badge.style.backgroundColor = flagColor;
        badgesContainer.appendChild(badge);
      }
      
      // Nutrition Info
      const nutritionInfo = this.getMetafield(variantData.platformId, 'nutritional_information');
      const nutritionEl = this.querySelector(`#modal-nutrition-info-${this.rob_custom}`);
      if (nutritionInfo.startsWith('http') && (nutritionInfo.includes('.png') || nutritionInfo.includes('.jpg') || nutritionInfo.includes('.jpeg') || nutritionInfo.includes('.gif') || nutritionInfo.includes('.svg'))) {
          nutritionEl.innerHTML = `<img src="${nutritionInfo}" alt="Nutrition Information">`;
      } else {
          nutritionEl.innerHTML = nutritionInfo; // Assumes HTML content
      }

      // Reset accordion state
      this.querySelector(`#accordion-header-nutrition-${this.rob_custom}`)?.classList.remove(`active-${this.rob_custom}`);
      const accordionContent = this.querySelector(`#accordion-content-nutrition-${this.rob_custom}`);
      if (accordionContent) {
        accordionContent.classList.remove(`active-${this.rob_custom}`);
        accordionContent.style.display = 'none';
      }
      
      this.querySelector(`#variant-modal-overlay-${this.rob_custom}`).classList.add(`visible-${this.rob_custom}`);
      document.body.style.overflow = 'hidden'; // Prevent background scroll
      console.log(`[SkioBox-${this.rob_custom}] Modal opened for variant: ${variantPlatformId}`);
    }

    closeModal() {
      this.querySelector(`#variant-modal-overlay-${this.rob_custom}`).classList.remove(`visible-${this.rob_custom}`);
      document.body.style.overflow = ''; // Restore background scroll
      console.log(`[SkioBox-${this.rob_custom}] Modal closed.`);
    }

    async addToCart() {
      console.log(`[SkioBox-${this.rob_custom}] Add to cart initiated.`);
      const items = [];
      Object.entries(this.selectedVariants).forEach(([variantPlatformId, quantity]) => {
        if (quantity > 0) {
          const numericVariantId = variantPlatformId.split('/').pop();
          const item = {
            id: numericVariantId,
            quantity: quantity
          };

          if (this.selectedPurchaseType === 'subscription') {
            const { DynamicBox } = this.skioData;
            const sellingPlanGroupKey = Object.keys(DynamicBox.sellingPlanGroup)[0]; // Assuming one selling plan group
            if (sellingPlanGroupKey) {
                const planGroup = DynamicBox.sellingPlanGroup[sellingPlanGroupKey];
                // Find the selling plan ID specific to this variant within the group
                if (planGroup.variantMapping && planGroup.variantMapping[variantPlatformId] && planGroup.variantMapping[variantPlatformId].planId) {
                    item.selling_plan = planGroup.variantMapping[variantPlatformId].planId.split('/').pop();
                } else if (planGroup.allMatch && planGroup.planId) { // Fallback if all variants use the same planId directly on group (not typical for Skio dynamic)
                    item.selling_plan = planGroup.planId.split('/').pop();
                } else {
                     console.warn(`[SkioBox-${this.rob_custom}] Selling plan ID not found for variant ${variantPlatformId} in group ${sellingPlanGroupKey}. Adding as one-time.`);
                }
            } else {
                console.warn(`[SkioBox-${this.rob_custom}] No selling plan group found, adding as one-time purchase.`);
            }

          }
          items.push(item);
        }
      });

      if (items.length === 0) {
        console.warn(`[SkioBox-${this.rob_custom}] No items to add to cart.`);
        return;
      }

      console.log(`[SkioBox-${this.rob_custom}] Cart items payload:`, { items });

      try {
        const response = await fetch(`${routes.cart_add_url}.js`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: items })
        });
        const cartData = await response.json();
        console.log(`[SkioBox-${this.rob_custom}] Add to cart response:`, cartData);
        if (response.ok) {
          // Optionally redirect or update cart icon
          // window.location.href = '/cart'; // Or use theme's cart drawer
           PubSub.publish('cart:updated', { cart: cartData, source: `skio-dynamic-box-${this.rob_custom}` }); // For cart drawers
           if ("{{ block.settings.redirect_to_cart }}" === "true") {
             window.location.href = routes.cart_url;
           }
        } else {
          alert(`Error adding to cart: ${cartData.description || cartData.message || 'Unknown error'}`);
        }
      } catch (error) {
        console.error(`[SkioBox-${this.rob_custom}] Error adding to cart via AJAX:`, error);
        alert('Failed to add items to cart. Please try again.');
      }
    }
  }
  customElements.define('dynamic-box-builder-{{ rob_custom }}', DynamicBoxBuilder{{ rob_custom }});
</script>

{% schema %}
{
  "name": "Skio Dynamic Box",
  "tag": "section",
  "class": "shopify-section-skio-dynamic-box",
  "settings": [
    {
      "type": "header",
      "content": "Skio Product Configuration"
    },
    {
      "type": "product",
      "id": "product_for_skio",
      "label": "Skio Dynamic Box Product",
      "info": "Select the main Shopify product associated with this Skio Dynamic Box."
    },
    {
      "type": "header",
      "content": "Purchase Options"
    },
    {
      "type": "select",
      "id": "default_purchase_type",
      "label": "Default Purchase Type",
      "options": [
        { "value": "subscription", "label": "Subscription" },
        { "value": "onetime", "label": "One-Time Purchase" }
      ],
      "default": "subscription",
      "info": "Select which purchase option is highlighted by default."
    },
    {
      "type": "text",
      "id": "subscribe_title",
      "label": "Subscription Option Title",
      "default": "Subscribe & Save"
    },
    {
      "type": "text",
      "id": "one_time_title",
      "label": "One-Time Purchase Title",
      "default": "One-time Purchase"
    },
    {
      "type": "text",
      "id": "subscribe_save_badge_text",
      "label": "Subscribe & Save Badge Text",
      "default": "SAVE {discount}%",
      "info": "{discount} will be replaced by the actual discount percentage."
    },
    {
      "type": "text",
      "id": "free_shipping_text",
      "label": "Benefit: Free Shipping",
      "default": "FREE SHIPPING on first order"
    },
    {
      "type": "text",
      "id": "no_contract_text",
      "label": "Benefit: No Contract",
      "default": "NO CONTRACT cancel easily"
    },
    {
      "type": "text",
      "id": "future_orders_discount_text",
      "label": "Benefit: Future Orders Discount",
      "default": "{discount}% OFF future orders"
    },
    {
      "type": "text",
      "id": "out_of_stock_protection_text",
      "label": "Benefit: Out of Stock Protection",
      "default": "OUT OF STOCK PROTECTION"
    },
    {
      "type": "header",
      "content": "Flavor Selection UI Texts"
    },
    {
      "type": "text",
      "id": "select_flavors_title",
      "label": "Select Flavors Title",
      "default": "SELECT FLAVORS"
    },
    {
      "type": "text",
      "id": "flavor_to_go_text_singular",
      "label": "'Flavor to Go' Text (Singular)",
      "default": "{count} Flavor to Go"
    },
    {
      "type": "text",
      "id": "flavor_to_go_text_plural",
      "label": "'Flavors to Go' Text (Plural)",
      "default": "{count} Flavors to Go"
    },
    {
      "type": "text",
      "id": "all_set_text",
      "label": "'All Set!' Text",
      "default": "All Set! (You can add more)"
    },
    {
        "type": "text",
        "id": "add_button_text",
        "label": "Add Button Text (Variant Card)",
        "default": "Add +"
    },
    {
      "type": "header",
      "content": "Add to Cart Button Texts"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to Cart Text (Enabled)",
      "default": "ADD TO CART"
    },
    {
      "type": "text",
      "id": "select_more_text",
      "label": "Select More Text (Disabled)",
      "default": "SELECT {count} MORE BAGS"
    },
    {
        "type": "checkbox",
        "id": "redirect_to_cart",
        "label": "Redirect to cart after adding",
        "default": false
    },
    {
      "type": "header",
      "content": "Summary Section Texts"
    },
    {
      "type": "text",
      "id": "original_price_label",
      "label": "Original Price Label",
      "default": "Original Price:"
    },
    {
      "type": "text",
      "id": "discount_label",
      "label": "Discount Label",
      "default": "Quantity Discount:"
    },
    {
      "type": "text",
      "id": "total_label",
      "label": "Total Label",
      "default": "Total:"
    },
    {
      "type": "text",
      "id": "savings_text",
      "label": "Savings Text (Subscription)",
      "default": "You're saving {amount}!"
    },
    {
      "type": "header",
      "content": "Modal Texts"
    },
    {
      "type": "text",
      "id": "see_label_text",
      "label": "'See Label' Accordion Text",
      "default": "SEE LABEL"
    },
    {
      "type": "header",
      "content": "Color Settings"
    },
    {
      "type": "color",
      "id": "section_bg_color",
      "label": "Section Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "primary_text_color",
      "label": "Primary Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "secondary_text_color",
      "label": "Secondary Text Color",
      "default": "#777777"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border Color",
      "default": "#DDDDDD"
    },
    {
      "type": "color",
      "id": "checkmark_color",
      "label": "Benefit Checkmark Color",
      "default": "#4CAF50"
    },
    {
      "type": "color",
      "id": "discount_badge_bg",
      "label": "Discount Badge Background",
      "default": "#4CAF50"
    },
    {
      "type": "color",
      "id": "discount_badge_text",
      "label": "Discount Badge Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "purchase_option_bg_default",
      "label": "Purchase Option BG (Default)",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "purchase_option_text_default",
      "label": "Purchase Option Text (Default)",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "purchase_option_bg_selected",
      "label": "Purchase Option BG (Selected)",
      "default": "#F0F8FF"
    },
    {
      "type": "color",
      "id": "purchase_option_text_selected",
      "label": "Purchase Option Text (Selected)",
      "default": "#007BFF"
    },
    {
      "type": "color",
      "id": "purchase_option_border_selected",
      "label": "Purchase Option Border (Selected)",
      "default": "#007BFF"
    },
    {
      "type": "color",
      "id": "qty_btn_bg_default",
      "label": "Quantity Button BG (Default)",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "qty_btn_text_default",
      "label": "Quantity Button Text (Default)",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "qty_btn_border_default",
      "label": "Quantity Button Border (Default)",
      "default": "#CCCCCC"
    },
    {
      "type": "color",
      "id": "qty_btn_bg_selected",
      "label": "Quantity Button BG (Selected)",
      "default": "#007BFF"
    },
    {
      "type": "color",
      "id": "qty_btn_text_selected",
      "label": "Quantity Button Text (Selected)",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "qty_btn_border_selected",
      "label": "Quantity Button Border (Selected)",
      "default": "#007BFF"
    },
    {
      "type": "color",
      "id": "flavors_to_go_bg",
      "label": "'Flavors To Go' Badge BG",
      "default": "#EFEFEF"
    },
    {
      "type": "color",
      "id": "variant_card_bg",
      "label": "Variant Card Background",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "variant_card_text_color",
      "label": "Variant Card Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "variant_add_button_bg",
      "label": "Variant 'Add' Button BG",
      "default": "#007BFF"
    },
    {
      "type": "color",
      "id": "variant_add_button_text_color",
      "label": "Variant 'Add' Button Text",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "variant_quantity_button_bg",
      "label": "Variant Quantity Control BG",
      "default": "#F0F0F0"
    },
    {
      "type": "color",
      "id": "variant_quantity_text_color",
      "label": "Variant Quantity Control Text",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "savings_text_color",
      "label": "Savings Text Color",
      "default": "#28a745"
    },
    {
      "type": "color",
      "id": "add_to_cart_bg_enabled",
      "label": "Add to Cart BG (Enabled)",
      "default": "#28a745"
    },
    {
      "type": "color",
      "id": "add_to_cart_text_color_enabled",
      "label": "Add to Cart Text (Enabled)",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "add_to_cart_bg_disabled",
      "label": "Add to Cart BG (Disabled)",
      "default": "#DDDDDD"
    },
    {
      "type": "color",
      "id": "add_to_cart_text_color_disabled",
      "label": "Add to Cart Text (Disabled)",
      "default": "#AAAAAA"
    },
    {
      "type": "header",
      "content": "Modal Styling"
    },
    {
      "type": "color",
      "id": "modal_bg_color",
      "label": "Modal Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "modal_text_color",
      "label": "Modal Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "modal_badge_font_color",
      "label": "Modal Badge Font Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "modal_close_button_color",
      "label": "Modal Close Button Color",
      "default": "#888888"
    },
    {
      "type": "color",
      "id": "accordion_header_bg",
      "label": "Accordion Header Background",
      "default": "#F5F5F5"
    },
    {
      "type": "color",
      "id": "accordion_header_text_color",
      "label": "Accordion Header Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "accordion_content_bg",
      "label": "Accordion Content Background",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "Layout & Spacing"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "label": "Section Padding Top",
      "min": 0, "max": 100, "step": 2, "unit": "px", "default": 40
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "label": "Section Padding Bottom",
      "min": 0, "max": 100, "step": 2, "unit": "px", "default": 40
    },
    {
      "type": "range",
      "id": "section_padding_x",
      "label": "Section Horizontal Padding",
      "min": 0, "max": 50, "step": 2, "unit": "px", "default": 20
    },
    {
      "type": "range",
      "id": "variant_gap",
      "label": "Gap Between Variant Cards",
      "min": 0, "max": 40, "step": 2, "unit": "px", "default": 20
    },
    {
      "type": "range",
      "id": "border_radius", "label": "General Border Radius",
      "min": 0, "max": 25, "step": 1, "unit": "px", "default": 8
    },
    {
      "type": "range",
      "id": "border_radius_sm", "label": "Small Border Radius",
      "min": 0, "max": 20, "step": 1, "unit": "px", "default": 4
    },
    {
      "type": "range",
      "id": "border_radius_lg", "label": "Large Border Radius",
      "min": 0, "max": 30, "step": 1, "unit": "px", "default": 12
    },
    {
      "type": "range",
      "id": "border_radius_pill", "label": "Pill Border Radius",
      "min": 0, "max": 50, "step": 1, "unit": "px", "default": 25
    },
    {
      "type": "range",
      "id": "spacing_xxs", "label": "Spacing Unit (XXS)",
      "min": 0, "max": 20, "step": 1, "unit": "px", "default": 4
    },
    {
      "type": "range",
      "id": "spacing_xs", "label": "Spacing Unit (XS)",
      "min": 0, "max": 20, "step": 1, "unit": "px", "default": 8
    },
    {
      "type": "range",
      "id": "spacing_sm", "label": "Spacing Unit (SM)",
      "min": 0, "max": 30, "step": 1, "unit": "px", "default": 12
    },
    {
      "type": "range",
      "id": "spacing_md", "label": "Spacing Unit (MD)",
      "min": 0, "max": 40, "step": 1, "unit": "px", "default": 16
    },
    {
      "type": "range",
      "id": "spacing_lg", "label": "Spacing Unit (LG)",
      "min": 0, "max": 60, "step": 1, "unit": "px", "default": 24
    },
    {
      "type": "range",
      "id": "spacing_xl", "label": "Spacing Unit (XL)",
      "min": 0, "max": 80, "step": 1, "unit": "px", "default": 32
    },
    {
      "type": "header",
      "content": "Font Sizes"
    },
    {
      "type": "range",
      "id": "font_size_xs", "label": "Font Size (XS)",
      "min": 8, "max": 20, "step": 1, "unit": "px", "default": 12
    },
    {
      "type": "range",
      "id": "font_size_sm", "label": "Font Size (SM)",
      "min": 10, "max": 24, "step": 1, "unit": "px", "default": 14
    },
    {
      "type": "range",
      "id": "font_size_md", "label": "Font Size (MD)",
      "min": 12, "max": 28, "step": 1, "unit": "px", "default": 16
    },
    {
      "type": "range",
      "id": "font_size_lg", "label": "Font Size (LG)",
      "min": 14, "max": 36, "step": 1, "unit": "px", "default": 18
    },
    {
      "type": "range",
      "id": "font_size_xl", "label": "Font Size (XL)",
      "min": 16, "max": 48, "step": 1, "unit": "px", "default": 24
    },
    {
      "type": "range",
      "id": "font_size_xxl", "label": "Font Size (XXL)",
      "min": 20, "max": 60, "step": 1, "unit": "px", "default": 28
    },
    {
        "type": "header",
        "content": "Button Paddings"
    },
    {
      "type": "range",
      "id": "qty_btn_padding_y", "label": "Qty Button Padding Y",
      "min": 4, "max": 20, "step": 1, "unit": "px", "default": 10
    },
    {
      "type": "range",
      "id": "qty_btn_padding_x", "label": "Qty Button Padding X",
      "min": 4, "max": 30, "step": 1, "unit": "px", "default": 15
    },
    {
      "type": "range",
      "id": "cart_btn_padding_y", "label": "Cart Button Padding Y",
      "min": 8, "max": 24, "step": 1, "unit": "px", "default": 14
    },
    {
      "type": "range",
      "id": "cart_btn_padding_x", "label": "Cart Button Padding X",
      "min": 8, "max": 40, "step": 1, "unit": "px", "default": 20
    }
  ],
  "presets": [
    {
      "name": "Skio Dynamic Box"
    }
  ]
}
{% endschema %}