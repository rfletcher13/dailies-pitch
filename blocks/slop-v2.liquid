{%- comment -%}
  IMPORTANT: This block relies on variant metafields. For the metafields to be accessible,
  this block should ideally be used on a Shopify Product Page template, and the
  'Product GID for Skio API' setting below should be configured to match the GID of the
  product being viewed on that page (e.g., by setting its default to {{ product.admin_graphql_api_id }}
  if your theme makes 'product' available, or manually pasting the GID).
  If product.admin_graphql_api_id is not available, use product.id and construct the GID.
  The GID format is "gid://shopify/Product/{{ product.id }}".

  The variant metafields required are:
  - {{ block.settings.flavor_description_metafield }}
  - {{ block.settings.nutritional_info_metafield }}
  - {{ block.settings.variant_flag_metafield }}
  - {{ block.settings.servings_metafield }}
  - {{ block.settings.primary_color_metafield }} (for badge background)
  - {{ block.settings.secondary_color_metafield }} (for badge background)
{%- endcomment -%}
{%- doc -%}
  @prompt
  The user wants a Shopify Liquid block for a "Build a Box" feature, similar to the provided images.
  The block should integrate with Skio's dynamic box API.

  Functional Requirements:
  1.  **Skio API Integration**:
      *   Fetch dynamic box data from 'https://api.skio.com/storefront-http/get-dynamic-box' using POST.
      *   The request body needs `productPlatformId`, which will be a Shopify Product GID provided via theme customizer.
  2.  **Quantity Tier Selection**:
      *   Display quantity options based on `sizeInterval` from the API response (e.g., 1 Bag, 2 Bags, 3 Bags, 4 Bags).
      *   A selected quantity tier determines the target number of items for the box.
  3.  **Product Variant Selection**:
      *   Display selectable product variants from `selectableProductVariants` in the API response.
      *   Each variant card should show: Image (`productImageSrc` or `productVariants[].imageSrc`), Title (`productTitle` or `productVariants[].productVariantTitle`).
      *   Users can add/remove variants to/from their box. Each variant added has a quantity, adjustable with +/- buttons.
      *   The total quantity of items added across all variants should be tracked.
  4.  **Pricing & Discounts**:
      *   Base prices for variants come from `productVariants[].price`.
      *   When a quantity tier is selected, the price should reflect the discount from `percentDiscountTier` in the API response.
      *   Display original price, discounted price, and total savings. These should update dynamically.
      *   Subtotal and savings display should only be visible when the required quantity of items is met or exceeded.
      *   (Extended from images) Include a "Subscribe & Save" vs "One-Time Purchase" toggle. S&S prices use `sellingPlanGroup` data from API. Quantity discounts apply on top of the selected purchase type's price.
  5.  **Modal Display**:
      *   Clicking a variant (or an info button on it) opens a modal with more details.
      *   Modal content:
          *   Variant Image.
          *   Variant Title & Flavor (e.g., Tiramisu).
          *   Detailed Description: From variant metafield `custom.flavor_description`.
          *   Badges: From variant metafields `custom.variant_flag` and `custom.servings`.
              *   Badge Background Colors: From variant metafields `custom.primary_color` and `custom.secondary_color`.
              *   Badge Font Color: From theme customizer setting.
          *   "SEE LABEL" Accordion: Expands to show Nutrition Facts panel, content from variant metafield `custom.nutritional_information`.
  6.  **Add to Cart Logic**:
      *   Button is initially disabled. Text indicates how many more items are needed (e.g., "SELECT X MORE BAGS").
      *   Button color changes for disabled/enabled state.
      *   Button is enabled when `total items in box >= selected quantity tier`. Text changes to "ADD TO CART".
      *   Clicking "ADD TO CART" should add the configured box (selected variants and their quantities) to the Shopify cart.
  7.  **Dynamic UI Updates**:
      *   A message like "X Flavor(s) to Go" should update as users add/remove items, relative to the selected quantity tier.
  8.  **Metafield Dependencies**:
      *   Variant Description: `custom.flavor_description` (configurable ID)
      *   Nutrition Facts: `custom.nutritional_information` (configurable ID)
      *   Badge 1 (e.g., caffeine/protein): `custom.variant_flag` (configurable ID)
      *   Badge 2 (e.g., servings): `custom.servings` (configurable ID)
      *   Badge 1 BG Color: `custom.primary_color` (configurable ID)
      *   Badge 2 BG Color: `custom.secondary_color` (configurable ID)

  Styling Considerations:
  *   Replicate the visual style of the provided images.
  *   All colors, fonts, spacing should be highly customizable via theme settings.
  *   Responsive design.

  UX Specifications:
  *   Clear visual feedback for selections and state changes.
  *   Modal for detailed variant information without leaving the page.
  *   Interactive "Add to Cart" button.

  Structure and Technical Requirements:
  *   Single self-contained .liquid file.
  *   Adherence to specified output structure: Doc Block, Unique ID, Global Liquid, CSS, HTML, JS (Custom Element), Schema.
  *   Namespacing for CSS, JS, and Custom Element tag using `rob_custom` (derived from `block.id`).
  *   Comprehensive Shopify Schema.
  *   Console logs for debugging API calls and data.
{%- enddoc -%}

{%- liquid
  assign rob_custom = block.id | replace: '_', '' | downcase
  assign product_gid_for_api = block.settings.product_platform_id

  assign current_product_for_metafields = nil 
  if product_gid_for_api contains product.id and product_gid_for_api != blank
    assign current_product_for_metafields = product
  elsif product.admin_graphql_api_id == product_gid_for_api and product_gid_for_api != blank
    assign current_product_for_metafields = product
  endif

  assign variant_metafields_json_content_parts = "" | split: ""

  if current_product_for_metafields and current_product_for_metafields.variants.size > 0
    for variant in current_product_for_metafields.variants

      assign key_json_string = variant.admin_graphql_api_id | json

      assign metafield_pairs_for_variant = "" | split: ""
      assign temp_mf_pair = '"flavor_description": ' | append: variant.metafields.custom.flavor_description | json
      assign metafield_pairs_for_variant = metafield_pairs_for_variant | push: temp_mf_pair
      
      assign temp_mf_pair = '"nutritional_information": ' | append: variant.metafields.custom.nutritional_information | json
      assign metafield_pairs_for_variant = metafield_pairs_for_variant | push: temp_mf_pair
      
      assign temp_mf_pair = '"variant_flag": ' | append: variant.metafields.custom.variant_flag | json
      assign metafield_pairs_for_variant = metafield_pairs_for_variant | push: temp_mf_pair
      
      assign temp_mf_pair = '"servings": ' | append: variant.metafields.custom.servings | json
      assign metafield_pairs_for_variant = metafield_pairs_for_variant | push: temp_mf_pair
      
      assign temp_mf_pair = '"primary_color": ' | append: variant.metafields.custom.primary_color | json
      assign metafield_pairs_for_variant = metafield_pairs_for_variant | push: temp_mf_pair
      
      assign temp_mf_pair = '"secondary_color": ' | append: variant.metafields.custom.secondary_color | json
      assign metafield_pairs_for_variant = metafield_pairs_for_variant | push: temp_mf_pair
      
      assign value_json_object_string = '{' | append: metafield_pairs_for_variant | join: ',' | append: '}'

      assign current_top_level_pair_string = key_json_string | append: ':' | append: value_json_object_string
      
      assign variant_metafields_json_content_parts = variant_metafields_json_content_parts | push: current_top_level_pair_string
    endfor
  endif

  assign variant_metafields_json_content = variant_metafields_json_content_parts | join: ','

  assign variant_metafields_json = '{' | append: variant_metafields_json_content | append: '}'
-%}

{%- style -%}
  .skio-dynamic-box-container-{{ rob_custom }} {
    font-family: {{ block.settings.font_family }};
    padding: {{ block.settings.padding_block_start_desktop }}px {{ block.settings.padding_inline_desktop }}px {{ block.settings.padding_block_end_desktop }}px;
    background-color: {{ block.settings.background_color }};
    border: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
  }

  .header-{{ rob_custom }} {
    text-align: {{ block.settings.header_text_align }};
    margin-bottom: {{ block.settings.header_margin_bottom }}px;
  }
  .header-{{ rob_custom }} h2 {
    font-size: {{ block.settings.header_title_font_size_desktop }}px;
    color: {{ block.settings.header_title_color }};
    margin-bottom: {{ block.settings.header_title_margin_bottom }}px;
    font-weight: {{ block.settings.header_title_font_weight }};
  }
  .header-{{ rob_custom }} .subtitle-{{ rob_custom }} {
    font-size: {{ block.settings.header_subtitle_font_size_desktop }}px;
    color: {{ block.settings.header_subtitle_color }};
    line-height: 1.5;
  }
  .header-{{ rob_custom }} .subtitle-{{ rob_custom }} p {
    margin: 0;
  }

  .purchase-options-{{ rob_custom }} {
    display: flex;
    margin-bottom: {{ block.settings.purchase_options_margin_bottom }}px;
    border-radius: {{ block.settings.purchase_options_border_radius }}px;
    overflow: hidden;
    border: 1px solid {{ block.settings.purchase_options_border_color }};
  }
  .purchase-options-{{ rob_custom }} button {
    flex-grow: 1;
    padding: {{ block.settings.purchase_options_button_padding_vertical }}px {{ block.settings.purchase_options_button_padding_horizontal }}px;
    border: none;
    background-color: {{ block.settings.purchase_options_button_bg_default }};
    color: {{ block.settings.purchase_options_button_text_default }};
    font-size: {{ block.settings.purchase_options_button_font_size }}px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
    position: relative;
  }
  .purchase-options-{{ rob_custom }} button.active-{{ rob_custom }} {
    background-color: {{ block.settings.purchase_options_button_bg_active }};
    color: {{ block.settings.purchase_options_button_text_active }};
    font-weight: bold;
  }
   .purchase-options-{{ rob_custom }} button:not(.active-{{ rob_custom }}):hover {
    background-color: {{ block.settings.purchase_options_button_bg_hover }};
    color: {{ block.settings.purchase_options_button_text_hover }};
  }
  .purchase-options-{{ rob_custom }} .save-badge-{{ rob_custom }} {
    position: absolute;
    top: -10px; /* Adjust as needed */
    left: 50%;
    transform: translateX(-50%);
    background-color: {{ block.settings.save_badge_bg_color }};
    color: {{ block.settings.save_badge_text_color }};
    padding: 3px 8px;
    border-radius: {{ block.settings.save_badge_border_radius }}px;
    font-size: {{ block.settings.save_badge_font_size }}px;
    font-weight: bold;
    white-space: nowrap;
  }

  .purchase-option-pricing-{{ rob_custom }} {
    text-align: {{ block.settings.header_text_align }}; /* Use header alignment or new setting */
    margin-bottom: {{ block.settings.purchase_options_price_margin_bottom }}px;
    font-size: {{ block.settings.purchase_options_price_font_size }}px;
    color: {{ block.settings.purchase_options_price_text_color }};
  }
  .purchase-option-pricing-{{ rob_custom }} .original-price-{{ rob_custom }} {
    text-decoration: line-through;
    margin-right: 8px;
    color: {{ block.settings.purchase_options_original_price_text_color }};
  }
  .purchase-option-pricing-{{ rob_custom }} .final-price-{{ rob_custom }} {
    font-weight: bold;
    font-size: {{ block.settings.purchase_options_final_price_font_size }}px; /* Larger final price */
    color: {{ block.settings.purchase_options_final_price_text_color }};
  }
   .purchase-option-pricing-{{ rob_custom }} .savings-message-{{ rob_custom }} {
    display: block;
    margin-top: 4px;
    font-size: {{ block.settings.purchase_options_savings_text_font_size }}px;
    color: {{ block.settings.purchase_options_savings_text_color }};
    font-weight: bold;
  }


  .quantity-selection-{{ rob_custom }} {
    display: flex;
    justify-content: {{ block.settings.quantity_buttons_justify_content }};
    gap: {{ block.settings.quantity_buttons_gap }}px;
    margin-bottom: {{ block.settings.quantity_section_margin_bottom }}px;
  }
  .quantity-button-{{ rob_custom }} {
    padding: {{ block.settings.quantity_button_padding_vertical }}px {{ block.settings.quantity_button_padding_horizontal }}px;
    background-color: {{ block.settings.quantity_button_bg_default }};
    color: {{ block.settings.quantity_button_text_default }};
    border: 1px solid {{ block.settings.quantity_button_border_default }};
    border-radius: {{ block.settings.quantity_button_border_radius }}px;
    font-size: {{ block.settings.quantity_button_font_size }}px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s, border-color 0.3s;
  }
  .quantity-button-{{ rob_custom }}.active-{{ rob_custom }} {
    background-color: {{ block.settings.quantity_button_bg_active }};
    color: {{ block.settings.quantity_button_text_active }};
    border-color: {{ block.settings.quantity_button_border_active }};
    font-weight: bold;
  }
  .quantity-button-{{ rob_custom }}:not(.active-{{ rob_custom }}):hover {
    background-color: {{ block.settings.quantity_button_bg_hover }};
    color: {{ block.settings.quantity_button_text_hover }};
    border-color: {{ block.settings.quantity_button_border_hover }};
  }

  .status-message-{{ rob_custom }} {
    text-align: {{ block.settings.status_message_text_align }};
    margin-bottom: {{ block.settings.status_message_margin_bottom }}px;
    font-size: {{ block.settings.status_message_font_size }}px;
    color: {{ block.settings.status_message_text_color }};
    background-color: {{ block.settings.status_message_bg_color }};
    padding: {{ block.settings.status_message_padding_vertical }}px {{ block.settings.status_message_padding_horizontal }}px;
    border-radius: {{ block.settings.status_message_border_radius }}px;
  }
  .status-message-{{ rob_custom }} strong {
    font-weight: {{ block.settings.status_message_font_weight_strong }};
  }

  .variant-selection-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax({{ block.settings.variant_card_min_width }}px, 1fr));
    gap: {{ block.settings.variant_card_gap }}px;
    margin-bottom: {{ block.settings.variant_section_margin_bottom }}px;
  }
  .variant-card-{{ rob_custom }} {
    border: 1px solid {{ block.settings.variant_card_border_color }};
    border-radius: {{ block.settings.variant_card_border_radius }}px;
    background-color: {{ block.settings.variant_card_bg_color }};
    padding: {{ block.settings.variant_card_padding }}px;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
  .variant-card-{{ rob_custom }} .info-button-{{ rob_custom }} {
    position: absolute;
    top: 8px;
    right: 8px;
    background: {{ block.settings.variant_card_info_btn_bg }};
    color: {{ block.settings.variant_card_info_btn_text }};
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    font-size: 14px;
    cursor: pointer;
    line-height: 24px;
    text-align: center;
  }
  .variant-image-container-{{ rob_custom }} {
    position: relative;
    margin-bottom: {{ block.settings.variant_card_image_margin_bottom }}px;
  }
  .variant-image-{{ rob_custom }} {
    max-width: 100%;
    height: auto;
    aspect-ratio: {{ block.settings.variant_card_image_aspect_ratio }};
    object-fit: contain;
    border-radius: {{ block.settings.variant_card_image_border_radius }}px;
  }
  .variant-title-{{ rob_custom }} {
    font-size: {{ block.settings.variant_card_title_font_size }}px;
    color: {{ block.settings.variant_card_title_color }};
    font-weight: {{ block.settings.variant_card_title_font_weight }};
    margin-bottom: {{ block.settings.variant_card_title_margin_bottom }}px;
    min-height: 40px; /* Ensure consistent height */
  }
  .variant-description-short-{{ rob_custom }} {
    font-size: {{ block.settings.variant_card_desc_font_size }}px;
    color: {{ block.settings.variant_card_desc_color }};
    margin-bottom: {{ block.settings.variant_card_desc_margin_bottom }}px;
    min-height: 3em; /* Ensure consistent height */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2; /* Show 2 lines */
    -webkit-box-orient: vertical;
  }

  .variant-quantity-controls-{{ rob_custom }} {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: {{ block.settings.variant_card_qty_controls_margin_top }}px;
  }
  .variant-quantity-controls-{{ rob_custom }} button {
    background-color: {{ block.settings.variant_card_qty_btn_bg }};
    color: {{ block.settings.variant_card_qty_btn_text }};
    border: 1px solid {{ block.settings.variant_card_qty_btn_border }};
    border-radius: {{ block.settings.variant_card_qty_btn_border_radius }}px;
    width: 30px;
    height: 30px;
    font-size: 16px;
    cursor: pointer;
  }
   .variant-quantity-controls-{{ rob_custom }} button:hover {
    background-color: {{ block.settings.variant_card_qty_btn_bg_hover }};
   }
  .variant-quantity-controls-{{ rob_custom }} .quantity-{{ rob_custom }} {
    margin: 0 10px;
    font-size: {{ block.settings.variant_card_qty_text_font_size }}px;
    min-width: 20px; /* Ensure space for number */
    text-align: center;
  }
  .add-variant-button-{{ rob_custom }} {
    background-color: {{ block.settings.variant_card_add_btn_bg }};
    color: {{ block.settings.variant_card_add_btn_text }};
    border: none;
    border-radius: {{ block.settings.variant_card_add_btn_border_radius }}px;
    padding: {{ block.settings.variant_card_add_btn_padding_vertical }}px {{ block.settings.variant_card_add_btn_padding_horizontal }}px;
    font-size: {{ block.settings.variant_card_add_btn_font_size }}px;
    cursor: pointer;
    margin-top: {{ block.settings.variant_card_qty_controls_margin_top }}px; /* Same margin as controls for consistency */
    width: 100%;
  }
  .add-variant-button-{{ rob_custom }}:hover {
    background-color: {{ block.settings.variant_card_add_btn_bg_hover }};
  }


  .summary-{{ rob_custom }} {
    margin-top: {{ block.settings.summary_margin_top }}px;
    margin-bottom: {{ block.settings.summary_margin_bottom }}px;
    padding: {{ block.settings.summary_padding }}px;
    background-color: {{ block.settings.summary_bg_color }};
    border-radius: {{ block.settings.summary_border_radius }}px;
    border: 1px solid {{ block.settings.summary_border_color }};
    text-align: right; /* As per image */
  }
  .summary-{{ rob_custom }} div {
    font-size: {{ block.settings.summary_text_font_size }}px;
    color: {{ block.settings.summary_text_color }};
    margin-bottom: 5px;
  }
  .summary-{{ rob_custom }} .subtotal-value-{{ rob_custom }}, .summary-{{ rob_custom }} .savings-value-{{ rob_custom }} {
    font-weight: bold;
  }
  .summary-{{ rob_custom }} .savings-{{ rob_custom }} {
     color: {{ block.settings.summary_savings_text_color }}; /* Specific color for savings text */
     background-color: {{ block.settings.summary_savings_bg_color }};
     padding: 5px 10px;
     border-radius: {{ block.settings.summary_savings_border_radius }}px;
     display: inline-block; /* To make padding and border radius work well */
  }


  .add-to-cart-button-{{ rob_custom }} {
    width: 100%;
    padding: {{ block.settings.atc_button_padding_vertical }}px {{ block.settings.atc_button_padding_horizontal }}px;
    font-size: {{ block.settings.atc_button_font_size }}px;
    font-weight: {{ block.settings.atc_button_font_weight }};
    border-radius: {{ block.settings.atc_button_border_radius }}px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
  }
  .add-to-cart-button-{{ rob_custom }}:enabled {
    background-color: {{ block.settings.atc_button_bg_enabled }};
    color: {{ block.settings.atc_button_text_enabled }};
    border: 1px solid {{ block.settings.atc_button_border_enabled }};
  }
  .add-to-cart-button-{{ rob_custom }}:disabled {
    background-color: {{ block.settings.atc_button_bg_disabled }};
    color: {{ block.settings.atc_button_text_disabled }};
    border: 1px solid {{ block.settings.atc_button_border_disabled }};
    cursor: not-allowed;
  }
   .add-to-cart-button-{{ rob_custom }}:enabled:hover {
    background-color: {{ block.settings.atc_button_bg_enabled_hover }};
   }

  /* Modal Styles */
  .modal-overlay-{{ rob_custom }} {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0s linear 0.3s;
  }
  .modal-overlay-{{ rob_custom }}.active-{{ rob_custom }} {
    opacity: 1;
    visibility: visible;
    transition-delay: 0s;
  }
  .modal-content-{{ rob_custom }} {
    background-color: {{ block.settings.modal_bg_color }};
    padding: {{ block.settings.modal_padding }}px;
    border-radius: {{ block.settings.modal_border_radius }}px;
    max-width: {{ block.settings.modal_max_width }}px;
    width: 90%;
    position: relative;
    display: flex; /* For side-by-side layout */
    gap: {{ block.settings.modal_content_gap }}px;
    max-height: 90vh;
    overflow-y: auto;
  }
  .modal-close-button-{{ rob_custom }} {
    position: absolute;
    top: {{ block.settings.modal_close_btn_top }}px;
    right: {{ block.settings.modal_close_btn_right }}px;
    background: {{ block.settings.modal_close_btn_bg }};
    color: {{ block.settings.modal_close_btn_text }};
    border: none;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    font-size: 18px;
    cursor: pointer;
    line-height: 30px; /* Vertically center X */
    text-align: center; /* Horizontally center X */
  }
   .modal-close-button-{{ rob_custom }}:hover {
     background: {{ block.settings.modal_close_btn_bg_hover }};
   }
  .modal-image-column-{{ rob_custom }} {
    flex-basis: {{ block.settings.modal_image_column_width_percent }}%; /* Adjust width percentage */
    /* Optional: Add padding or specific styling */
  }
  .modal-image-{{ rob_custom }} {
    width: 100%;
    height: auto;
    object-fit: contain;
    border-radius: {{ block.settings.modal_image_border_radius }}px;
    margin-bottom: {{ block.settings.modal_image_margin_bottom }}px;
  }
  .modal-details-column-{{ rob_custom }} {
    flex-basis: {{ 100 | minus: block.settings.modal_image_column_width_percent }}%; /* Adjust width percentage */
    display: flex;
    flex-direction: column;
  }
  .modal-title-{{ rob_custom }} {
    font-size: {{ block.settings.modal_title_font_size }}px;
    color: {{ block.settings.modal_title_color }};
    font-weight: {{ block.settings.modal_title_font_weight }};
    margin-bottom: {{ block.settings.modal_title_margin_bottom }}px;
  }
  .modal-description-{{ rob_custom }} {
    font-size: {{ block.settings.modal_desc_font_size }}px;
    color: {{ block.settings.modal_desc_color }};
    margin-bottom: {{ block.settings.modal_desc_margin_bottom }}px;
    line-height: 1.6;
  }
  .modal-badges-{{ rob_custom }} {
    display: flex;
    gap: {{ block.settings.modal_badge_gap }}px;
    margin-bottom: {{ block.settings.modal_badge_margin_bottom }}px;
    flex-wrap: wrap;
  }
  .modal-badge-{{ rob_custom }} {
    padding: {{ block.settings.modal_badge_padding_vertical }}px {{ block.settings.modal_badge_padding_horizontal }}px;
    border-radius: {{ block.settings.modal_badge_border_radius }}px;
    font-size: {{ block.settings.modal_badge_font_size }}px;
    color: {{ block.settings.modal_badge_font_color }};
    font-weight: {{ block.settings.modal_badge_font_weight }};
  }
  .modal-accordion-{{ rob_custom }} summary {
    cursor: pointer;
    font-size: {{ block.settings.modal_accordion_header_font_size }}px;
    color: {{ block.settings.modal_accordion_header_color }};
    font-weight: bold;
    padding: {{ block.settings.modal_accordion_header_padding }}px;
    background-color: {{ block.settings.modal_accordion_header_bg }};
    border: 1px solid {{ block.settings.modal_accordion_header_border_color }};
    border-radius: {{ block.settings.modal_accordion_header_border_radius }}px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .modal-accordion-{{ rob_custom }} summary::after {
    content: '▼'; /* Down arrow */
    transition: transform 0.2s;
  }
  .modal-accordion-{{ rob_custom }}[open] summary::after {
     transform: rotate(180deg); /* Up arrow */
  }
  .modal-accordion-content-{{ rob_custom }} {
    padding: {{ block.settings.modal_accordion_content_padding }}px;
    font-size: {{ block.settings.modal_accordion_content_font_size }}px;
    color: {{ block.settings.modal_accordion_content_color }};
    background-color: {{ block.settings.modal_accordion_content_bg }};
    border: 1px solid {{ block.settings.modal_accordion_content_border_color }};
    border-top: none; /* Avoid double border with summary */
    border-radius: 0 0 {{ block.settings.modal_accordion_header_border_radius }}px {{ block.settings.modal_accordion_header_border_radius }}px; /* Match summary's bottom radius */
  }
  .modal-accordion-content-{{ rob_custom }} img,
  .modal-accordion-content-{{ rob_custom }} .rte img { /* For richtext images */
    max-width: 100%;
    height: auto;
  }

  .skio-loader-{{ rob_custom }} {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
    font-size: 1.2em;
    color: #555;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .skio-dynamic-box-container-{{ rob_custom }} {
      padding: {{ block.settings.padding_block_start_mobile }}px {{ block.settings.padding_inline_mobile }}px {{ block.settings.padding_block_end_mobile }}px;
    }
    .header-{{ rob_custom }} h2 {
      font-size: {{ block.settings.header_title_font_size_mobile }}px;
    }
    .header-{{ rob_custom }} .subtitle-{{ rob_custom }} {
      font-size: {{ block.settings.header_subtitle_font_size_mobile }}px;
    }
    .quantity-selection-{{ rob_custom }} {
      flex-wrap: wrap; /* Allow buttons to wrap on small screens */
    }
    .variant-selection-{{ rob_custom }} {
      grid-template-columns: repeat(auto-fill, minmax({{ block.settings.variant_card_min_width_mobile }}px, 1fr));
    }
    .modal-content-{{ rob_custom }} {
        flex-direction: column; /* Stack image and details on mobile */
        max-height: 80vh;
    }
    .modal-image-column-{{ rob_custom }},
    .modal-details-column-{{ rob_custom }} {
        flex-basis: auto; /* Reset basis for stacking */
    }
    .purchase-options-{{ rob_custom }} {
        flex-direction: column;
    }
    .purchase-options-{{ rob_custom }} button {
        border-bottom: 1px solid {{ block.settings.purchase_options_border_color }};
    }
    .purchase-options-{{ rob_custom }} button:last-child {
        border-bottom: none;
    }
  }
{%- endstyle -%}

<div class="skio-dynamic-box-container-{{ rob_custom }}" {{ block.shopify_attributes }}>
  <skio-dynamic-box-{{ rob_custom }}
    id="skio-box-{{ rob_custom }}"
    data-rob-custom-id="{{ rob_custom }}"
    data-product-gid="{{ product_gid_for_api | escape }}"
    data-currency-code="{{ cart.currency.iso_code | escape }}"
    data-money-format="{{ shop.money_format | escape }}"
    data-variant-metafields='{{ variant_metafields_json }}'
    data-flavor-desc-metafield-key="{{ block.settings.flavor_description_metafield | escape }}"
    data-nutrition-metafield-key="{{ block.settings.nutritional_info_metafield | escape }}"
    data-flag-metafield-key="{{ block.settings.variant_flag_metafield | escape }}"
    data-servings-metafield-key="{{ block.settings.servings_metafield | escape }}"
    data-primary-color-metafield-key="{{ block.settings.primary_color_metafield | escape }}"
    data-secondary-color-metafield-key="{{ block.settings.secondary_color_metafield | escape }}"
    data-modal-badge-font-color="{{ block.settings.modal_badge_font_color | escape }}"
    data-add-to-cart-text="{{ 'products.product.add_to_cart' | t | escape }}"
    data-select-more-text="{{ block.settings.atc_button_select_more_text | escape }}"
    data-bags-text="{{ block.settings.at_button_item_name_plural | escape }}"
    data-bag-text="{{ block.settings.at_button_item_name_singular | escape }}"
    data-flavors-to-go-text="{{ block.settings.status_message_items_to_go_text | escape }}"
    data-all-set-text="{{ block.settings.status_message_all_set_text | escape }}"
    data-initial-save-badge-text="{{ block.settings.save_badge_text | escape }}"
  >
    <div class="header-{{ rob_custom }}">
      <h2>{{ block.settings.header_title | escape }}</h2>
      {%- if block.settings.header_subtitle != blank -%}
        <div class="subtitle-{{ rob_custom }}">{{ block.settings.header_subtitle }}</div>
      {%- endif -%}
    </div>

    {% if block.settings.show_purchase_type_toggle %}
      <div class="purchase-options-{{ rob_custom }}">
        <button type="button" class="subscribe-button-{{ rob_custom }} active-{{ rob_custom }}">
          {{ block.settings.subscribe_button_text }}
          {% if block.settings.save_badge_text != blank %}
            <span class="save-badge-{{ rob_custom }}">{{ block.settings.save_badge_text }}</span>
          {% endif %}
        </button>
        <button type="button" class="onetime-button-{{ rob_custom }}">{{ block.settings.onetime_button_text }}</button>
      </div>
      <div class="purchase-option-pricing-{{ rob_custom }}" style="display: none;">
        <span class="original-price-{{ rob_custom }}"></span>
        <span class="final-price-{{ rob_custom }}"></span>
        <span class="savings-message-{{ rob_custom }}"></span>
      </div>
    {% endif %}

    <div class="quantity-selection-{{ rob_custom }}" style="display: none;">
      <!-- Quantity buttons will be rendered here by JS -->
    </div>

    <div class="status-message-{{ rob_custom }}" style="display: none;">
      <!-- Status message like "X Flavors to Go" -->
    </div>

    <div class="variant-selection-{{ rob_custom }}" style="display: none;">
      <!-- Variant cards will be rendered here by JS -->
    </div>

    <div class="skio-loader-{{ rob_custom }}">Loading options...</div>

    <div class="summary-{{ rob_custom }}" style="display: none;">
      <div class="subtotal-line-{{ rob_custom }}">
        {{ 'sections.cart.subtotal' | t }}: <span class="subtotal-value-{{ rob_custom }}"></span>
      </div>
      <div class="savings-line-{{ rob_custom }}">
         <span class="savings-{{ rob_custom }}">{{ block.settings.summary_savings_label }} <span class="savings-value-{{ rob_custom }}"></span></span>
      </div>
    </div>

    <button type="button" class="add-to-cart-button-{{ rob_custom }}" disabled>
      <!-- Text will be updated by JS -->
    </button>

    <!-- Modal Structure (hidden by default) -->
    <div class="modal-overlay-{{ rob_custom }}">
      <div class="modal-content-{{ rob_custom }}">
        <button type="button" class="modal-close-button-{{ rob_custom }}">×</button>
        <div class="modal-image-column-{{ rob_custom }}">
            <img src="" alt="" class="modal-image-{{ rob_custom }}">
        </div>
        <div class="modal-details-column-{{ rob_custom }}">
            <h3 class="modal-title-{{ rob_custom }}"></h3>
            <div class="modal-badges-{{ rob_custom }}">
              <!-- Badges will be rendered here -->
            </div>
            <div class="modal-description-{{ rob_custom }}"></div>
            <details class="modal-accordion-{{ rob_custom }}">
              <summary>{{ block.settings.modal_accordion_default_header | escape }}</summary>
              <div class="modal-accordion-content-{{ rob_custom }}">
                <!-- Nutrition facts will be rendered here -->
              </div>
            </details>
        </div>
      </div>
    </div>

  </skio-dynamic-box-{{ rob_custom }}>
</div>

<script>
  class SkioDynamicBox extends HTMLElement {
    constructor() {
      super();
      this.robCustomId = this.dataset.robCustomId;
      this.productGid = this.dataset.productGid;
      this.currencyCode = this.dataset.currencyCode;
      this.moneyFormat = this.dataset.moneyFormat;
      try {
        this.variantMetafields = JSON.parse(this.dataset.variantMetafields);
      } catch (e) {
        console.error(`SkioBox-${this.robCustomId}: Error parsing variant metafields JSON:`, e, this.dataset.variantMetafields);
        this.variantMetafields = {};
      }

      this.metafieldKeys = {
        flavorDescription: this.dataset.flavorDescMetafieldKey,
        nutritionalInfo: this.dataset.nutritionMetafieldKey,
        variantFlag: this.dataset.flagMetafieldKey,
        servings: this.dataset.servingsMetafieldKey,
        primaryColor: this.dataset.primaryColorMetafieldKey,
        secondaryColor: this.dataset.secondaryColorMetafieldKey
      };
      this.modalBadgeFontColor = this.dataset.modalBadgeFontColor;

      this.textStrings = {
        addToCart: this.dataset.addToCartText,
        selectMore: this.dataset.selectMoreText,
        bags: this.dataset.bagsText,
        bag: this.dataset.bagText,
        flavorsToGo: this.dataset.flavorsToGoText,
        allSet: this.dataset.allSetText,
        initialSaveBadge: this.dataset.initialSaveBadgeText
      };

      this.skioData = null;
      this.selectedPurchaseType = 'subscribe'; // 'subscribe' or 'onetime'
      this.selectedQuantityTier = null; // e.g. 4 (for 4 bags)
      this.selectedVariants = {}; // { variantPlatformId: quantity }
      this.totalItemsInBox = 0;

      this.loaderEl = this.querySelector(`.skio-loader-${this.robCustomId}`);
      this.quantitySelectionEl = this.querySelector(`.quantity-selection-${this.robCustomId}`);
      this.variantSelectionEl = this.querySelector(`.variant-selection-${this.robCustomId}`);
      this.statusMessageEl = this.querySelector(`.status-message-${this.robCustomId}`);
      this.addToCartButton = this.querySelector(`.add-to-cart-button-${this.robCustomId}`);
      this.summaryEl = this.querySelector(`.summary-${this.robCustomId}`);
      this.subtotalValueEl = this.querySelector(`.subtotal-value-${this.robCustomId}`);
      this.savingsValueEl = this.querySelector(`.savings-value-${this.robCustomId}`);

      this.modalOverlay = this.querySelector(`.modal-overlay-${this.robCustomId}`);
      this.modalCloseButton = this.querySelector(`.modal-close-button-${this.robCustomId}`);
      this.modalImageEl = this.querySelector(`.modal-image-${this.robCustomId}`);
      this.modalTitleEl = this.querySelector(`.modal-title-${this.robCustomId}`);
      this.modalDescriptionEl = this.querySelector(`.modal-description-${this.robCustomId}`);
      this.modalBadgesEl = this.querySelector(`.modal-badges-${this.robCustomId}`);
      this.modalAccordionContentEl = this.querySelector(`.modal-accordion-content-${this.robCustomId}`);
      
      this.subscribeButton = this.querySelector(`.subscribe-button-${this.robCustomId}`);
      this.onetimeButton = this.querySelector(`.onetime-button-${this.robCustomId}`);
      this.purchaseOptionPricingEl = this.querySelector(`.purchase-option-pricing-${this.robCustomId}`);
      this.originalPriceDisplayEl = this.purchaseOptionPricingEl?.querySelector(`.original-price-${this.robCustomId}`);
      this.finalPriceDisplayEl = this.purchaseOptionPricingEl?.querySelector(`.final-price-${this.robCustomId}`);
      this.savingsMessageDisplayEl = this.purchaseOptionPricingEl?.querySelector(`.savings-message-${this.robCustomId}`);

      if (this.subscribeButton && this.onetimeButton) {
        this.subscribeButton.addEventListener('click', () => this.handlePurchaseTypeChange('subscribe'));
        this.onetimeButton.addEventListener('click', () => this.handlePurchaseTypeChange('onetime'));
      } else {
        // If no toggle, default to one-time or first available from API
        this.selectedPurchaseType = 'onetime'; 
      }
    }

    connectedCallback() {
      console.log(`SkioBox-${this.robCustomId}: Initializing. Product GID: ${this.productGid}`);
      console.log(`SkioBox-${this.robCustomId}: Variant Metafields Data:`, this.variantMetafields);
      this.fetchSkioData();
      this.modalCloseButton.addEventListener('click', () => this.closeModal());
      this.modalOverlay.addEventListener('click', (event) => {
        if (event.target === this.modalOverlay) this.closeModal();
      });
      this.addToCartButton.addEventListener('click', () => this.handleAddToCart());
    }

    async fetchSkioData() {
      this.loaderEl.style.display = 'flex';
      try {
        const response = await fetch('https://api.skio.com/storefront-http/get-dynamic-box', {
          method: 'POST',
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ "productPlatformId": this.productGid })
        });
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          console.error(`SkioBox-${this.robCustomId}: API Error HTTP ${response.status}`, errorData);
          this.displayError(`Failed to load product options. Status: ${response.status}`);
          return;
        }
        this.skioData = await response.json();
        console.log(`SkioBox-${this.robCustomId}: Skio API Response:`, this.skioData);

        if (this.skioData && this.skioData.ok && this.skioData.DynamicBox) {
          this.loaderEl.style.display = 'none';
          this.quantitySelectionEl.style.display = 'flex';
          this.variantSelectionEl.style.display = 'grid';
          this.statusMessageEl.style.display = 'block';
          this.renderQuantityTiers();
          this.renderProductVariants();
          if (this.skioData.DynamicBox.sizeInterval && this.skioData.DynamicBox.sizeInterval.length > 0) {
            // Auto-select the first quantity tier by default
            this.handleQuantityTierSelection(this.skioData.DynamicBox.sizeInterval[0]);
          }
           this.updatePurchaseTypeDisplay(); // Update pricing display for default purchase type
        } else {
          this.displayError('Invalid data received from Skio API.');
          console.error(`SkioBox-${this.robCustomId}: Invalid Skio API data structure:`, this.skioData);
        }
      } catch (error) {
        console.error(`SkioBox-${this.robCustomId}: Error fetching Skio data:`, error);
        this.displayError('Could not connect to Skio API.');
      }
    }

    displayError(message) {
        this.loaderEl.textContent = message;
        this.loaderEl.style.display = 'block';
        this.quantitySelectionEl.style.display = 'none';
        this.variantSelectionEl.style.display = 'none';
        this.statusMessageEl.style.display = 'none';
        this.summaryEl.style.display = 'none';
        this.addToCartButton.style.display = 'none';
    }

    renderQuantityTiers() {
      const { sizeInterval } = this.skioData.DynamicBox;
      if (!sizeInterval || sizeInterval.length === 0) {
        console.warn(`SkioBox-${this.robCustomId}: No sizeIntervals found in API response.`);
        this.quantitySelectionEl.innerHTML = '<p>No quantity options available.</p>';
        return;
      }
      this.quantitySelectionEl.innerHTML = ''; // Clear previous
      sizeInterval.forEach(quantity => {
        const button = document.createElement('button');
        button.type = 'button';
        button.classList.add(`quantity-button-${this.robCustomId}`);
        button.textContent = `${quantity} ${quantity === 1 ? this.textStrings.bag : this.textStrings.bags}`;
        button.dataset.quantity = quantity;
        button.addEventListener('click', () => this.handleQuantityTierSelection(quantity));
        this.quantitySelectionEl.appendChild(button);
      });
    }

    handlePurchaseTypeChange(type) {
      this.selectedPurchaseType = type;
      if (this.subscribeButton && this.onetimeButton) {
        this.subscribeButton.classList.toggle(`active-${this.robCustomId}`, type === 'subscribe');
        this.onetimeButton.classList.toggle(`active-${this.robCustomId}`, type === 'onetime');
      }
      // Update pricing display based on the new purchase type
      this.updatePurchaseTypeDisplay();
      this.updatePricesAndButton(); // Recalculate all prices and button state
      console.log(`SkioBox-${this.robCustomId}: Purchase type changed to: ${type}`);
    }

    updatePurchaseTypeDisplay() {
      if (!this.skioData || !this.purchaseOptionPricingEl) return;

      const firstVariantPrice = this.skioData.DynamicBox.selectableProductVariants?.[0]?.productVariants?.[0]?.price || 0;
      let basePrice = firstVariantPrice;
      let finalPrice = basePrice;
      let savingsText = "";
      let originalPriceForDisplay = basePrice;

      if (this.selectedPurchaseType === 'subscribe') {
        const sellingPlanGroup = Object.values(this.skioData.DynamicBox.sellingPlanGroup || {})[0];
        if (sellingPlanGroup && sellingPlanGroup.priceAdjustmentType === 'PERCENTAGE') {
          const discountPercent = sellingPlanGroup.priceAdjustmentAmount;
          finalPrice = basePrice * (1 - discountPercent / 100);
          savingsText = this.textStrings.initialSaveBadge || `Save ${discountPercent}%`;
          this.subscribeButton?.querySelector(`.save-badge-${this.robCustomId}`)?.textContent = savingsText;
        } else {
             this.subscribeButton?.querySelector(`.save-badge-${this.robCustomId}`)?.style.display = 'none';
        }
      } else { // onetime
         this.subscribeButton?.querySelector(`.save-badge-${this.robCustomId}`)?.textContent = this.textStrings.initialSaveBadge;
      }

      // Apply quantity tier discount if a tier is selected
      if (this.selectedQuantityTier) {
          const quantityDiscountPercent = parseFloat(this.skioData.DynamicBox.percentDiscountTier?.[this.selectedQuantityTier.toString()] || "0");
          if (quantityDiscountPercent > 0) {
              // If S&S was active, originalPriceForDisplay is already the S&S price before quantity discount
              // If OTP, originalPriceForDisplay is the base price
              originalPriceForDisplay = finalPrice; // Price before this tier discount
              finalPrice = finalPrice * (1 - quantityDiscountPercent / 100);
          }
      }
      
      if (this.originalPriceDisplayEl && this.finalPriceDisplayEl && this.savingsMessageDisplayEl) {
        if (finalPrice < originalPriceForDisplay) {
            this.originalPriceDisplayEl.textContent = this.formatMoney(originalPriceForDisplay * (this.selectedQuantityTier || 1));
            this.finalPriceDisplayEl.textContent = this.formatMoney(finalPrice * (this.selectedQuantityTier || 1));
            const totalSavingsValue = (originalPriceForDisplay - finalPrice) * (this.selectedQuantityTier || 1);
            this.savingsMessageDisplayEl.textContent = `You save ${this.formatMoney(totalSavingsValue)}`;
            this.originalPriceDisplayEl.style.display = 'inline';
            this.savingsMessageDisplayEl.style.display = 'block';

        } else {
            this.originalPriceDisplayEl.style.display = 'none';
            this.finalPriceDisplayEl.textContent = this.formatMoney(finalPrice * (this.selectedQuantityTier || 1));
            this.savingsMessageDisplayEl.style.display = 'none';
        }
        this.purchaseOptionPricingEl.style.display = 'block';
      }
    }


    handleQuantityTierSelection(quantity) {
      this.selectedQuantityTier = quantity;
      console.log(`SkioBox-${this.robCustomId}: Selected quantity tier: ${quantity}`);

      // Reset selections if tier changes to something that invalidates current box
      if (this.totalItemsInBox > this.selectedQuantityTier) {
        // Simplest reset: clear the box. Or implement logic to trim.
        this.selectedVariants = {};
        this.totalItemsInBox = 0;
        this.renderProductVariants(); // Re-render to reset variant quantities to 0
      }
      
      this.quantitySelectionEl.querySelectorAll(`.quantity-button-${this.robCustomId}`).forEach(btn => {
        btn.classList.toggle(`active-${this.robCustomId}`, parseInt(btn.dataset.quantity) === quantity);
      });
      this.updatePricesAndButton();
      this.updatePurchaseTypeDisplay(); // Update OTP/SS pricing with new tier
    }

    renderProductVariants() {
      const { selectableProductVariants, settings } = this.skioData.DynamicBox;
      this.variantSelectionEl.innerHTML = ''; // Clear previous

      if (!selectableProductVariants || selectableProductVariants.length === 0) {
        this.variantSelectionEl.innerHTML = '<p>No products available for selection.</p>';
        return;
      }
      
      // Determine if display is by product or by variant (from Skio settings)
      const displayByVariant = settings?.displayByVariant;

      selectableProductVariants.forEach(productGroup => {
        productGroup.productVariants.forEach(variant => {
          const card = document.createElement('div');
          card.classList.add(`variant-card-${this.robCustomId}`);
          
          const imageSrc = variant.imageSrc || productGroup.productImageSrc;
          const title = displayByVariant ? variant.productVariantTitle : productGroup.productTitle;
          // For short description, use product title if displaying by variant, or a generic text
          const shortDesc = displayByVariant ? productGroup.productTitle : `Part of ${productGroup.productTitle}`;


          const variantInBoxQuantity = this.selectedVariants[variant.platformId] || 0;

          card.innerHTML = `
            <div class="variant-image-container-${this.robCustomId}">
              <img src="${imageSrc}" alt="${title}" class="variant-image-${this.robCustomId}">
              <button type="button" class="info-button-${this.robCustomId}" data-variant-id="${variant.platformId}" data-product-group-title="${productGroup.productTitle}">i</button>
            </div>
            <h4 class="variant-title-${this.robCustomId}">${title}</h4>
            <p class="variant-description-short-${this.robCustomId}">${shortDesc}</p>
            ${this.selectedQuantityTier ? `
              <div class="variant-quantity-controls-${this.robCustomId}" style="${variantInBoxQuantity > 0 ? '' : 'display:none;'}">
                <button type="button" class="decrease-qty-${this.robCustomId}" data-variant-id="${variant.platformId}">-</button>
                <span class="quantity-${this.robCustomId}">${variantInBoxQuantity}</span>
                <button type="button" class="increase-qty-${this.robCustomId}" data-variant-id="${variant.platformId}">+</button>
              </div>
              <button type="button" class="add-variant-button-${this.robCustomId}" data-variant-id="${variant.platformId}" style="${variantInBoxQuantity > 0 ? 'display:none;' : ''}">Add</button>
            ` : `<p>Please select a quantity tier first.</p>`}
          `;
          this.variantSelectionEl.appendChild(card);

          card.querySelector(`.info-button-${this.robCustomId}`)?.addEventListener('click', (e) => {
            const vId = e.currentTarget.dataset.variantId;
            const pgTitle = e.currentTarget.dataset.productGroupTitle;
            this.openModal(vId, pgTitle);
          });

          if (this.selectedQuantityTier) {
            card.querySelector(`.add-variant-button-${this.robCustomId}`)?.addEventListener('click', () => this.addVariantToBox(variant.platformId));
            card.querySelector(`.increase-qty-${this.robCustomId}`)?.addEventListener('click', () => this.increaseVariantQuantity(variant.platformId));
            card.querySelector(`.decrease-qty-${this.robCustomId}`)?.addEventListener('click', () => this.decreaseVariantQuantity(variant.platformId));
          }
        });
      });
    }

    addVariantToBox(variantId) {
      if (this.totalItemsInBox < this.selectedQuantityTier) {
        this.selectedVariants[variantId] = (this.selectedVariants[variantId] || 0) + 1;
        this.totalItemsInBox++;
        this.updateVariantCardUI(variantId);
        this.updatePricesAndButton();
      }
    }

    increaseVariantQuantity(variantId) {
       if (this.totalItemsInBox < this.selectedQuantityTier) {
        this.selectedVariants[variantId]++;
        this.totalItemsInBox++;
        this.updateVariantCardUI(variantId);
        this.updatePricesAndButton();
      }
    }

    decreaseVariantQuantity(variantId) {
      if (this.selectedVariants[variantId] > 0) {
        this.selectedVariants[variantId]--;
        this.totalItemsInBox--;
        if (this.selectedVariants[variantId] === 0) {
          delete this.selectedVariants[variantId];
        }
        this.updateVariantCardUI(variantId);
        this.updatePricesAndButton();
      }
    }
    
    updateVariantCardUI(variantId) {
        const card = this.variantSelectionEl.querySelector(`.add-variant-button-${this.robCustomId}[data-variant-id="${variantId}"]`)?.closest(`.variant-card-${this.robCustomId}`);
        if (!card) return;

        const quantityControlsEl = card.querySelector(`.variant-quantity-controls-${this.robCustomId}`);
        const addBtnEl = card.querySelector(`.add-variant-button-${this.robCustomId}`);
        const quantityDisplayEl = card.querySelector(`.quantity-${this.robCustomId}`);
        
        const quantity = this.selectedVariants[variantId] || 0;

        if (quantity > 0) {
            quantityControlsEl.style.display = 'flex';
            addBtnEl.style.display = 'none';
            quantityDisplayEl.textContent = quantity;
        } else {
            quantityControlsEl.style.display = 'none';
            addBtnEl.style.display = 'block';
        }
    }

    updatePricesAndButton() {
      if (!this.skioData || !this.selectedQuantityTier) {
        this.addToCartButton.disabled = true;
        this.addToCartButton.textContent = this.textStrings.selectMore.replace('{count}', this.selectedQuantityTier || 'any').replace('{item}', this.selectedQuantityTier === 1 ? this.textStrings.bag : this.textStrings.bags);
        this.summaryEl.style.display = 'none';
        return;
      }

      let totalOriginalPrice = 0;
      let totalFinalPrice = 0;

      for (const variantId in this.selectedVariants) {
        const quantity = this.selectedVariants[variantId];
        const variantData = this.findVariantData(variantId);
        if (variantData) {
          let itemBasePrice = variantData.price;
          
          // Apply S&S discount if active
          if (this.selectedPurchaseType === 'subscribe') {
            const sellingPlan = this.skioData.DynamicBox.sellingPlanGroup?.[variantData.sellingPlanGid]; // Assuming variantData has sellingPlanGid
             // Or, more generally, find applicable selling plan:
            let applicablePlanDetails;
            for (const spgId in this.skioData.DynamicBox.sellingPlanGroup) {
                const spg = this.skioData.DynamicBox.sellingPlanGroup[spgId];
                if (spg.variantMapping && spg.variantMapping[variantId]) {
                    applicablePlanDetails = spg;
                    break;
                } else if (spg.allMatch) { // Fallback if allMatch is true and specific mapping missing
                    applicablePlanDetails = spg;
                    break;
                }
            }

            if (applicablePlanDetails && applicablePlanDetails.priceAdjustmentType === 'PERCENTAGE') {
              itemBasePrice = itemBasePrice * (1 - applicablePlanDetails.priceAdjustmentAmount / 100);
            }
            // Add other selling plan adjustment types if needed (e.g., FIXED_AMOUNT)
          }
          
          totalOriginalPrice += itemBasePrice * quantity; // Price after S&S, before quantity tier
        }
      }
      
      // Apply overall quantity tier discount
      const quantityDiscountPercent = parseFloat(this.skioData.DynamicBox.percentDiscountTier?.[this.selectedQuantityTier.toString()] || "0");
      totalFinalPrice = totalOriginalPrice * (1 - quantityDiscountPercent / 100);

      const itemsToGo = this.selectedQuantityTier - this.totalItemsInBox;

      if (itemsToGo > 0) {
        this.addToCartButton.disabled = true;
        this.addToCartButton.textContent = this.textStrings.selectMore.replace('{count}', itemsToGo).replace('{item}', itemsToGo === 1 ? this.textStrings.bag : this.textStrings.bags);
        this.statusMessageEl.innerHTML = `<strong>${itemsToGo}</strong> ${itemsToGo === 1 ? this.textStrings.bag : this.textStrings.bags} ${this.textStrings.flavorsToGo}`;
        this.summaryEl.style.display = 'none';
      } else {
        this.addToCartButton.disabled = false;
        this.addToCartButton.textContent = this.textStrings.addToCart;
        this.statusMessageEl.innerHTML = `<strong>${this.textStrings.allSet}</strong>`;
        this.summaryEl.style.display = 'block';
        this.subtotalValueEl.textContent = this.formatMoney(totalFinalPrice);
        const savings = totalOriginalPrice - totalFinalPrice; // This logic might need refinement based on how "original" is defined (pre-S&S or post-S&S)
        this.savingsValueEl.textContent = this.formatMoney(savings);
      }
      this.updatePurchaseTypeDisplay(); // Update the general price display too
    }
    
    findVariantData(variantId) {
      for (const productGroup of this.skioData.DynamicBox.selectableProductVariants) {
        const foundVariant = productGroup.productVariants.find(v => v.platformId === variantId);
        if (foundVariant) return foundVariant;
      }
      return null;
    }

    openModal(variantPlatformId, productGroupTitleFallback) {
      const variantData = this.findVariantData(variantPlatformId);
      if (!variantData) {
        console.error(`SkioBox-${this.robCustomId}: Variant data not found for modal: ${variantPlatformId}`);
        return;
      }

      const displayByVariant = this.skioData.DynamicBox.settings?.displayByVariant;
      this.modalImageEl.src = variantData.imageSrc || this.skioData.DynamicBox.selectableProductVariants.find(pg => pg.productVariants.some(v => v.platformId === variantPlatformId))?.productImageSrc;
      this.modalImageEl.alt = displayByVariant ? variantData.productVariantTitle : productGroupTitleFallback;
      this.modalTitleEl.textContent = displayByVariant ? variantData.productVariantTitle : productGroupTitleFallback;
      
      const metafields = this.variantMetafields[variantPlatformId] || {};
      console.log(`SkioBox-${this.robCustomId}: Metafields for modal (ID: ${variantPlatformId}):`, metafields);

      this.modalDescriptionEl.innerHTML = metafields[this.metafieldKeys.flavorDescription] || 'No description available.';
      
      this.modalBadgesEl.innerHTML = '';
      const badge1Text = metafields[this.metafieldKeys.variantFlag];
      const badge2Text = metafields[this.metafieldKeys.servings];
      const badge1Color = metafields[this.metafieldKeys.primaryColor];
      const badge2Color = metafields[this.metafieldKeys.secondaryColor];

      if (badge1Text) {
        const badge1 = document.createElement('span');
        badge1.classList.add(`modal-badge-${this.robCustomId}`);
        badge1.textContent = badge1Text;
        badge1.style.backgroundColor = badge1Color || '#f0f0f0';
        badge1.style.color = this.modalBadgeFontColor;
        this.modalBadgesEl.appendChild(badge1);
      }
      if (badge2Text) {
        const badge2 = document.createElement('span');
        badge2.classList.add(`modal-badge-${this.robCustomId}`);
        badge2.textContent = badge2Text;
        badge2.style.backgroundColor = badge2Color || '#e0e0e0';
        badge2.style.color = this.modalBadgeFontColor;
        this.modalBadgesEl.appendChild(badge2);
      }

      this.modalAccordionContentEl.innerHTML = metafields[this.metafieldKeys.nutritionalInfo] || 'Nutritional information not available.';
      this.modalOverlay.classList.add(`active-${this.robCustomId}`);
    }

    closeModal() {
      this.modalOverlay.classList.remove(`active-${this.robCustomId}`);
    }

    async handleAddToCart() {
        console.log(`SkioBox-${this.robCustomId}: Add to cart clicked. Selected variants:`, this.selectedVariants);
        this.addToCartButton.disabled = true;
        this.addToCartButton.textContent = 'Processing...';

        const items = [];
        for (const variantId in this.selectedVariants) {
            const quantity = this.selectedVariants[variantId];
            if (quantity > 0) {
                const numericVariantId = variantId.split('/').pop(); // Extract numeric ID from GID
                items.push({
                    id: numericVariantId,
                    quantity: quantity,
                });
            }
        }
        
        // Add selling plan if 'subscribe' is selected
        let selling_plan_id = null;
        if (this.selectedPurchaseType === 'subscribe' && this.skioData.DynamicBox.sellingPlanGroup) {
            const firstSellingPlanGid = Object.keys(this.skioData.DynamicBox.sellingPlanGroup)[0];
            if (firstSellingPlanGid) {
                 // Check if this plan applies to the first item being added (assuming all items use the same plan for simplicity)
                const firstItemVariantId = Object.keys(this.selectedVariants)[0];
                const planDetails = this.skioData.DynamicBox.sellingPlanGroup[firstSellingPlanGid];

                if(planDetails.variantMapping && planDetails.variantMapping[firstItemVariantId] && planDetails.variantMapping[firstItemVariantId].planId){
                    selling_plan_id = planDetails.variantMapping[firstItemVariantId].planId.split('/').pop();
                } else if (planDetails.allMatch) { // Fallback if allMatch is true
                    selling_plan_id = firstSellingPlanGid.split('/').pop(); // GID of the selling plan itself
                }
            }
        }

        if (items.length === 0) {
            console.warn(`SkioBox-${this.robCustomId}: No items selected to add to cart.`);
            this.updatePricesAndButton(); // Re-enable button with original text
            return;
        }
        
        const formData = { items: [] };
        items.forEach(item => {
            const itemPayload = { id: item.id, quantity: item.quantity };
            if (selling_plan_id) {
                itemPayload.selling_plan = selling_plan_id;
            }
            formData.items.push(itemPayload);
        });

        console.log(`SkioBox-${this.robCustomId}: Submitting to cart:`, JSON.stringify(formData));

        try {
            const response = await fetch(`${routes.cart_add_url}.js`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            const cartData = await response.json();
            if (response.ok) {
                console.log(`SkioBox-${this.robCustomId}: Added to cart successfully:`, cartData);
                // Optionally redirect to cart or update cart icon/drawer
                document.dispatchEvent(new CustomEvent('cart:updated', { bubbles: true, detail: { cart: cartData }}));
                if (this.skioData.DynamicBox.settings?.redirectToCart) {
                    window.location.href = routes.cart_url;
                } else {
                   this.addToCartButton.textContent = 'Added!';
                   // Reset after a delay or keep as 'Added!'
                }
            } else {
                console.error(`SkioBox-${this.robCustomId}: Error adding to cart:`, cartData.description || cartData.message || 'Unknown error');
                alert(`Error: ${cartData.description || cartData.message || 'Could not add items to cart.'}`);
                this.updatePricesAndButton(); // Re-enable button
            }
        } catch (error) {
            console.error(`SkioBox-${this.robCustomId}: Network error adding to cart:`, error);
            alert('Network error. Please try again.');
            this.updatePricesAndButton();
        }
    }
    
    formatMoney(valueInSmallestUnit, formatString) {
        // Note: Skio API price is usually in major units (e.g., dollars). If it were cents, multiplication by 100 would be needed.
        // Assuming 'valueInSmallestUnit' from Skio is actually in major currency units.
        const valueForFormatting = parseFloat(valueInSmallestUnit) * 100; // Convert to cents for Shopify money formatter

        if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
            return Shopify.formatMoney(valueForFormatting, formatString || this.moneyFormat);
        }
        // Fallback basic formatter
        const amount = (valueForFormatting / 100).toFixed(2);
        return `${this.currencyCode} $${amount}`;
    }
  }
  customElements.define('skio-dynamic-box-{{ rob_custom }}', SkioDynamicBox);
</script>

{% schema %}
{
  "name": "Skio Dynamic Box",
  "tag": "section",
  "class": "skio-dynamic-box-section",
  "settings": [
    {
      "type": "header",
      "content": "Skio API Configuration"
    },
    {
      "type": "text",
      "id": "product_platform_id",
      "label": "Product GID for Skio API",
      "info": "Enter the Shopify Product GID (e.g., gid://shopify/Product/1234567890). This block works best on the product page of this GID for metafield access."
    },
    {
      "type": "header",
      "content": "General Appearance"
    },
    {
        "type": "select",
        "id": "font_family",
        "label": "Font Family",
        "options": [
            { "value": "Arial, sans-serif", "label": "Arial" },
            { "value": "Helvetica, sans-serif", "label": "Helvetica" },
            { "value": "Verdana, sans-serif", "label": "Verdana" },
            { "value": "'Times New Roman', serif", "label": "Times New Roman" },
            { "value": "Georgia, serif", "label": "Georgia" },
            { "value": "sans-serif", "label": "System Default"}
        ],
        "default": "sans-serif"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Block Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 400,
      "max": 1200,
      "step": 10,
      "unit": "px",
      "label": "Max Width of Block",
      "default": 800
    },
    {
      "type": "header",
      "content": "Block Padding (Desktop)"
    },
    { "type": "range", "id": "padding_block_start_desktop", "min": 0, "max": 100, "step": 2, "unit": "px", "label": "Padding Top", "default": 30 },
    { "type": "range", "id": "padding_block_end_desktop", "min": 0, "max": 100, "step": 2, "unit": "px", "label": "Padding Bottom", "default": 30 },
    { "type": "range", "id": "padding_inline_desktop", "min": 0, "max": 100, "step": 2, "unit": "px", "label": "Padding Left/Right", "default": 20 },
    {
      "type": "header",
      "content": "Block Padding (Mobile)"
    },
    { "type": "range", "id": "padding_block_start_mobile", "min": 0, "max": 100, "step": 2, "unit": "px", "label": "Padding Top", "default": 20 },
    { "type": "range", "id": "padding_block_end_mobile", "min": 0, "max": 100, "step": 2, "unit": "px", "label": "Padding Bottom", "default": 20 },
    { "type": "range", "id": "padding_inline_mobile", "min": 0, "max": 100, "step": 2, "unit": "px", "label": "Padding Left/Right", "default": 10 },
    {
      "type": "header",
      "content": "Block Border"
    },
    { "type": "range", "id": "border_width", "min": 0, "max": 10, "step": 1, "unit": "px", "label": "Border Width", "default": 1 },
    { "type": "color", "id": "border_color", "label": "Border Color", "default": "#E0E0E0" },
    { "type": "range", "id": "border_radius", "min": 0, "max": 50, "step": 1, "unit": "px", "label": "Border Radius", "default": 8 },
    {
      "type": "header",
      "content": "Header Text"
    },
    {
      "type": "text",
      "id": "header_title",
      "label": "Header Title",
      "default": "Build Your Custom Box"
    },
    {
      "type": "richtext",
      "id": "header_subtitle",
      "label": "Header Subtitle",
      "default": "<p>Select your favorite flavors and build your perfect bundle.</p>"
    },
    { "type": "color", "id": "header_title_color", "label": "Title Color", "default": "#333333" },
    { "type": "range", "id": "header_title_font_size_desktop", "min": 16, "max": 48, "step": 1, "unit": "px", "label": "Title Font Size (Desktop)", "default": 28 },
    { "type": "range", "id": "header_title_font_size_mobile", "min": 14, "max": 36, "step": 1, "unit": "px", "label": "Title Font Size (Mobile)", "default": 22 },
    { "type": "select", "id": "header_title_font_weight", "label": "Title Font Weight", "options": [ {"value": "400", "label": "Normal"}, {"value": "700", "label": "Bold"} ], "default": "700" },
    { "type": "range", "id": "header_title_margin_bottom", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Title Margin Bottom", "default": 8 },
    { "type": "color", "id": "header_subtitle_color", "label": "Subtitle Color", "default": "#555555" },
    { "type": "range", "id": "header_subtitle_font_size_desktop", "min": 12, "max": 24, "step": 1, "unit": "px", "label": "Subtitle Font Size (Desktop)", "default": 16 },
    { "type": "range", "id": "header_subtitle_font_size_mobile", "min": 10, "max": 20, "step": 1, "unit": "px", "label": "Subtitle Font Size (Mobile)", "default": 14 },
    { "type": "select", "id": "header_text_align", "label": "Header Text Align", "options": [ {"value": "left", "label": "Left"}, {"value": "center", "label": "Center"}, {"value": "right", "label": "Right"} ], "default": "center" },
    { "type": "range", "id": "header_margin_bottom", "min": 0, "max": 50, "step": 2, "unit": "px", "label": "Header Section Margin Bottom", "default": 20 },
    {
      "type": "header",
      "content": "Purchase Type Toggle"
    },
    { "type": "checkbox", "id": "show_purchase_type_toggle", "label": "Show Subscribe/Onetime Toggle", "default": true },
    { "type": "text", "id": "subscribe_button_text", "label": "Subscribe Button Text", "default": "Subscribe & Save" },
    { "type": "text", "id": "onetime_button_text", "label": "One-Time Purchase Button Text", "default": "One-time Purchase" },
    { "type": "text", "id": "save_badge_text", "label": "Save Badge Text (for Subscribe)", "default": "SAVE 38%", "info": "Leave blank to hide badge, or rely on API data for dynamic text." },
    { "type": "color", "id": "save_badge_bg_color", "label": "Save Badge BG Color", "default": "#4CAF50" },
    { "type": "color", "id": "save_badge_text_color", "label": "Save Badge Text Color", "default": "#FFFFFF" },
    { "type": "range", "id": "save_badge_font_size", "min": 8, "max": 16, "step": 1, "unit": "px", "label": "Save Badge Font Size", "default": 10 },
    { "type": "range", "id": "save_badge_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Save Badge Border Radius", "default": 4 },
    { "type": "color", "id": "purchase_options_button_bg_default", "label": "Button BG (Default)", "default": "#F5F5F5" },
    { "type": "color", "id": "purchase_options_button_text_default", "label": "Button Text (Default)", "default": "#333333" },
    { "type": "color", "id": "purchase_options_button_bg_active", "label": "Button BG (Active)", "default": "#000000" },
    { "type": "color", "id": "purchase_options_button_text_active", "label": "Button Text (Active)", "default": "#FFFFFF" },
    { "type": "color", "id": "purchase_options_button_bg_hover", "label": "Button BG (Hover)", "default": "#E0E0E0" },
    { "type": "color", "id": "purchase_options_button_text_hover", "label": "Button Text (Hover)", "default": "#333333" },
    { "type": "range", "id": "purchase_options_button_padding_vertical", "min": 5, "max": 25, "step": 1, "unit": "px", "label": "Button Vertical Padding", "default": 12 },
    { "type": "range", "id": "purchase_options_button_padding_horizontal", "min": 5, "max": 30, "step": 1, "unit": "px", "label": "Button Horizontal Padding", "default": 15 },
    { "type": "range", "id": "purchase_options_button_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Button Font Size", "default": 14 },
    { "type": "color", "id": "purchase_options_border_color", "label": "Toggle Border Color", "default": "#CCCCCC" },
    { "type": "range", "id": "purchase_options_border_radius", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Toggle Border Radius", "default": 8 },
    { "type": "range", "id": "purchase_options_margin_bottom", "min": 0, "max": 50, "step": 2, "unit": "px", "label": "Toggle Margin Bottom", "default": 10 },
    {
      "type": "header",
      "content": "Purchase Option Price Display"
    },
    { "type": "range", "id": "purchase_options_price_margin_bottom", "min": 0, "max": 50, "step": 1, "unit": "px", "label": "Pricing Section Margin Bottom", "default": 20 },
    { "type": "range", "id": "purchase_options_price_font_size", "min": 12, "max": 24, "step": 1, "unit": "px", "label": "Base Price Font Size", "default": 16 },
    { "type": "color", "id": "purchase_options_price_text_color", "label": "Base Price Text Color", "default": "#555555" },
    { "type": "color", "id": "purchase_options_original_price_text_color", "label": "Original Price (Strikethrough) Color", "default": "#777777" },
    { "type": "range", "id": "purchase_options_final_price_font_size", "min": 14, "max": 32, "step": 1, "unit": "px", "label": "Final Price Font Size", "default": 24 },
    { "type": "color", "id": "purchase_options_final_price_text_color", "label": "Final Price Text Color", "default": "#000000" },
    { "type": "range", "id": "purchase_options_savings_text_font_size", "min": 10, "max": 20, "step": 1, "unit": "px", "label": "Savings Text Font Size", "default": 14 },
    { "type": "color", "id": "purchase_options_savings_text_color", "label": "Savings Text Color", "default": "#4CAF50" },
    {
      "type": "header",
      "content": "Quantity Tier Selection"
    },
    { "type": "select", "id": "quantity_buttons_justify_content", "label": "Buttons Alignment", "options": [ {"value": "flex-start", "label": "Left"}, {"value": "center", "label": "Center"}, {"value": "flex-end", "label": "Right"}, {"value": "space-between", "label": "Space Between"}, {"value": "space-around", "label": "Space Around"} ], "default": "center" },
    { "type": "range", "id": "quantity_buttons_gap", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Gap Between Buttons", "default": 10 },
    { "type": "range", "id": "quantity_section_margin_bottom", "min": 0, "max": 50, "step": 5, "unit": "px", "label": "Quantity Section Margin Bottom", "default": 25 },
    { "type": "color", "id": "quantity_button_bg_default", "label": "Button BG (Default)", "default": "#FFFFFF" },
    { "type": "color", "id": "quantity_button_text_default", "label": "Button Text (Default)", "default": "#333333" },
    { "type": "color", "id": "quantity_button_border_default", "label": "Button Border (Default)", "default": "#CCCCCC" },
    { "type": "color", "id": "quantity_button_bg_active", "label": "Button BG (Active)", "default": "#000000" },
    { "type": "color", "id": "quantity_button_text_active", "label": "Button Text (Active)", "default": "#FFFFFF" },
    { "type": "color", "id": "quantity_button_border_active", "label": "Button Border (Active)", "default": "#000000" },
    { "type": "color", "id": "quantity_button_bg_hover", "label": "Button BG (Hover)", "default": "#F0F0F0" },
    { "type": "color", "id": "quantity_button_text_hover", "label": "Button Text (Hover)", "default": "#333333" },
    { "type": "color", "id": "quantity_button_border_hover", "label": "Button Border (Hover)", "default": "#AAAAAA" },
    { "type": "range", "id": "quantity_button_padding_vertical", "min": 5, "max": 20, "step": 1, "unit": "px", "label": "Button Vertical Padding", "default": 10 },
    { "type": "range", "id": "quantity_button_padding_horizontal", "min": 10, "max": 30, "step": 1, "unit": "px", "label": "Button Horizontal Padding", "default": 15 },
    { "type": "range", "id": "quantity_button_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Button Font Size", "default": 14 },
    { "type": "range", "id": "quantity_button_border_radius", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Button Border Radius", "default": 6 },
    {
      "type": "header",
      "content": "Status Message (e.g., X Flavors to Go)"
    },
    { "type": "text", "id": "status_message_items_to_go_text", "label": "'Items to Go' Text", "default": "to go", "info": "Example: 'Bags to go' or 'Flavors to go'. The number and item name (bag/bags) are prepended automatically." },
    { "type": "text", "id": "status_message_all_set_text", "label": "'All Set' Text", "default": "All set! You've selected the required items.", "info": "Shown when selection is complete." },
    { "type": "color", "id": "status_message_text_color", "label": "Text Color", "default": "#333333" },
    { "type": "color", "id": "status_message_bg_color", "label": "Background Color", "default": "#F5F5F5" },
    { "type": "range", "id": "status_message_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Font Size", "default": 14 },
    { "type": "select", "id": "status_message_font_weight_strong", "label": "Font Weight for Count/Strong Text", "options": [{"value":"400", "label":"Normal"}, {"value":"700", "label":"Bold"}], "default": "700"},
    { "type": "select", "id": "status_message_text_align", "label": "Text Align", "options": [ {"value": "left", "label": "Left"}, {"value": "center", "label": "Center"}, {"value": "right", "label": "Right"} ], "default": "center" },
    { "type": "range", "id": "status_message_padding_vertical", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Vertical Padding", "default": 10 },
    { "type": "range", "id": "status_message_padding_horizontal", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Horizontal Padding", "default": 15 },
    { "type": "range", "id": "status_message_border_radius", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Border Radius", "default": 6 },
    { "type": "range", "id": "status_message_margin_bottom", "min": 0, "max": 50, "step": 2, "unit": "px", "label": "Margin Bottom", "default": 20 },
    {
      "type": "header",
      "content": "Product Variant Cards"
    },
    { "type": "range", "id": "variant_card_min_width", "min": 150, "max": 400, "step": 10, "unit": "px", "label": "Min Card Width (Desktop)", "default": 200 },
    { "type": "range", "id": "variant_card_min_width_mobile", "min": 120, "max": 300, "step": 10, "unit": "px", "label": "Min Card Width (Mobile)", "default": 150 },
    { "type": "range", "id": "variant_card_gap", "min": 5, "max": 30, "step": 1, "unit": "px", "label": "Gap Between Cards", "default": 15 },
    { "type": "range", "id": "variant_section_margin_bottom", "min": 0, "max": 50, "step": 5, "unit": "px", "label": "Variant Section Margin Bottom", "default": 25 },
    { "type": "color", "id": "variant_card_bg_color", "label": "Card Background Color", "default": "#FFFFFF" },
    { "type": "color", "id": "variant_card_border_color", "label": "Card Border Color", "default": "#E0E0E0" },
    { "type": "range", "id": "variant_card_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Card Border Radius", "default": 8 },
    { "type": "range", "id": "variant_card_padding", "min": 5, "max": 30, "step": 1, "unit": "px", "label": "Card Padding", "default": 15 },
    { "type": "text", "id": "variant_card_image_aspect_ratio", "label": "Image Aspect Ratio", "default": "1/1", "info": "e.g., 1/1, 4/3, 16/9" },
    { "type": "range", "id": "variant_card_image_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Image Border Radius", "default": 6 },
    { "type": "range", "id": "variant_card_image_margin_bottom", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Image Margin Bottom", "default": 10 },
    { "type": "color", "id": "variant_card_info_btn_bg", "label": "Info Button BG", "default": "rgba(255,255,255,0.8)" },
    { "type": "color", "id": "variant_card_info_btn_text", "label": "Info Button Text", "default": "#333333" },
    { "type": "color", "id": "variant_card_title_color", "label": "Title Color", "default": "#333333" },
    { "type": "range", "id": "variant_card_title_font_size", "min": 12, "max": 24, "step": 1, "unit": "px", "label": "Title Font Size", "default": 16 },
    { "type": "select", "id": "variant_card_title_font_weight", "label": "Title Font Weight", "options": [ {"value": "400", "label": "Normal"}, {"value": "700", "label": "Bold"} ], "default": "700" },
    { "type": "range", "id": "variant_card_title_margin_bottom", "min": 0, "max": 15, "step": 1, "unit": "px", "label": "Title Margin Bottom", "default": 5 },
    { "type": "color", "id": "variant_card_desc_color", "label": "Short Description Color", "default": "#666666" },
    { "type": "range", "id": "variant_card_desc_font_size", "min": 10, "max": 18, "step": 1, "unit": "px", "label": "Short Description Font Size", "default": 13 },
    { "type": "range", "id": "variant_card_desc_margin_bottom", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Short Description Margin Bottom", "default": 10 },
    { "type": "range", "id": "variant_card_qty_controls_margin_top", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Quantity Controls Margin Top", "default": 10 },
    { "type": "color", "id": "variant_card_qty_btn_bg", "label": "Qty +/- Button BG", "default": "#F0F0F0" },
    { "type": "color", "id": "variant_card_qty_btn_text", "label": "Qty +/- Button Text", "default": "#333333" },
    { "type": "color", "id": "variant_card_qty_btn_border", "label": "Qty +/- Button Border", "default": "#CCCCCC" },
    { "type": "color", "id": "variant_card_qty_btn_bg_hover", "label": "Qty +/- Button BG (Hover)", "default": "#E0E0E0" },
    { "type": "range", "id": "variant_card_qty_btn_border_radius", "min": 0, "max": 15, "step": 1, "unit": "px", "label": "Qty +/- Button Border Radius", "default": 4 },
    { "type": "range", "id": "variant_card_qty_text_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Qty Text Font Size", "default": 14 },
    { "type": "color", "id": "variant_card_add_btn_bg", "label": "'Add' Button BG", "default": "#000000" },
    { "type": "color", "id": "variant_card_add_btn_text", "label": "'Add' Button Text", "default": "#FFFFFF" },
    { "type": "color", "id": "variant_card_add_btn_bg_hover", "label": "'Add' Button BG (Hover)", "default": "#333333" },
    { "type": "range", "id": "variant_card_add_btn_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "'Add' Button Border Radius", "default": 6 },
    { "type": "range", "id": "variant_card_add_btn_padding_vertical", "min": 5, "max": 20, "step": 1, "unit": "px", "label": "'Add' Button Vertical Padding", "default": 8 },
    { "type": "range", "id": "variant_card_add_btn_padding_horizontal", "min": 10, "max": 30, "step": 1, "unit": "px", "label": "'Add' Button Horizontal Padding", "default": 15 },
    { "type": "range", "id": "variant_card_add_btn_font_size", "min": 12, "max": 18, "step": 1, "unit": "px", "label": "'Add' Button Font Size", "default": 14 },
    {
      "type": "header",
      "content": "Summary Section"
    },
    { "type": "range", "id": "summary_margin_top", "min": 0, "max": 50, "step": 1, "unit": "px", "label": "Margin Top", "default": 20 },
    { "type": "range", "id": "summary_margin_bottom", "min": 0, "max": 50, "step": 1, "unit": "px", "label": "Margin Bottom", "default": 20 },
    { "type": "range", "id": "summary_padding", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Padding", "default": 15 },
    { "type": "color", "id": "summary_bg_color", "label": "Background Color", "default": "#F9F9F9" },
    { "type": "color", "id": "summary_border_color", "label": "Border Color", "default": "#EDEDED" },
    { "type": "range", "id": "summary_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Border Radius", "default": 6 },
    { "type": "range", "id": "summary_text_font_size", "min": 12, "max": 22, "step": 1, "unit": "px", "label": "Text Font Size", "default": 16 },
    { "type": "color", "id": "summary_text_color", "label": "Text Color (Subtotal Label)", "default": "#333333" },
    { "type": "text", "id": "summary_savings_label", "label": "Savings Label Text", "default": "You're saving" },
    { "type": "color", "id": "summary_savings_text_color", "label": "Savings Text Color", "default": "#FFFFFF" },
    { "type": "color", "id": "summary_savings_bg_color", "label": "Savings Background Color", "default": "#4CAF50" },
    { "type": "range", "id": "summary_savings_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Savings Badge Border Radius", "default": 4 },
    {
      "type": "header",
      "content": "Add to Cart Button"
    },
    { "type": "text", "id": "atc_button_select_more_text", "label": "'Select More' Text", "default": "Select {count} more {item}", "info": "{count} and {item} are placeholders." },
    { "type": "text", "id": "at_button_item_name_singular", "label": "Item Name (Singular)", "default": "bag"},
    { "type": "text", "id": "at_button_item_name_plural", "label": "Item Name (Plural)", "default": "bags"},
    { "type": "color", "id": "atc_button_bg_enabled", "label": "BG Color (Enabled)", "default": "#000000" },
    { "type": "color", "id": "atc_button_text_enabled", "label": "Text Color (Enabled)", "default": "#FFFFFF" },
    { "type": "color", "id": "atc_button_border_enabled", "label": "Border Color (Enabled)", "default": "#000000" },
    { "type": "color", "id": "atc_button_bg_enabled_hover", "label": "BG Color (Enabled, Hover)", "default": "#333333" },
    { "type": "color", "id": "atc_button_bg_disabled", "label": "BG Color (Disabled)", "default": "#E0E0E0" },
    { "type": "color", "id": "atc_button_text_disabled", "label": "Text Color (Disabled)", "default": "#999999" },
    { "type": "color", "id": "atc_button_border_disabled", "label": "Border Color (Disabled)", "default": "#E0E0E0" },
    { "type": "range", "id": "atc_button_padding_vertical", "min": 10, "max": 30, "step": 1, "unit": "px", "label": "Vertical Padding", "default": 15 },
    { "type": "range", "id": "atc_button_padding_horizontal", "min": 10, "max": 40, "step": 1, "unit": "px", "label": "Horizontal Padding", "default": 20 },
    { "type": "range", "id": "atc_button_font_size", "min": 14, "max": 24, "step": 1, "unit": "px", "label": "Font Size", "default": 16 },
    { "type": "select", "id": "atc_button_font_weight", "label": "Font Weight", "options": [ {"value": "400", "label": "Normal"}, {"value": "700", "label": "Bold"} ], "default": "700" },
    { "type": "range", "id": "atc_button_border_radius", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Border Radius", "default": 8 },
    {
      "type": "header",
      "content": "Modal Styling"
    },
    { "type": "color", "id": "modal_bg_color", "label": "Background Color", "default": "#FFFFFF" },
    { "type": "range", "id": "modal_padding", "min": 10, "max": 50, "step": 1, "unit": "px", "label": "Padding", "default": 30 },
    { "type": "range", "id": "modal_border_radius", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Border Radius", "default": 12 },
    { "type": "range", "id": "modal_max_width", "min": 300, "max": 1000, "step": 10, "unit": "px", "label": "Max Width", "default": 700 },
    { "type": "range", "id": "modal_content_gap", "min": 10, "max": 40, "step": 1, "unit": "px", "label": "Gap between Image & Details", "default": 20 },
    { "type": "color", "id": "modal_close_btn_bg", "label": "Close Button BG", "default": "#F0F0F0" },
    { "type": "color", "id": "modal_close_btn_text", "label": "Close Button Text", "default": "#333333" },
    { "type": "color", "id": "modal_close_btn_bg_hover", "label": "Close Button BG (Hover)", "default": "#E0E0E0" },
    { "type": "range", "id": "modal_close_btn_top", "min": 5, "max": 30, "step": 1, "unit": "px", "label": "Close Button Top Offset", "default": 15 },
    { "type": "range", "id": "modal_close_btn_right", "min": 5, "max": 30, "step": 1, "unit": "px", "label": "Close Button Right Offset", "default": 15 },
    { "type": "range", "id": "modal_image_column_width_percent", "min": 20, "max": 80, "step": 5, "unit": "%", "label": "Image Column Width (%)", "default": 40 },
    { "type": "range", "id": "modal_image_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Image Border Radius", "default": 8 },
    { "type": "range", "id": "modal_image_margin_bottom", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Image Margin Bottom (Mobile Stack)", "default": 15 },
    { "type": "color", "id": "modal_title_color", "label": "Title Color", "default": "#333333" },
    { "type": "range", "id": "modal_title_font_size", "min": 16, "max": 32, "step": 1, "unit": "px", "label": "Title Font Size", "default": 24 },
    { "type": "select", "id": "modal_title_font_weight", "label": "Title Font Weight", "options": [{"value": "400", "label": "Normal"}, {"value": "700", "label": "Bold"}], "default": "700" },
    { "type": "range", "id": "modal_title_margin_bottom", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Title Margin Bottom", "default": 10 },
    { "type": "color", "id": "modal_desc_color", "label": "Description Color", "default": "#555555" },
    { "type": "range", "id": "modal_desc_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Description Font Size", "default": 15 },
    { "type": "range", "id": "modal_desc_margin_bottom", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Description Margin Bottom", "default": 15 },
    { "type": "range", "id": "modal_badge_gap", "min": 2, "max": 15, "step": 1, "unit": "px", "label": "Gap Between Badges", "default": 8 },
    { "type": "range", "id": "modal_badge_margin_bottom", "min": 0, "max": 30, "step": 1, "unit": "px", "label": "Badges Section Margin Bottom", "default": 15 },
    { "type": "color", "id": "modal_badge_font_color", "label": "Badge Font Color", "default": "#FFFFFF" },
    { "type": "range", "id": "modal_badge_font_size", "min": 8, "max": 16, "step": 1, "unit": "px", "label": "Badge Font Size", "default": 11 },
    { "type": "select", "id": "modal_badge_font_weight", "label": "Badge Font Weight", "options": [{"value": "400", "label": "Normal"}, {"value": "700", "label": "Bold"}], "default": "700" },
    { "type": "range", "id": "modal_badge_padding_vertical", "min": 2, "max": 10, "step": 1, "unit": "px", "label": "Badge Vertical Padding", "default": 4 },
    { "type": "range", "id": "modal_badge_padding_horizontal", "min": 4, "max": 15, "step": 1, "unit": "px", "label": "Badge Horizontal Padding", "default": 8 },
    { "type": "range", "id": "modal_badge_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Badge Border Radius", "default": 12 },
    { "type": "text", "id": "modal_accordion_default_header", "label": "Accordion Header Text (e.g. 'See Label')", "default": "SEE LABEL" },
    { "type": "color", "id": "modal_accordion_header_color", "label": "Accordion Header Color", "default": "#333333" },
    { "type": "range", "id": "modal_accordion_header_font_size", "min": 12, "max": 20, "step": 1, "unit": "px", "label": "Accordion Header Font Size", "default": 14 },
    { "type": "color", "id": "modal_accordion_header_bg", "label": "Accordion Header Background", "default": "#F5F5F5" },
    { "type": "range", "id": "modal_accordion_header_padding", "min": 5, "max": 20, "step": 1, "unit": "px", "label": "Accordion Header Padding", "default": 10 },
    { "type": "color", "id": "modal_accordion_header_border_color", "label": "Accordion Header Border Color", "default": "#E0E0E0" },
    { "type": "range", "id": "modal_accordion_header_border_radius", "min": 0, "max": 15, "step": 1, "unit": "px", "label": "Accordion Header Border Radius", "default": 6 },
    { "type": "color", "id": "modal_accordion_content_color", "label": "Accordion Content Color", "default": "#555555" },
    { "type": "range", "id": "modal_accordion_content_font_size", "min": 10, "max": 18, "step": 1, "unit": "px", "label": "Accordion Content Font Size", "default": 13 },
    { "type": "color", "id": "modal_accordion_content_bg", "label": "Accordion Content Background", "default": "#FFFFFF" },
    { "type": "range", "id": "modal_accordion_content_padding", "min": 5, "max": 20, "step": 1, "unit": "px", "label": "Accordion Content Padding", "default": 10 },
    { "type": "color", "id": "modal_accordion_content_border_color", "label": "Accordion Content Border Color", "default": "#E0E0E0" },
    {
      "type": "header",
      "content": "Metafield Keys"
    },
    { "type": "paragraph", "content": "Specify the metafield keys for variant-specific details. Assumes 'custom' namespace if not fully qualified." },
    { "type": "text", "id": "flavor_description_metafield", "label": "Flavor Description Metafield", "default": "custom.flavor_description", "info": "E.g., custom.flavor_description or shopify.metaobjects.flavor_profile.description" },
    { "type": "text", "id": "nutritional_info_metafield", "label": "Nutritional Info Metafield", "default": "custom.nutritional_information", "info": "Rich text or HTML for nutrition panel." },
    { "type": "text", "id": "variant_flag_metafield", "label": "Badge 1 (Flag) Metafield", "default": "custom.variant_flag", "info": "E.g., for '105mg Caffeine'" },
    { "type": "text", "id": "servings_metafield", "label": "Badge 2 (Servings) Metafield", "default": "custom.servings", "info": "E.g., for '20 Servings'" },
    { "type": "text", "id": "primary_color_metafield", "label": "Badge 1 BG Color Metafield", "default": "custom.primary_color", "info": "Hex color code for Badge 1 background." },
    { "type": "text", "id": "secondary_color_metafield", "label": "Badge 2 BG Color Metafield", "default": "custom.secondary_color", "info": "Hex color code for Badge 2 background." }
  ],
  "presets": [
    {
      "name": "Skio Dynamic Box Builder"
    }
  ]
}
{% endschema %}