{%- comment -%}
  IMPORTANT: This is a Liquid Block file.
  It's designed to be used within Shopify's Online Store 2.0 theme editor.
  This block allows merchants to configure a Skio Dynamic Box product selector.
{%- endcomment -%}

{% doc %}
  @prompt
  Create a Shopify Liquid block for a Skio Dynamic Box.
  Functional Requirements:
  1.  Data Source: Skio Dynamic Box API (`https://api.skio.com/storefront-http/get-dynamic-box`).
      -   API call method: POST.
      -   API request body: `{"productPlatformId": ["SHOPIFY_PRODUCT_GID_FROM_SETTING"]}`.
  2.  Quantity Selection:
      -   Options derived from `DynamicBox.sizeInterval` in API response.
      -   Selecting a quantity tier updates pricing and UI.
  3.  Product Variant Selection:
      -   Display `selectableProductVariants` and their nested `productVariants` from API.
      -   Each variant card shows image (`imageSrc`), title (`productVariantTitle`), price (`price`).
      -   Variant description from metafield `custom.flavor_description`.
      -   Users can add/remove variants to/from their box. Quantity of each variant can be adjusted (e.g. 2x Mocha, 1x Caramel).
  4.  Pricing:
      -   Base price per variant from `productVariants[i].price`.
      -   Discount applied based on `DynamicBox.percentDiscountTier` corresponding to the selected quantity tier.
      -   Subtotal: Sum of discounted prices of selected items.
      -   Savings: Difference between total original price and total discounted price.
      -   Subtotal and savings displayed only when the required number of items are selected.
  5.  "Items to Go" Indicator:
      -   Displays how many more items are needed to fill the box based on selected quantity tier (e.g., "2 Bags to Go").
  6.  Add to Cart Button:
      -   Disabled if not enough items are selected. Text: "Select X more bags".
      -   Enabled when the correct quantity of items is selected. Text: "Add to Cart".
      -   Button colors change based on enabled/disabled state.
  7.  Variant Modal:
      -   Opens on clicking a variant (e.g., info icon or name).
      -   Displays:
          -   Variant Image (`imageSrc`).
          -   Flavor Name (`productVariantTitle`).
          -   Flavor Description (`metafields['custom.flavor_description']`).
          -   Badges:
              -   From variant metafields: `custom.variant_flag` and `custom.servings`.
              -   Badge background colors from variant metafields: `custom.primary_color` and `custom.secondary_color`.
              -   Badge font color from schema setting.
          -   "See Label" Accordion: Expands to show nutrition facts panel.
              -   Nutrition facts content (image/HTML) from variant metafield `custom.nutritional_information`.
  8.  Exclusions:
      -   Filter chips at the top.
      -   "Can't Choose? Try our 3 Best Sellers" section.
      -   Upsell option.
  9.  Metafield Dependencies:
      -   Variant specific:
          -   `custom.flavor_description` (Text)
          -   `custom.nutritional_information` (Image URL or HTML)
          -   `custom.variant_flag` (Text)
          -   `custom.servings` (Text)
          -   `custom.primary_color` (Color hex code)
          -   `custom.secondary_color` (Color hex code)
  10. Shopify Product GID for API call will be a schema setting.

  Styling Considerations:
  -   Follow general layout of provided images (first image is primary reference for product selection, modal image for modal).
  -   All CSS namespaced with `{{ rob_custom }}`.
  -   Highly customizable via schema settings (colors, fonts, spacing, borders).
  -   Responsive design.

  UX Specifications:
  -   Dynamic updates to price, "items to go", and ATC button state.
  -   Clear visual distinction between selected/unselected states.
  -   Intuitive modal interaction for more variant details.
{% enddoc %}

{% assign rob_custom = block.id | replace: '_', '' | downcase %}

{% liquid
  assign product_gid = block.settings.main_product_gid
  assign storefront_api_token = shop.storefront_access_token
  assign current_product = all_products[block.settings.main_product_handle]
  assign initial_product_platform_id = current_product.id | default: block.settings.main_product_gid
  if initial_product_platform_id contains "gid://shopify/Product/"
    assign initial_product_platform_id_for_api = initial_product_platform_id
  else
    assign initial_product_platform_id_for_api = "gid://shopify/Product/" | append: initial_product_platform_id
  endif

  assign show_sub_save = block.settings.show_subscription_options
  assign default_purchase_option = block.settings.default_purchase_option

  assign one_time_price_initial = current_product.price
  assign subscription_price_initial = current_product.price
  assign subscription_savings_initial = 0

  if current_product.selling_plan_groups.size > 0
    for group in current_product.selling_plan_groups
      for selling_plan in group.selling_plans
        assign initial_adjustment = selling_plan.price_adjustments[0]
        if initial_adjustment.value_type == 'percentage'
          assign subscription_price_initial = current_product.price | times: initial_adjustment.value | divided_by: 100.0
          assign subscription_price_initial = current_product.price | minus: subscription_price_initial
          assign subscription_savings_initial = current_product.price | minus: subscription_price_initial
        elsif initial_adjustment.value_type == 'fixed_amount'
          assign subscription_price_initial = current_product.price | minus: initial_adjustment.value
          assign subscription_savings_initial = initial_adjustment.value
        elsif initial_adjustment.value_type == 'price'
          assign subscription_price_initial = initial_adjustment.value
          assign subscription_savings_initial = current_product.price | minus: initial_adjustment.value
        endif
        break # Use first selling plan for initial display
      endfor
      break # Use first selling plan group
    endfor
  endif

  assign initial_savings_percentage_raw = block.settings.subscribe_discount_percentage | default: 0
  if initial_savings_percentage_raw > 0
    assign subscribe_initial_price = one_time_price_initial | times: initial_savings_percentage_raw | divided_by: 100.0
    assign subscribe_initial_price = one_time_price_initial | minus: subscribe_initial_price
    assign subscribe_initial_savings_amount = one_time_price_initial | minus: subscribe_initial_price
  else
    assign subscribe_initial_price = subscription_price_initial
    assign subscribe_initial_savings_amount = subscription_savings_initial
  endif
%}

{% style %}
  :root {
    --font-stack-body-{{ rob_custom }}: {{ block.settings.font_body.family }}, {{ block.settings.font_body.fallback_families }};
    --font-weight-body-{{ rob_custom }}: {{ block.settings.font_body.weight }};
    --font-style-body-{{ rob_custom }}: {{ block.settings.font_body.style }};

    --font-stack-heading-{{ rob_custom }}: {{ block.settings.font_heading.family }}, {{ block.settings.font_heading.fallback_families }};
    --font-weight-heading-{{ rob_custom }}: {{ block.settings.font_heading.weight }};
    --font-style-heading-{{ rob_custom }}: {{ block.settings.font_heading.style }};
  }

  .skio-dynamic-box-container-{{ rob_custom }} {
    font-family: var(--font-stack-body-{{ rob_custom }});
    background-color: {{ block.settings.background_color }};
    color: {{ block.settings.text_color }};
    padding: {{ block.settings.block_padding_vertical }}px {{ block.settings.block_padding_horizontal }}px;
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
  }

  .skio-dynamic-box-container-{{ rob_custom }} h2,
  .skio-dynamic-box-container-{{ rob_custom }} h3 {
    font-family: var(--font-stack-heading-{{ rob_custom }});
    font-weight: var(--font-weight-heading-{{ rob_custom }});
    color: {{ block.settings.heading_color }};
  }

  .skio-section-{{ rob_custom }} {
    margin-bottom: {{ block.settings.section_spacing_bottom }}px;
  }

  .skio-section-title-{{ rob_custom }} {
    font-size: {{ block.settings.section_title_font_size }}px;
    font-weight: var(--font-weight-heading-{{ rob_custom }});
    margin-bottom: 15px;
    color: {{ block.settings.heading_color }};
  }

  .purchase-options-{{ rob_custom }} {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
  }

  .purchase-option-{{ rob_custom }} {
    border: 2px solid {{ block.settings.purchase_option_border_color }};
    border-radius: {{ block.settings.button_border_radius }}px;
    padding: 15px;
    cursor: pointer;
    transition: border-color 0.3s ease, background-color 0.3s ease;
    position: relative;
  }

  .purchase-option-{{ rob_custom }}.active-{{ rob_custom }} {
    border-color: {{ block.settings.purchase_option_border_active_color }};
    background-color: {{ block.settings.purchase_option_bg_active_color }};
  }
  .purchase-option-{{ rob_custom }}:hover {
    border-color: {{ block.settings.purchase_option_border_hover_color }};
  }

  .purchase-option-header-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
    font-size: 1.1em;
  }
  .purchase-option-title-{{ rob_custom }} {
    color: {{ block.settings.text_color }};
  }
  .purchase-option-price-{{ rob_custom }} {
    color: {{ block.settings.text_color }};
  }
  .purchase-option-price-original-{{ rob_custom }} {
    text-decoration: line-through;
    color: {{ block.settings.price_original_color }};
    font-size: 0.9em;
    margin-left: 5px;
  }
  .subscribe-badge-{{ rob_custom }} {
    background-color: {{ block.settings.subscribe_badge_bg_color }};
    color: {{ block.settings.subscribe_badge_text_color }};
    padding: 3px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    font-weight: bold;
    position: absolute;
    top: -12px;
    left: 15px;
  }
  .purchase-option-benefits-{{ rob_custom }} {
    font-size: 0.9em;
    margin-top: 8px;
    color: {{ block.settings.benefits_text_color }};
  }
  .purchase-option-benefits-{{ rob_custom }} ul {
    list-style: none;
    padding-left: 0;
    margin: 0;
  }
  .purchase-option-benefits-{{ rob_custom }} li {
    margin-bottom: 4px;
    display: flex;
    align-items: center;
  }
  .purchase-option-benefits-{{ rob_custom }} li svg {
    width: 16px;
    height: 16px;
    margin-right: 8px;
    fill: {{ block.settings.benefits_icon_color }};
  }


  .quantity-options-{{ rob_custom }} {
    display: flex;
    gap: {{ block.settings.qty_button_gap }}px;
    margin-bottom: 20px;
    flex-wrap: wrap;
  }

  .quantity-option-btn-{{ rob_custom }} {
    background-color: {{ block.settings.qty_button_bg }};
    color: {{ block.settings.qty_button_text }};
    border: 1px solid {{ block.settings.qty_button_border }};
    padding: {{ block.settings.qty_button_padding_vertical }}px {{ block.settings.qty_button_padding_horizontal }}px;
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    font-size: {{ block.settings.qty_button_font_size }}px;
    position: relative;
  }
  .quantity-option-btn-{{ rob_custom }}.best-deal-{{ rob_custom }}::before {
    content: '{{ block.settings.best_deal_text }}';
    position: absolute;
    top: -10px;
    left: 50%;
    transform: translateX(-50%);
    background-color: {{ block.settings.best_deal_badge_bg }};
    color: {{ block.settings.best_deal_badge_text }};
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 10px;
    white-space: nowrap;
  }

  .quantity-option-btn-{{ rob_custom }}:hover {
    background-color: {{ block.settings.qty_button_bg_hover }};
    color: {{ block.settings.qty_button_text_hover }};
    border-color: {{ block.settings.qty_button_border_hover }};
  }

  .quantity-option-btn-{{ rob_custom }}.active-{{ rob_custom }} {
    background-color: {{ block.settings.qty_button_bg_active }};
    color: {{ block.settings.qty_button_text_active }};
    border-color: {{ block.settings.qty_button_border_active }};
    font-weight: bold;
  }

  .items-to-go-indicator-{{ rob_custom }} {
    text-align: right;
    margin-bottom: 15px;
    font-size: {{ block.settings.items_to_go_font_size }}px;
    color: {{ block.settings.items_to_go_text_color }};
    font-weight: bold;
  }

  .product-variants-grid-{{ rob_custom }} {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax({{ block.settings.card_min_width }}px, 1fr));
    gap: {{ block.settings.card_spacing }}px;
  }

  .variant-card-{{ rob_custom }} {
    background-color: {{ block.settings.card_bg }};
    border: 1px solid {{ block.settings.card_border_color }};
    border-radius: {{ block.settings.card_border_radius }}px;
    padding: {{ block.settings.card_padding }}px;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    cursor: pointer;
  }
  .variant-card-{{ rob_custom }}:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }

  .variant-image-container-{{ rob_custom }} {
    width: 100%;
    padding-top: {{ block.settings.product_image_aspect_ratio | default: "100" }}%; /* Aspect ratio */
    position: relative;
    margin-bottom: 10px;
    background-color: #f5f5f5;
    border-radius: {{ block.settings.card_border_radius | minus: 1 }}px; /* Slightly less than card for inset look */
    overflow: hidden;
  }

  .variant-image-{{ rob_custom }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: {{ block.settings.product_image_fit | default: "contain" }};
  }

  .variant-title-{{ rob_custom }} {
    font-size: {{ block.settings.card_title_font_size }}px;
    font-weight: bold;
    color: {{ block.settings.card_title_color }};
    margin-bottom: 5px;
    min-height: calc({{ block.settings.card_title_font_size }}px * 2.4); /* Approx 2 lines */
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .variant-description-{{ rob_custom }} {
    font-size: {{ block.settings.card_description_font_size }}px;
    color: {{ block.settings.card_description_color }};
    margin-bottom: 10px;
    min-height: calc({{ block.settings.card_description_font_size }}px * 3.6); /* Approx 3 lines */
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .variant-price-{{ rob_custom }} {
    font-size: {{ block.settings.card_price_font_size }}px;
    color: {{ block.settings.card_price_color }};
    font-weight: bold;
    margin-bottom: 10px;
  }

  .variant-controls-{{ rob_custom }} {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
  }

  .quantity-adjust-btn-{{ rob_custom }} {
    background-color: {{ block.settings.plus_minus_button_bg }};
    color: {{ block.settings.plus_minus_button_text }};
    border: 1px solid {{ block.settings.plus_minus_button_border }};
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .quantity-adjust-btn-{{ rob_custom }}:hover {
    background-color: {{ block.settings.plus_minus_button_bg_hover }};
  }
  .variant-count-{{ rob_custom }} {
    margin: 0 10px;
    font-size: 16px;
    min-width: 20px;
    text-align: center;
  }

  .add-item-btn-{{ rob_custom }} {
    background-color: {{ block.settings.add_button_bg }};
    color: {{ block.settings.add_button_text }};
    border: 1px solid {{ block.settings.add_button_border }};
    padding: 8px 15px;
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    font-weight: bold;
    width: 100%;
    transition: background-color 0.3s, color 0.3s;
  }
  .add-item-btn-{{ rob_custom }}:hover {
    background-color: {{ block.settings.add_button_bg_hover }};
  }

  .summary-section-{{ rob_custom }} {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid {{ block.settings.summary_border_color }};
  }
  .summary-line-{{ rob_custom }} {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    font-size: {{ block.settings.summary_text_font_size }}px;
  }
  .summary-subtotal-{{ rob_custom }} .summary-label-{{ rob_custom }} {
    font-weight: bold;
    color: {{ block.settings.summary_text_color }};
  }
  .summary-subtotal-{{ rob_custom }} .summary-value-{{ rob_custom }} {
    font-weight: bold;
    color: {{ block.settings.summary_text_color }};
  }
  .summary-savings-{{ rob_custom }} .summary-label-{{ rob_custom }} {
    color: {{ block.settings.savings_text_color }};
  }
  .summary-savings-{{ rob_custom }} .summary-value-{{ rob_custom }} {
    color: {{ block.settings.savings_text_color }};
    font-weight: bold;
  }


  .add-to-cart-btn-{{ rob_custom }} {
    background-color: {{ block.settings.atc_button_bg_enabled }};
    color: {{ block.settings.atc_button_text_enabled }};
    border: none;
    padding: 15px;
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    font-size: {{ block.settings.atc_font_size }}px;
    font-weight: bold;
    width: 100%;
    text-align: center;
    margin-top: 20px;
    transition: background-color 0.3s, opacity 0.3s;
  }

  .add-to-cart-btn-{{ rob_custom }}:disabled {
    background-color: {{ block.settings.atc_button_bg_disabled }};
    color: {{ block.settings.atc_button_text_disabled }};
    cursor: not-allowed;
    opacity: 0.7;
  }

  /* Modal Styles */
  .modal-overlay-{{ rob_custom }} {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0s linear 0.3s;
  }
  .modal-overlay-{{ rob_custom }}.active-{{ rob_custom }} {
    opacity: 1;
    visibility: visible;
    transition-delay: 0s;
  }

  .modal-content-{{ rob_custom }} {
    background-color: {{ block.settings.modal_bg }};
    color: {{ block.settings.modal_text_color }};
    padding: {{ block.settings.modal_padding }}px;
    border-radius: {{ block.settings.modal_border_radius }}px;
    width: 90%;
    max-width: {{ block.settings.modal_max_width }}px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    transform: scale(0.9);
    transition: transform 0.3s ease;
  }
  .modal-overlay-{{ rob_custom }}.active-{{ rob_custom }} .modal-content-{{ rob_custom }} {
    transform: scale(1);
  }

  .modal-close-btn-{{ rob_custom }} {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 28px;
    color: {{ block.settings.modal_close_button_color }};
    cursor: pointer;
    line-height: 1;
  }

  .modal-image-{{ rob_custom }} {
    width: 100%;
    max-height: 300px;
    object-fit: contain;
    margin-bottom: 20px;
    border-radius: {{ block.settings.modal_image_border_radius }}px;
  }
  .modal-title-{{ rob_custom }} {
    font-size: {{ block.settings.modal_title_font_size }}px;
    font-weight: var(--font-weight-heading-{{ rob_custom }});
    margin-bottom: 10px;
    color: {{ block.settings.modal_heading_color }};
  }
  .modal-flavor-{{ rob_custom }} {
    font-size: {{ block.settings.modal_flavor_font_size }}px;
    font-weight: bold;
    margin-bottom: 15px;
    color: {{ block.settings.modal_text_color }};
  }
  .modal-description-{{ rob_custom }} {
    font-size: {{ block.settings.modal_description_font_size }}px;
    margin-bottom: 20px;
    line-height: 1.6;
    color: {{ block.settings.modal_text_color }};
  }
  .modal-badges-{{ rob_custom }} {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    flex-wrap: wrap;
  }
  .modal-badge-{{ rob_custom }} {
    padding: 5px 12px;
    border-radius: {{ block.settings.badge_border_radius }}px;
    font-size: {{ block.settings.badge_font_size }}px;
    font-weight: bold;
    color: {{ block.settings.badge_font_color }};
  }

  .accordion-{{ rob_custom }} {
    margin-bottom: 20px;
  }
  .accordion-header-{{ rob_custom }} {
    background-color: {{ block.settings.accordion_header_bg }};
    color: {{ block.settings.accordion_header_text }};
    padding: 12px 15px;
    border: 1px solid {{ block.settings.accordion_border_color }};
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
  }
  .accordion-content-{{ rob_custom }} {
    background-color: {{ block.settings.accordion_content_bg }};
    border: 1px solid {{ block.settings.accordion_border_color }};
    border-top: none;
    padding: 15px;
    border-radius: 0 0 {{ block.settings.button_border_radius }}px {{ block.settings.button_border_radius }}px;
    display: none; /* Hidden by default */
  }
  .accordion-content-{{ rob_custom }}.active-{{ rob_custom }} {
    display: block;
  }
  .accordion-content-{{ rob_custom }} img {
    max-width: 100%;
    height: auto;
    border-radius: {{ block.settings.button_border_radius }}px;
  }
  .accordion-arrow-{{ rob_custom }} {
    transition: transform 0.3s ease;
  }
  .accordion-header-{{ rob_custom }}.active-{{ rob_custom }} .accordion-arrow-{{ rob_custom }} {
    transform: rotate(180deg);
  }

  .skio-loader-{{ rob_custom }} {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
    font-size: 1.2em;
  }
  .skio-error-{{ rob_custom }} {
    color: red;
    text-align: center;
    padding: 20px;
    border: 1px solid red;
    background-color: #ffebeb;
    border-radius: {{ block.settings.button_border_radius }}px;
  }

  /* Helper class for screen readers */
  .sr-only-{{ rob_custom }} {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  @media (max-width: 768px) {
    .product-variants-grid-{{ rob_custom }} {
      grid-template-columns: repeat(auto-fill, minmax({{ block.settings.card_min_width_mobile }}px, 1fr));
    }
    .modal-content-{{ rob_custom }} {
      padding: {{ block.settings.modal_padding_mobile }}px;
    }
    .skio-section-title-{{ rob_custom }} {
      font-size: {{ block.settings.section_title_font_size_mobile }}px;
    }
  }

{% endstyle %}

<skio-dynamic-box-{{ rob_custom }}
  {{ block.shopify_attributes }}
  data-rob-custom="{{ rob_custom }}"
  data-product-platform-id="{{ initial_product_platform_id_for_api }}"
  data-storefront-api-token="{{ storefront_api_token }}"
  data-currency-code="{{ cart.currency.iso_code }}"
  data-money-format="{{ shop.money_format | replace: '"', "'" }}"
  data-metafield-flavor-description="{{ block.settings.metafield_flavor_description }}"
  data-metafield-nutritional-info="{{ block.settings.metafield_nutritional_info }}"
  data-metafield-variant-flag="{{ block.settings.metafield_variant_flag }}"
  data-metafield-servings="{{ block.settings.metafield_servings }}"
  data-metafield-badge-primary-color="{{ block.settings.metafield_badge_primary_color }}"
  data-metafield-badge-secondary-color="{{ block.settings.metafield_badge_secondary_color }}"
  data-label-bag="{{ block.settings.label_item_singular | escape }}"
  data-label-bags="{{ block.settings.label_item_plural | escape }}"
  data-label-to-go-singular="{{ block.settings.items_to_go_text_singular | escape }}"
  data-label-to-go-plural="{{ block.settings.items_to_go_text_plural | escape }}"
  data-label-atc-select-more-singular="{{ block.settings.atc_button_text_select_more_singular | escape }}"
  data-label-atc-select-more-plural="{{ block.settings.atc_button_text_select_more_plural | escape }}"
  data-label-atc-add-to-cart="{{ block.settings.atc_button_text_add | escape }}"
  data-label-subtotal="{{ block.settings.subtotal_label | escape }}"
  data-label-savings="{{ block.settings.savings_label | escape }}"
  data-label-see-label="{{ block.settings.modal_see_label_text | escape }}"
  data-label-add-item-btn="{{ block.settings.add_item_btn_text | escape }}"
  data-default-purchase-option="{{ default_purchase_option }}"
  data-subscribe-discount-percentage="{{ block.settings.subscribe_discount_percentage }}"
  data-subscribe-benefits="{{ block.settings.subscribe_benefits | escape }}"
  data-best-deal-tier="{{ block.settings.best_deal_tier }}"
>
  <div class="skio-dynamic-box-container-{{ rob_custom }}">
    <div class="skio-loader-{{ rob_custom }}">
      {{ 'general.loading' | t }}
    </div>
    <div class="skio-error-{{ rob_custom }}" style="display: none;"></div>
    <div class="skio-content-{{ rob_custom }}" style="display: none;">

      {% if show_sub_save %}
        <div class="purchase-options-{{ rob_custom }} skio-section-{{ rob_custom }}">
            {% if block.settings.subscribe_title != blank %}
              <div class="subscribe-badge-{{ rob_custom }}">{{ block.settings.subscribe_badge_text }}</div>
            {% endif %}
          <div class="purchase-option-{{ rob_custom }} subscription-option-{{ rob_custom }}{% if default_purchase_option == 'subscribe' %} active-{{ rob_custom }}{% endif %}" data-option="subscribe">
            <div class="purchase-option-header-{{ rob_custom }}">
              <span class="purchase-option-title-{{ rob_custom }}">{{ block.settings.subscribe_title }}</span>
              <span class="purchase-option-price-{{ rob_custom }}">
                <span class="price-value-{{ rob_custom }}"></span>
                <span class="price-value-original-{{ rob_custom }} purchase-option-price-original-{{ rob_custom }}"></span>
              </span>
            </div>
            {% if block.settings.subscribe_benefits != blank %}
            {%- assign benefits_list = block.settings.subscribe_benefits | split: ',' -%}
            <div class="purchase-option-benefits-{{ rob_custom }}">
              <ul>
                {%- for benefit in benefits_list -%}
                  <li>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg>
                    {{ benefit | strip }}
                  </li>
                {%- endfor -%}
              </ul>
            </div>
            {% endif %}
          </div>
          <div class="purchase-option-{{ rob_custom }} onetime-option-{{ rob_custom }}{% if default_purchase_option == 'onetime' %} active-{{ rob_custom }}{% endif %}" data-option="onetime">
            <div class="purchase-option-header-{{ rob_custom }}">
              <span class="purchase-option-title-{{ rob_custom }}">{{ block.settings.onetime_title }}</span>
              <span class="purchase-option-price-{{ rob_custom }} price-value-{{ rob_custom }}"></span>
            </div>
          </div>
        </div>
      {% endif %}

      <div class="quantity-selection-{{ rob_custom }} skio-section-{{ rob_custom }}">
        <h2 class="skio-section-title-{{ rob_custom }}">{{ block.settings.quantity_section_title }}</h2>
        <div class="quantity-options-{{ rob_custom }}">
          <!-- Quantity options will be rendered here by JS -->
        </div>
      </div>

      <div class="flavor-selection-{{ rob_custom }} skio-section-{{ rob_custom }}">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <h2 class="skio-section-title-{{ rob_custom }}">{{ block.settings.product_section_title }}</h2>
          <div class="items-to-go-indicator-{{ rob_custom }}"></div>
        </div>
        <div class="product-variants-grid-{{ rob_custom }}">
          <!-- Product variants will be rendered here by JS -->
        </div>
      </div>

      <div class="summary-section-{{ rob_custom }}" style="display: none;">
        <div class="summary-line-{{ rob_custom }} summary-subtotal-{{ rob_custom }}">
          <span class="summary-label-{{ rob_custom }}"></span>
          <span class="summary-value-{{ rob_custom }}"></span>
        </div>
        <div class="summary-line-{{ rob_custom }} summary-savings-{{ rob_custom }}">
          <span class="summary-label-{{ rob_custom }}"></span>
          <span class="summary-value-{{ rob_custom }}"></span>
        </div>
      </div>

      <button type="button" class="add-to-cart-btn-{{ rob_custom }}" disabled>
        <!-- Text will be set by JS -->
      </button>
    </div>
  </div>

  <div class="modal-overlay-{{ rob_custom }}">
    <div class="modal-content-{{ rob_custom }}">
      <button type="button" class="modal-close-btn-{{ rob_custom }}" aria-label="{{ 'general.accessibility.close_modal' | t }}">×</button>
      <img src="" alt="" class="modal-image-{{ rob_custom }}">
      <h3 class="modal-title-{{ rob_custom }}"></h3>
      <p class="modal-flavor-{{ rob_custom }}"></p>
      <div class="modal-badges-{{ rob_custom }}"></div>
      <p class="modal-description-{{ rob_custom }}"></p>
      <div class="accordion-{{ rob_custom }}">
        <div class="accordion-header-{{ rob_custom }}">
          <span class="accordion-title-{{ rob_custom }}"></span>
          <span class="accordion-arrow-{{ rob_custom }}">▼</span>
        </div>
        <div class="accordion-content-{{ rob_custom }}">
          <!-- Nutrition info will be rendered here -->
        </div>
      </div>
    </div>
  </div>
</skio-dynamic-box-{{ rob_custom }}>

<script>
  class SkioDynamicBox extends HTMLElement {
    constructor() {
      super();
      this.rob_custom = this.dataset.robCustom;
      this.productPlatformId = this.dataset.productPlatformId;
      this.storefrontApiToken = this.dataset.storefrontApiToken;
      this.currencyCode = this.dataset.currencyCode;
      this.moneyFormat = this.dataset.moneyFormat;

      this.metafieldKeys = {
        flavorDescription: this.dataset.metafieldFlavorDescription,
        nutritionalInfo: this.dataset.metafieldNutritionalInfo,
        variantFlag: this.dataset.metafieldVariantFlag,
        servings: this.dataset.metafieldServings,
        badgePrimaryColor: this.dataset.metafieldBadgePrimaryColor,
        badgeSecondaryColor: this.dataset.metafieldBadgeSecondaryColor,
      };

      this.labels = {
        itemSingular: this.dataset.labelBag,
        itemPlural: this.dataset.labelBags,
        toGoSingular: this.dataset.labelToGoSingular,
        toGoPlural: this.dataset.labelToGoPlural,
        atcSelectMoreSingular: this.dataset.labelAtcSelectMoreSingular,
        atcSelectMorePlural: this.dataset.labelAtcSelectMorePlural,
        atcAddToCart: this.dataset.labelAtcAddToCart,
        subtotal: this.dataset.labelSubtotal,
        savings: this.dataset.labelSavings,
        seeLabel: this.dataset.labelSeeLabel,
        addItemBtnText: this.dataset.labelAddItemBtnText
      };
      this.defaultPurchaseOption = this.dataset.defaultPurchaseOption;
      this.subscribeDiscountPercentage = parseFloat(this.dataset.subscribeDiscountPercentage) || 0;
      this.bestDealTier = parseInt(this.dataset.bestDealTier, 10);


      this.skioData = null;
      this.variantMetafields = {};
      this.selectedQuantityTier = 0;
      this.selectedVariantsMap = new Map(); // K: variantPlatformId, V: { count, data }
      this.currentPurchaseOption = this.defaultPurchaseOption; // 'subscribe' or 'onetime'
      this.sellingPlanId = null;

      this.loaderEl = this.querySelector(`.skio-loader-${this.rob_custom}`);
      this.errorEl = this.querySelector(`.skio-error-${this.rob_custom}`);
      this.contentEl = this.querySelector(`.skio-content-${this.rob_custom}`);
      this.quantityOptionsContainer = this.querySelector(`.quantity-options-${this.rob_custom}`);
      this.variantsGridContainer = this.querySelector(`.product-variants-grid-${this.rob_custom}`);
      this.itemsToGoIndicator = this.querySelector(`.items-to-go-indicator-${this.rob_custom}`);
      this.addToCartBtn = this.querySelector(`.add-to-cart-btn-${this.rob_custom}`);
      this.summarySection = this.querySelector(`.summary-section-${this.rob_custom}`);
      this.subtotalLabelEl = this.summarySection.querySelector(`.summary-subtotal-${this.rob_custom} .summary-label-${this.rob_custom}`);
      this.subtotalValueEl = this.summarySection.querySelector(`.summary-subtotal-${this.rob_custom} .summary-value-${this.rob_custom}`);
      this.savingsLabelEl = this.summarySection.querySelector(`.summary-savings-${this.rob_custom} .summary-label-${this.rob_custom}`);
      this.savingsValueEl = this.summarySection.querySelector(`.summary-savings-${this.rob_custom} .summary-value-${this.rob_custom}`);

      this.modalOverlay = this.querySelector(`.modal-overlay-${this.rob_custom}`);
      this.modalImage = this.modalOverlay.querySelector(`.modal-image-${this.rob_custom}`);
      this.modalTitle = this.modalOverlay.querySelector(`.modal-title-${this.rob_custom}`);
      this.modalFlavor = this.modalOverlay.querySelector(`.modal-flavor-${this.rob_custom}`);
      this.modalBadges = this.modalOverlay.querySelector(`.modal-badges-${this.rob_custom}`);
      this.modalDescription = this.modalOverlay.querySelector(`.modal-description-${this.rob_custom}`);
      this.modalAccordionHeader = this.modalOverlay.querySelector(`.accordion-header-${this.rob_custom}`);
      this.modalAccordionContent = this.modalOverlay.querySelector(`.accordion-content-${this.rob_custom}`);
      this.modalAccordionTitle = this.modalOverlay.querySelector('.accordion-title-{{ rob_custom }}');


      if (this.querySelector(`.purchase-options-${this.rob_custom}`)) {
        this.purchaseOptionEls = this.querySelectorAll(`.purchase-option-${this.rob_custom}`);
        this.subscribeOptionEl = this.querySelector(`.subscription-option-${this.rob_custom}`);
        this.onetimeOptionEl = this.querySelector(`.onetime-option-${this.rob_custom}`);
      }
    }

    async connectedCallback() {
      console.log('Skio Dynamic Box Initializing with product GID:', this.productPlatformId);
      this.attachEventListeners();
      try {
        await this.fetchSkioData();
        if (this.skioData && this.skioData.DynamicBox) {
          const variantGids = this.getAllVariantGids();
          if (variantGids.length > 0) {
            await this.fetchVariantMetafields(variantGids);
          }
          this.renderInitialUI();
          this.loaderEl.style.display = 'none';
          this.contentEl.style.display = 'block';
          this.updatePurchaseOptionPrices(); // Initial price update for S&S / Onetime
        } else {
          throw new Error('Failed to load Skio dynamic box data or data is malformed.');
        }
      } catch (error) {
        console.error('Error initializing Skio Dynamic Box:', error);
        this.showError(error.message);
      }
    }

    attachEventListeners() {
        if (this.purchaseOptionEls) {
            this.purchaseOptionEls.forEach(optionEl => {
                optionEl.addEventListener('click', () => this.handlePurchaseOptionChange(optionEl.dataset.option));
            });
        }
        this.addToCartBtn.addEventListener('click', () => this.handleAddToCart());
        this.modalOverlay.addEventListener('click', (e) => {
            if (e.target === this.modalOverlay) this.closeModal();
        });
        this.modalOverlay.querySelector(`.modal-close-btn-${this.rob_custom}`).addEventListener('click', () => this.closeModal());
        this.modalAccordionHeader.addEventListener('click', () => this.toggleAccordion());
    }

    handlePurchaseOptionChange(option) {
        this.currentPurchaseOption = option;
        console.log('Purchase option changed to:', this.currentPurchaseOption);

        this.purchaseOptionEls.forEach(el => el.classList.remove(`active-${this.rob_custom}`));
        if (option === 'subscribe' && this.subscribeOptionEl) {
            this.subscribeOptionEl.classList.add(`active-${this.rob_custom}`);
        } else if (option === 'onetime' && this.onetimeOptionEl) {
            this.onetimeOptionEl.classList.add(`active-${this.rob_custom}`);
        }
        this.updatePricingAndSummary();
    }


    async fetchSkioData() {
      console.log('Fetching Skio data for GID:', this.productPlatformId);
      const response = await fetch('https://api.skio.com/storefront-http/get-dynamic-box', {
        method: 'POST',
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ "productPlatformId": [this.productPlatformId] })
      });
      if (!response.ok) {
        const errorData = await response.text();
        console.error('Skio API Error Response:', errorData);
        throw new Error(`Skio API request failed: ${response.status} ${response.statusText}. ${errorData}`);
      }
      this.skioData = await response.json();
      console.log('Skio API Response:', this.skioData);
      if (!this.skioData.ok || !this.skioData.DynamicBox) {
        throw new Error('Skio API returned an error or malformed data.');
      }
    }

    getAllVariantGids() {
      const gids = new Set();
      this.skioData.DynamicBox.selectableProductVariants.forEach(product => {
        product.productVariants.forEach(variant => gids.add(variant.platformId));
      });
      return Array.from(gids);
    }

    async fetchVariantMetafields(variantGids) {
      if (!this.storefrontApiToken || variantGids.length === 0) {
        console.warn('Storefront API token not available or no GIDs to fetch.');
        return;
      }
      const query = `
        query getVariantMetafields($ids: [ID!]!) {
          nodes(ids: $ids) {
            ... on ProductVariant {
              id
              metafieldFlavorDescription: metafield(namespace: "${this.metafieldKeys.flavorDescription.split('.')[0]}", key: "${this.metafieldKeys.flavorDescription.split('.')[1]}") { value }
              metafieldNutritionalInfo: metafield(namespace: "${this.metafieldKeys.nutritionalInfo.split('.')[0]}", key: "${this.metafieldKeys.nutritionalInfo.split('.')[1]}") { value }
              metafieldVariantFlag: metafield(namespace: "${this.metafieldKeys.variantFlag.split('.')[0]}", key: "${this.metafieldKeys.variantFlag.split('.')[1]}") { value }
              metafieldServings: metafield(namespace: "${this.metafieldKeys.servings.split('.')[0]}", key: "${this.metafieldKeys.servings.split('.')[1]}") { value }
              metafieldBadgePrimaryColor: metafield(namespace: "${this.metafieldKeys.badgePrimaryColor.split('.')[0]}", key: "${this.metafieldKeys.badgePrimaryColor.split('.')[1]}") { value }
              metafieldBadgeSecondaryColor: metafield(namespace: "${this.metafieldKeys.badgeSecondaryColor.split('.')[0]}", key: "${this.metafieldKeys.badgeSecondaryColor.split('.')[1]}") { value }
            }
          }
        }`;

      try {
        const response = await fetch(`/api/2023-07/graphql.json`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Storefront-Access-Token': this.storefrontApiToken,
          },
          body: JSON.stringify({ query, variables: { ids: variantGids } }),
        });
        const jsonResponse = await response.json();
        console.log('GraphQL Metafields Response:', jsonResponse);
        if (jsonResponse.data && jsonResponse.data.nodes) {
          jsonResponse.data.nodes.forEach(node => {
            if (node && node.id) {
              this.variantMetafields[node.id] = {
                flavorDescription: node.metafieldFlavorDescription ? node.metafieldFlavorDescription.value : '',
                nutritionalInfo: node.metafieldNutritionalInfo ? node.metafieldNutritionalInfo.value : '',
                variantFlag: node.metafieldVariantFlag ? node.metafieldVariantFlag.value : '',
                servings: node.metafieldServings ? node.metafieldServings.value : '',
                badgePrimaryColor: node.metafieldBadgePrimaryColor ? node.metafieldBadgePrimaryColor.value : '#cccccc',
                badgeSecondaryColor: node.metafieldBadgeSecondaryColor ? node.metafieldBadgeSecondaryColor.value : '#eeeeee',
              };
            }
          });
        }
      } catch (error) {
        console.error('Error fetching variant metafields:', error);
      }
    }

    renderInitialUI() {
      this.renderQuantityOptions();
      this.renderProductVariants();
      if (this.skioData.DynamicBox.sizeInterval && this.skioData.DynamicBox.sizeInterval.length > 0) {
        // Auto-select the first quantity option if none is selected by default
        const firstQtyOption = this.skioData.DynamicBox.sizeInterval[0];
        this.handleQuantityTierSelection(firstQtyOption);

        // Activate the first button visually
        const firstQtyButton = this.quantityOptionsContainer.querySelector(`.quantity-option-btn-${this.rob_custom}`);
        if (firstQtyButton) {
            firstQtyButton.classList.add(`active-${this.rob_custom}`);
        }
      }
      this.updateItemsToGoIndicator();
      this.updateAddToCartButton();
      this.updatePricingAndSummary();
      this.modalAccordionTitle.textContent = this.labels.seeLabel;
    }

    renderQuantityOptions() {
      this.quantityOptionsContainer.innerHTML = '';
      const tiers = this.skioData.DynamicBox.sizeInterval || [];
      tiers.forEach(tier => {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.classList.add(`quantity-option-btn-${this.rob_custom}`);
        btn.textContent = `${tier} ${tier === 1 ? this.labels.itemSingular : this.labels.itemPlural}`;
        btn.dataset.tier = tier;
        if (tier === this.bestDealTier) {
          btn.classList.add(`best-deal-${this.rob_custom}`);
        }
        btn.addEventListener('click', () => this.handleQuantityTierSelection(tier, btn));
        this.quantityOptionsContainer.appendChild(btn);
      });
    }

    handleQuantityTierSelection(tier, clickedButton = null) {
        this.selectedQuantityTier = tier;
        console.log('Selected quantity tier:', tier);

        // Update active class on buttons
        this.quantityOptionsContainer.querySelectorAll(`.quantity-option-btn-${this.rob_custom}`).forEach(b => {
            b.classList.remove(`active-${this.rob_custom}`);
        });
        if (clickedButton) {
            clickedButton.classList.add(`active-${this.rob_custom}`);
        } else { // If called without a button (e.g. initial load)
            const matchingButton = this.quantityOptionsContainer.querySelector(`[data-tier="${tier}"]`);
            if (matchingButton) {
                matchingButton.classList.add(`active-${this.rob_custom}`);
            }
        }

        // If total selected items exceed new tier, we might need to adjust.
        // For simplicity, we'll just update UI and let user adjust.
        // A more complex logic could auto-remove items or cap additions.
        this.updateItemsToGoIndicator();
        this.updateAddToCartButton();
        this.updatePricingAndSummary();
        this.updatePurchaseOptionPrices();
    }

    renderProductVariants() {
      this.variantsGridContainer.innerHTML = '';
      this.skioData.DynamicBox.selectableProductVariants.forEach(productGroup => {
        productGroup.productVariants.forEach(variant => {
          const card = document.createElement('div');
          card.classList.add(`variant-card-${this.rob_custom}`);
          card.dataset.variantId = variant.platformId;

          const variantMeta = this.variantMetafields[variant.platformId] || {};

          card.innerHTML = `
            <div class="variant-image-container-${this.rob_custom}">
              <img src="${variant.imageSrc || '{{ "product-1" | placeholder_svg_tag }}'}" alt="${variant.productVariantTitle}" class="variant-image-${this.rob_custom}" loading="lazy">
            </div>
            <h3 class="variant-title-${this.rob_custom}">${variant.productVariantTitle}</h3>
            <p class="variant-description-${this.rob_custom}">${variantMeta.flavorDescription || ''}</p>
            <p class="variant-price-${this.rob_custom}">${this.formatMoney(variant.price)}</p>
            <div class="variant-controls-${this.rob_custom}">
              <!-- Controls will be added here -->
            </div>
          `;
          // Add click listener to card (excluding buttons) to open modal
          card.addEventListener('click', (e) => {
            if (!e.target.closest('button')) {
                this.openModal(variant);
            }
          });
          this.variantsGridContainer.appendChild(card);
          this.updateVariantControls(variant.platformId); // Initial render of controls
        });
      });
    }

    updateVariantControls(variantPlatformId) {
        const card = this.variantsGridContainer.querySelector(`[data-variant-id="${variantPlatformId}"]`);
        if (!card) return;
        const controlsContainer = card.querySelector(`.variant-controls-${this.rob_custom}`);
        controlsContainer.innerHTML = ''; // Clear existing controls

        const currentSelection = this.selectedVariantsMap.get(variantPlatformId);
        const count = currentSelection ? currentSelection.count : 0;

        if (count > 0) {
            // Minus button
            const minusBtn = document.createElement('button');
            minusBtn.type = 'button';
            minusBtn.classList.add(`quantity-adjust-btn-${this.rob_custom}`);
            minusBtn.innerHTML = '–';
            minusBtn.setAttribute('aria-label', `Decrease quantity of ${card.querySelector(`.variant-title-${this.rob_custom}`).textContent}`);
            minusBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.decrementVariant(variantPlatformId);
            });
            controlsContainer.appendChild(minusBtn);

            // Count display
            const countDisplay = document.createElement('span');
            countDisplay.classList.add(`variant-count-${this.rob_custom}`);
            countDisplay.textContent = count;
            controlsContainer.appendChild(countDisplay);

            // Plus button (only if total selected < tier)
            const totalSelectedItems = this.getTotalSelectedItems();
            if (totalSelectedItems < this.selectedQuantityTier) {
                const plusBtn = document.createElement('button');
                plusBtn.type = 'button';
                plusBtn.classList.add(`quantity-adjust-btn-${this.rob_custom}`);
                plusBtn.innerHTML = '+';
                plusBtn.setAttribute('aria-label', `Increase quantity of ${card.querySelector(`.variant-title-${this.rob_custom}`).textContent}`);
                plusBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.incrementVariant(variantPlatformId);
                });
                controlsContainer.appendChild(plusBtn);
            } else { // Show a disabled-like plus or just no plus
                const placeholder = document.createElement('span');
                placeholder.style.width = '30px'; // match button width
                controlsContainer.appendChild(placeholder);
            }
        } else {
            // Add button (only if total selected < tier)
            const totalSelectedItems = this.getTotalSelectedItems();
            if (totalSelectedItems < this.selectedQuantityTier) {
                const addBtn = document.createElement('button');
                addBtn.type = 'button';
                addBtn.classList.add(`add-item-btn-${this.rob_custom}`);
                addBtn.textContent = this.labels.addItemBtnText;
                addBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.incrementVariant(variantPlatformId);
                });
                controlsContainer.appendChild(addBtn);
            } else {
                const addBtn = document.createElement('button'); // Show disabled add button
                addBtn.type = 'button';
                addBtn.classList.add(`add-item-btn-${this.rob_custom}`);
                addBtn.textContent = this.labels.addItemBtnText;
                addBtn.disabled = true;
                addBtn.style.opacity = '0.5';
                addBtn.style.cursor = 'not-allowed';
                controlsContainer.appendChild(addBtn);
            }
        }
    }

    refreshAllVariantControls() {
        this.skioData.DynamicBox.selectableProductVariants.forEach(productGroup => {
            productGroup.productVariants.forEach(variant => {
                this.updateVariantControls(variant.platformId);
            });
        });
    }


    incrementVariant(variantPlatformId) {
        const totalSelectedItems = this.getTotalSelectedItems();
        if (totalSelectedItems >= this.selectedQuantityTier) {
            console.log('Max items for tier reached');
            return; // Don't allow adding more than the tier
        }

        const variantData = this.findVariantData(variantPlatformId);
        if (!variantData) return;

        if (this.selectedVariantsMap.has(variantPlatformId)) {
            this.selectedVariantsMap.get(variantPlatformId).count++;
        } else {
            this.selectedVariantsMap.set(variantPlatformId, { count: 1, data: variantData });
        }
        this.updateAfterVariantChange(variantPlatformId);
    }

    decrementVariant(variantPlatformId) {
        if (this.selectedVariantsMap.has(variantPlatformId)) {
            const selection = this.selectedVariantsMap.get(variantPlatformId);
            selection.count--;
            if (selection.count === 0) {
                this.selectedVariantsMap.delete(variantPlatformId);
            }
        }
        this.updateAfterVariantChange(variantPlatformId);
    }

    updateAfterVariantChange(changedVariantId) {
        this.updateVariantControls(changedVariantId); // Update just the changed card
        this.refreshAllVariantControls(); // Update all cards because add/remove buttons might need to change state
        this.updateItemsToGoIndicator();
        this.updateAddToCartButton();
        this.updatePricingAndSummary();
    }

    findVariantData(variantPlatformId) {
        for (const productGroup of this.skioData.DynamicBox.selectableProductVariants) {
            const found = productGroup.productVariants.find(v => v.platformId === variantPlatformId);
            if (found) return found;
        }
        return null;
    }

    getTotalSelectedItems() {
      let total = 0;
      this.selectedVariantsMap.forEach(item => total += item.count);
      return total;
    }

    updateItemsToGoIndicator() {
      const totalSelected = this.getTotalSelectedItems();
      const remaining = this.selectedQuantityTier - totalSelected;
      if (remaining > 0) {
        const text = remaining === 1 ? this.labels.toGoSingular : this.labels.toGoPlural;
        this.itemsToGoIndicator.textContent = text.replace('{count}', remaining);
        this.itemsToGoIndicator.style.display = 'block';
      } else {
        this.itemsToGoIndicator.textContent = ''; // Or a "Box Full!" message
        this.itemsToGoIndicator.style.display = 'none';
      }
    }

    updateAddToCartButton() {
      const totalSelected = this.getTotalSelectedItems();
      const remaining = this.selectedQuantityTier - totalSelected;

      if (this.selectedQuantityTier === 0) { // No quantity tier selected
        this.addToCartBtn.disabled = true;
        this.addToCartBtn.textContent = this.labels.atcAddToCart; // Or "Select Quantity"
        return;
      }

      if (remaining > 0) {
        this.addToCartBtn.disabled = true;
        const text = remaining === 1 ? this.labels.atcSelectMoreSingular : this.labels.atcSelectMorePlural;
        this.addToCartBtn.textContent = text.replace('{count}', remaining);
      } else {
        this.addToCartBtn.disabled = false;
        this.addToCartBtn.textContent = this.labels.atcAddToCart;
      }
    }

    updatePurchaseOptionPrices() {
        if (!this.skioData || !this.skioData.DynamicBox || this.selectedQuantityTier === 0) {
            // Set to default product prices if Skio data not ready or no tier selected
            if (this.subscribeOptionEl) {
                const subPriceEl = this.subscribeOptionEl.querySelector('.price-value-{{ rob_custom }}');
                const subOrigPriceEl = this.subscribeOptionEl.querySelector('.price-value-original-{{ rob_custom }}');
                // Use initial Liquid values for a placeholder
                subPriceEl.textContent = this.formatMoney({{ subscribe_initial_price | default: 0 }});
                if ({{ subscribe_initial_savings_amount | default: 0 }} > 0) {
                    subOrigPriceEl.textContent = this.formatMoney({{ one_time_price_initial | default: 0 }});
                    subOrigPriceEl.style.display = 'inline';
                } else {
                    subOrigPriceEl.style.display = 'none';
                }
            }
            if (this.onetimeOptionEl) {
                this.onetimeOptionEl.querySelector('.price-value-{{ rob_custom }}').textContent = this.formatMoney({{ one_time_price_initial | default: 0 }});
            }
            return;
        }

        // Calculate price based on a representative item (e.g., first variant price) scaled by quantity
        // This is an approximation for the header display; actual cart price is per selected item.
        let representativeItemPrice = 0;
        if (this.skioData.DynamicBox.selectableProductVariants.length > 0 &&
            this.skioData.DynamicBox.selectableProductVariants[0].productVariants.length > 0) {
            representativeItemPrice = this.skioData.DynamicBox.selectableProductVariants[0].productVariants[0].price;
        }

        const oneTimePriceForTier = representativeItemPrice * this.selectedQuantityTier;

        let subscribePriceForTier = oneTimePriceForTier;
        let originalSubPriceForTier = 0;

        const discountPercentTier = this.skioData.DynamicBox.percentDiscountTier;
        const boxDiscountPercentage = parseFloat(discountPercentTier?.[this.selectedQuantityTier.toString()] || "0");

        // Apply box discount first for one-time if applicable
        const oneTimeDiscountedPriceForTier = oneTimePriceForTier * (1 - boxDiscountPercentage / 100);

        if (this.currentPurchaseOption === 'subscribe' || this.defaultPurchaseOption === 'subscribe') { // Always calculate S&S price if it's an option
            // If there's a selling plan group for this dynamic box
            if (this.skioData.DynamicBox.sellingPlanGroup && Object.keys(this.skioData.DynamicBox.sellingPlanGroup).length > 0) {
                const firstSellingPlanGid = Object.keys(this.skioData.DynamicBox.sellingPlanGroup)[0];
                const sellingPlanInfo = this.skioData.DynamicBox.sellingPlanGroup[firstSellingPlanGid];

                if (sellingPlanInfo && sellingPlanInfo.priceAdjustmentAmount) {
                    const subDiscount = parseFloat(sellingPlanInfo.priceAdjustmentAmount);
                    if (sellingPlanInfo.priceAdjustmentType === 'PERCENTAGE') {
                        // Apply S&S discount ON TOP of box discount if applicable, or on one-time price.
                        // Skio usually applies S&S discount on the already box-discounted price.
                        subscribePriceForTier = oneTimeDiscountedPriceForTier * (1 - subDiscount / 100);
                        originalSubPriceForTier = oneTimeDiscountedPriceForTier; // Original is the box-discounted one-time price
                    } else if (sellingPlanInfo.priceAdjustmentType === 'FIXED_AMOUNT') {
                        // This is tricky. Does fixed amount apply per item or total? Assume total for now.
                        subscribePriceForTier = oneTimeDiscountedPriceForTier - (subDiscount * this.selectedQuantityTier); // This might need adjustment based on Skio logic
                        originalSubPriceForTier = oneTimeDiscountedPriceForTier;
                    } else { // price
                        subscribePriceForTier = subDiscount * this.selectedQuantityTier; // this implies 'price' is per item
                        originalSubPriceForTier = oneTimeDiscountedPriceForTier;
                    }
                } else { // Fallback to theme customizer S&S discount if Skio doesn't provide one
                    subscribePriceForTier = oneTimeDiscountedPriceForTier * (1 - this.subscribeDiscountPercentage / 100);
                    if (this.subscribeDiscountPercentage > 0) {
                      originalSubPriceForTier = oneTimeDiscountedPriceForTier;
                    }
                }
            } else { // Fallback to theme customizer S&S discount
                 subscribePriceForTier = oneTimeDiscountedPriceForTier * (1 - this.subscribeDiscountPercentage / 100);
                 if (this.subscribeDiscountPercentage > 0) {
                    originalSubPriceForTier = oneTimeDiscountedPriceForTier;
                 }
            }
        }


        if (this.subscribeOptionEl) {
            const subPriceEl = this.subscribeOptionEl.querySelector('.price-value-{{ rob_custom }}');
            const subOrigPriceEl = this.subscribeOptionEl.querySelector('.price-value-original-{{ rob_custom }}');
            subPriceEl.textContent = this.formatMoney(subscribePriceForTier);
            if (originalSubPriceForTier > 0 && originalSubPriceForTier > subscribePriceForTier) {
                subOrigPriceEl.textContent = this.formatMoney(originalSubPriceForTier);
                subOrigPriceEl.style.display = 'inline';
            } else {
                subOrigPriceEl.style.display = 'none';
            }
        }
        if (this.onetimeOptionEl) {
            this.onetimeOptionEl.querySelector('.price-value-{{ rob_custom }}').textContent = this.formatMoney(oneTimeDiscountedPriceForTier);
        }
    }


    updatePricingAndSummary() {
      if (this.selectedQuantityTier === 0 || this.getTotalSelectedItems() < this.selectedQuantityTier) {
        this.summarySection.style.display = 'none';
        return;
      }

      let totalOriginalPrice = 0;
      let totalDiscountedPrice = 0;
      const discountPercentTier = this.skioData.DynamicBox.percentDiscountTier;
      const boxDiscountPercentage = parseFloat(discountPercentTier?.[this.selectedQuantityTier.toString()] || "0");

      this.selectedVariantsMap.forEach(item => {
        const itemOriginalTotal = item.data.price * item.count;
        totalOriginalPrice += itemOriginalTotal;
        // Apply box discount to each item
        let itemDiscountedTotal = itemOriginalTotal * (1 - boxDiscountPercentage / 100);
        totalDiscountedPrice += itemDiscountedTotal;
      });

      // Apply additional subscription discount if 'subscribe' is chosen
      let finalPrice = totalDiscountedPrice;
      let finalOriginalForComparison = totalOriginalPrice; // What S&S discount compares against

      if (this.currentPurchaseOption === 'subscribe') {
          finalOriginalForComparison = totalDiscountedPrice; // S&S discount is on top of box discount
          if (this.skioData.DynamicBox.sellingPlanGroup && Object.keys(this.skioData.DynamicBox.sellingPlanGroup).length > 0) {
              const firstSellingPlanGid = Object.keys(this.skioData.DynamicBox.sellingPlanGroup)[0];
              const sellingPlanInfo = this.skioData.DynamicBox.sellingPlanGroup[firstSellingPlanGid];
              this.sellingPlanId = firstSellingPlanGid; // Store the selling plan ID

              if (sellingPlanInfo && sellingPlanInfo.priceAdjustmentAmount) {
                  const subDiscount = parseFloat(sellingPlanInfo.priceAdjustmentAmount);
                  if (sellingPlanInfo.priceAdjustmentType === 'PERCENTAGE') {
                      finalPrice = totalDiscountedPrice * (1 - subDiscount / 100);
                  } else if (sellingPlanInfo.priceAdjustmentType === 'FIXED_AMOUNT') {
                      // This is a total fixed amount for the plan, not per item.
                      // The API is unclear if this is total or per item. Assuming total for selling plan adjustment.
                      // Let's assume Skio sends adjustedPrice per variant for selling plans for more accuracy if available.
                      // For now, this simple calc:
                      finalPrice = totalDiscountedPrice - subDiscount; // This might need to be per item count if fixed amount is per item
                  } else { // 'price'
                      // If type is 'price', it's an absolute price for items under this plan.
                      // This scenario is complex for mix-and-match.
                      // Let's assume 'price' in sellingPlan is per item if displayByVariant is true
                      // This part needs clarification from Skio for dynamic boxes.
                      // Fallback: use percentage if this path isn't clear.
                      finalPrice = totalDiscountedPrice * (1 - this.subscribeDiscountPercentage / 100); // Fallback to theme setting
                  }
              } else { // Fallback to theme customizer S&S discount if Skio doesn't provide specific plan adjustment
                  finalPrice = totalDiscountedPrice * (1 - this.subscribeDiscountPercentage / 100);
              }
          } else { // Fallback to theme customizer S&S discount
              finalPrice = totalDiscountedPrice * (1 - this.subscribeDiscountPercentage / 100);
              this.sellingPlanId = null; // No specific selling plan from Skio
          }
      } else {
          this.sellingPlanId = null; // Not a subscription
      }


      const totalSavings = totalOriginalPrice - finalPrice; // Total savings from original full price

      this.subtotalLabelEl.textContent = this.labels.subtotal;
      this.subtotalValueEl.textContent = this.formatMoney(finalPrice);
      this.savingsLabelEl.textContent = this.labels.savings;
      this.savingsValueEl.textContent = this.formatMoney(totalSavings);
      this.summarySection.style.display = totalSavings > 0.005 ? 'block' : 'none'; // Show summary if there's any saving
       if (totalSavings <= 0.005) {
         this.savingsLabelEl.style.display = 'none';
         this.savingsValueEl.style.display = 'none';
      } else {
         this.savingsLabelEl.style.display = 'inline';
         this.savingsValueEl.style.display = 'inline';
      }
    }

    formatMoney(value, currency = true) {
      const amount = parseFloat(value).toFixed(2);
      if (isNaN(amount)) return "";

      let formatted = this.moneyFormat.replace('{{amount}}', amount);
      formatted = formatted.replace('{{amount_no_decimals}}', parseFloat(value).toFixed(0));
      // Add more 'amount...' style replacements as needed by Shopify's money formats
      
      if (currency) {
        // Basic currency symbol. Shopify's {{ amount | money }} handles this better.
        // This is a simplified client-side version.
        // For robust currency formatting, rely on Shopify's Liquid filters when possible,
        // or use Intl.NumberFormat if heavy client-side formatting is needed.
        // The 'money_format' from dataset should ideally have the currency symbol/code.
      }
      return formatted;
    }

    async handleAddToCart() {
      this.addToCartBtn.disabled = true;
      this.addToCartBtn.textContent = 'Processing...';

      const items = [];
      this.selectedVariantsMap.forEach((item, variantPlatformId) => {
        items.push({
          id: variantPlatformId.split('/').pop(), // Extract numeric ID
          quantity: item.count,
          // selling_plan: this.currentPurchaseOption === 'subscribe' && this.sellingPlanId ? this.sellingPlanId.split('/').pop() : null,
          properties: {
            '_skio_box_id': this.skioData.DynamicBox.boxId,
            '_skio_quantity_tier': this.selectedQuantityTier
            // Add any other properties Skio might require
          }
        });
      });
      
      // Add selling plan to the first item if applicable (Skio might have specific rules)
      if (this.currentPurchaseOption === 'subscribe' && this.sellingPlanId && items.length > 0) {
          items[0].selling_plan = this.sellingPlanId.split('/').pop();
      }


      console.log('Adding to cart:', items);

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: items })
        });
        const cartData = await response.json();
        console.log('Cart Add Response:', cartData);
        if (response.ok) {
          // Optionally redirect to cart or update mini-cart
          // window.location.href = '/cart';
          document.dispatchEvent(new CustomEvent('cart:updated', { bubbles: true, detail: cartData }));
          this.addToCartBtn.textContent = 'Added!';
          setTimeout(() => {
             this.updateAddToCartButton(); // Reset button state
          }, 2000);
        } else {
          throw new Error(cartData.description || cartData.message || 'Error adding to cart');
        }
      } catch (error) {
        console.error('Add to cart error:', error);
        this.showError(`Error adding to cart: ${error.message}`);
        this.updateAddToCartButton(); // Reset button state
      }
    }

    openModal(variantData) {
      const variantMeta = this.variantMetafields[variantData.platformId] || {};
      this.modalImage.src = variantData.imageSrc || '';
      this.modalImage.alt = variantData.productVariantTitle;
      this.modalTitle.textContent = variantData.productTitle || variantData.productVariantTitle; // Use product title if available
      this.modalFlavor.textContent = `Flavor: ${variantData.productVariantTitle}`;
      this.modalDescription.innerHTML = variantMeta.flavorDescription || 'No description available.';

      this.modalBadges.innerHTML = '';
      if (variantMeta.variantFlag) {
        const flagBadge = document.createElement('span');
        flagBadge.classList.add(`modal-badge-${this.rob_custom}`);
        flagBadge.textContent = variantMeta.variantFlag;
        flagBadge.style.backgroundColor = variantMeta.badgePrimaryColor || '#007bff';
        this.modalBadges.appendChild(flagBadge);
      }
      if (variantMeta.servings) {
        const servingsBadge = document.createElement('span');
        servingsBadge.classList.add(`modal-badge-${this.rob_custom}`);
        servingsBadge.textContent = variantMeta.servings;
        servingsBadge.style.backgroundColor = variantMeta.badgeSecondaryColor || '#6c757d';
        this.modalBadges.appendChild(servingsBadge);
      }

      // Nutritional Info
      this.modalAccordionContent.innerHTML = ''; // Clear previous
      if (variantMeta.nutritionalInfo) {
        // Check if it's an image URL or HTML
        if (variantMeta.nutritionalInfo.match(/\.(jpeg|jpg|gif|png)$/) != null) {
            const img = document.createElement('img');
            img.src = variantMeta.nutritionalInfo;
            img.alt = `${variantData.productVariantTitle} Nutritional Information`;
            img.style.maxWidth = '100%'; // Ensure it fits
            this.modalAccordionContent.appendChild(img);
        } else { // Assume HTML content
            this.modalAccordionContent.innerHTML = variantMeta.nutritionalInfo;
        }
        this.modalAccordionHeader.style.display = 'flex';
      } else {
        this.modalAccordionHeader.style.display = 'none';
      }


      this.modalOverlay.classList.add(`active-${this.rob_custom}`);
      document.body.style.overflow = 'hidden'; // Prevent background scrolling
    }

    closeModal() {
      this.modalOverlay.classList.remove(`active-${this.rob_custom}`);
      document.body.style.overflow = '';
      // Reset accordion state if needed
      if (this.modalAccordionContent.classList.contains(`active-${this.rob_custom}`)) {
          this.toggleAccordion();
      }
    }

    toggleAccordion() {
        this.modalAccordionContent.classList.toggle(`active-${this.rob_custom}`);
        this.modalAccordionHeader.classList.toggle(`active-${this.rob_custom}`);
    }

    showError(message) {
      this.loaderEl.style.display = 'none';
      this.contentEl.style.display = 'none';
      this.errorEl.textContent = `Error: ${message}`;
      this.errorEl.style.display = 'block';
    }
  }

  customElements.define('skio-dynamic-box-{{ rob_custom }}', SkioDynamicBox);
</script>

{% schema %}
{
  "name": "Skio Dynamic Box",
  "tag": "section",
  "class": "shopify-section-skio-dynamic-box",
  "settings": [
    {
      "type": "header",
      "content": "Skio API Configuration"
    },
    {
      "type": "text",
      "id": "main_product_gid",
      "label": "Skio Product GID",
      "info": "Enter the Shopify Product GID (e.g., gid://shopify/Product/1234567890) for the Skio Dynamic Box. This can be found in the URL when editing a product in Shopify Admin (the number at the end)."
    },
    {
      "type": "product",
      "id": "main_product_handle",
      "label": "Fallback Product for Prices",
      "info": "Select the main product. Used for initial price display if API is slow or S&S options are shown before Skio loads."
    },
    {
      "type": "header",
      "content": "Subscription Options"
    },
    {
      "type": "checkbox",
      "id": "show_subscription_options",
      "label": "Show Subscription vs One-Time Options",
      "default": true
    },
    {
      "type": "radio",
      "id": "default_purchase_option",
      "label": "Default Purchase Option",
      "options": [
        { "value": "subscribe", "label": "Subscribe & Save" },
        { "value": "onetime", "label": "One-Time Purchase" }
      ],
      "default": "subscribe"
    },
    {
      "type": "text",
      "id": "subscribe_title",
      "label": "Subscription Option Title",
      "default": "Subscribe & Save"
    },
    {
      "type": "text",
      "id": "subscribe_badge_text",
      "label": "Subscription Badge Text",
      "default": "SAVE 38% ON FIRST ORDER"
    },
    {
      "type": "text",
      "id": "subscribe_benefits",
      "label": "Subscription Benefits",
      "info": "Comma-separated list of benefits. E.g. Free shipping,15% OFF future orders",
      "default": "FREE SHIPPING on first order,15% OFF future orders,NO CONTRACT cancel easily,OUT OF STOCK PROTECTION"
    },
    {
      "type": "range",
      "id": "subscribe_discount_percentage",
      "label": "Fallback S&S Discount (%)",
      "min": 0,
      "max": 50,
      "step": 1,
      "unit": "%",
      "default": 15,
      "info": "Fallback discount if Skio API doesn't provide one for S&S. Applied on top of box discount."
    },
    {
      "type": "text",
      "id": "onetime_title",
      "label": "One-Time Purchase Option Title",
      "default": "One-Time Purchase"
    },
    {
      "type": "header",
      "content": "Section Titles & Labels"
    },
    {
      "type": "text",
      "id": "quantity_section_title",
      "label": "Quantity Section Title",
      "default": "1. Select Quantity"
    },
    {
      "type": "text",
      "id": "product_section_title",
      "label": "Product Selection Title",
      "default": "2. Select Flavors"
    },
    {
      "type": "text",
      "id": "label_item_singular",
      "label": "Item Label (Singular)",
      "default": "Bag"
    },
    {
      "type": "text",
      "id": "label_item_plural",
      "label": "Item Label (Plural)",
      "default": "Bags"
    },
    {
      "type": "text",
      "id": "best_deal_text",
      "label": "'Best Deal' Badge Text",
      "default": "BEST DEAL"
    },
    {
      "type": "number",
      "id": "best_deal_tier",
      "label": "Quantity Tier for 'Best Deal' Badge",
      "info": "Enter the quantity (e.g., 4 for '4 Bags') that should show the 'Best Deal' badge.",
      "default": 4
    },
    {
      "type": "text",
      "id": "items_to_go_text_singular",
      "label": "'Items to Go' (Singular)",
      "default": "{count} Bag to Go"
    },
    {
      "type": "text",
      "id": "items_to_go_text_plural",
      "label": "'Items to Go' (Plural)",
      "default": "{count} Bags to Go"
    },
    {
      "type": "text",
      "id": "atc_button_text_add",
      "label": "Add to Cart Button Text (Enabled)",
      "default": "Add to Cart"
    },
    {
      "type": "text",
      "id": "atc_button_text_select_more_singular",
      "label": "Add to Cart Text (Disabled, Singular)",
      "default": "Select {count} More Bag"
    },
    {
      "type": "text",
      "id": "atc_button_text_select_more_plural",
      "label": "Add to Cart Text (Disabled, Plural)",
      "default": "Select {count} More Bags"
    },
    {
      "type": "text",
      "id": "add_item_btn_text",
      "label": "Product Card 'Add' Button Text",
      "default": "Add +"
    },
    {
      "type": "text",
      "id": "subtotal_label",
      "label": "Subtotal Label",
      "default": "Subtotal:"
    },
    {
      "type": "text",
      "id": "savings_label",
      "label": "Savings Label",
      "default": "You're saving"
    },
    {
      "type": "header",
      "content": "Layout & Spacing"
    },
    {
      "type": "range",
      "id": "max_width",
      "label": "Max width of container",
      "min": 500,
      "max": 1200,
      "step": 10,
      "unit": "px",
      "default": 800
    },
    {
      "type": "range",
      "id": "block_padding_vertical",
      "label": "Block Vertical Padding",
      "min": 0, "max": 100, "step": 2, "unit": "px", "default": 20
    },
    {
      "type": "range",
      "id": "block_padding_horizontal",
      "label": "Block Horizontal Padding",
      "min": 0, "max": 50, "step": 2, "unit": "px", "default": 16
    },
    {
      "type": "range",
      "id": "section_spacing_bottom",
      "label": "Space Below Sections",
      "min": 0, "max": 50, "step": 2, "unit": "px", "default": 20
    },
    {
      "type": "range",
      "id": "qty_button_gap",
      "label": "Gap Between Quantity Buttons",
      "min": 0, "max": 20, "step": 1, "unit": "px", "default": 10
    },
    {
      "type": "range",
      "id": "card_spacing",
      "label": "Gap Between Product Cards",
      "min": 0, "max": 30, "step": 1, "unit": "px", "default": 15
    },
    {
      "type": "range",
      "id": "card_min_width",
      "label": "Min Width of Product Card (Desktop)",
      "min": 150, "max": 300, "step": 10, "unit": "px", "default": 200
    },
    {
      "type": "range",
      "id": "card_min_width_mobile",
      "label": "Min Width of Product Card (Mobile)",
      "min": 120, "max": 200, "step": 10, "unit": "px", "default": 140
    },
    {
      "type": "range",
      "id": "card_padding",
      "label": "Product Card Padding",
      "min": 5, "max": 30, "step": 1, "unit": "px", "default": 15
    },
    {
      "type": "header",
      "content": "Metafield Keys"
    },
    {
      "type": "text",
      "id": "metafield_flavor_description",
      "label": "Metafield: Flavor Description",
      "default": "custom.flavor_description",
      "info": "Namespace.key for variant flavor description."
    },
    {
      "type": "text",
      "id": "metafield_nutritional_info",
      "label": "Metafield: Nutritional Info",
      "default": "custom.nutritional_information",
      "info": "Namespace.key for variant nutritional info (image URL or HTML)."
    },
    {
      "type": "text",
      "id": "metafield_variant_flag",
      "label": "Metafield: Variant Flag Badge",
      "default": "custom.variant_flag",
      "info": "Namespace.key for primary badge text in modal."
    },
    {
      "type": "text",
      "id": "metafield_servings",
      "label": "Metafield: Servings Badge",
      "default": "custom.servings",
      "info": "Namespace.key for secondary badge text in modal."
    },
    {
      "type": "text",
      "id": "metafield_badge_primary_color",
      "label": "Metafield: Badge Primary Color",
      "default": "custom.primary_color",
      "info": "Namespace.key for variant flag badge background color."
    },
    {
      "type": "text",
      "id": "metafield_badge_secondary_color",
      "label": "Metafield: Badge Secondary Color",
      "default": "custom.secondary_color",
      "info": "Namespace.key for servings badge background color."
    },
    {
      "type": "header",
      "content": "Color Settings"
    },
    { "type": "color", "id": "background_color", "label": "Background Color", "default": "#FFFFFF" },
    { "type": "color", "id": "text_color", "label": "Default Text Color", "default": "#333333" },
    { "type": "color", "id": "heading_color", "label": "Section Heading Color", "default": "#111111" },
    { "type": "color", "id": "price_original_color", "label": "Original Price Color (Strikethrough)", "default": "#777777" },
    { "type": "color_background", "id": "subscribe_badge_bg_color", "label": "Subscription Badge Background", "default": "#FF0000" },
    { "type": "color", "id": "subscribe_badge_text_color", "label": "Subscription Badge Text", "default": "#FFFFFF" },
    { "type": "color", "id": "benefits_text_color", "label": "Benefits Text Color", "default": "#555555" },
    { "type": "color", "id": "benefits_icon_color", "label": "Benefits Icon Color", "default": "#28A745" },
    { "type": "color", "id": "purchase_option_border_color", "label": "Purchase Option Border", "default": "#DDDDDD" },
    { "type": "color", "id": "purchase_option_border_hover_color", "label": "Purchase Option Border (Hover)", "default": "#AAAAAA" },
    { "type": "color", "id": "purchase_option_border_active_color", "label": "Purchase Option Border (Active)", "default": "#007bff" },
    { "type": "color_background", "id": "purchase_option_bg_active_color", "label": "Purchase Option Background (Active)", "default": "#F0F8FF" },
    { "type": "color", "id": "qty_button_text", "label": "Quantity Button Text", "default": "#333333" },
    { "type": "color_background", "id": "qty_button_bg", "label": "Quantity Button Background", "default": "#FFFFFF" },
    { "type": "color", "id": "qty_button_border", "label": "Quantity Button Border", "default": "#CCCCCC" },
    { "type": "color", "id": "qty_button_text_hover", "label": "Quantity Button Text (Hover)", "default": "#000000" },
    { "type": "color_background", "id": "qty_button_bg_hover", "label": "Quantity Button Background (Hover)", "default": "#F0F0F0" },
    { "type": "color", "id": "qty_button_border_hover", "label": "Quantity Button Border (Hover)", "default": "#BBBBBB" },
    { "type": "color", "id": "qty_button_text_active", "label": "Quantity Button Text (Active)", "default": "#FFFFFF" },
    { "type": "color_background", "id": "qty_button_bg_active", "label": "Quantity Button Background (Active)", "default": "#007bff" },
    { "type": "color", "id": "qty_button_border_active", "label": "Quantity Button Border (Active)", "default": "#0056b3" },
    { "type": "color_background", "id": "best_deal_badge_bg", "label": "'Best Deal' Badge Background", "default": "#DC3545" },
    { "type": "color", "id": "best_deal_badge_text", "label": "'Best Deal' Badge Text", "default": "#FFFFFF" },
    { "type": "color", "id": "items_to_go_text_color", "label": "'Items to Go' Text Color", "default": "#007bff" },
    { "type": "color_background", "id": "card_bg", "label": "Product Card Background", "default": "#FFFFFF" },
    { "type": "color", "id": "card_border_color", "label": "Product Card Border", "default": "#EEEEEE" },
    { "type": "color", "id": "card_title_color", "label": "Card Title Color", "default": "#212529" },
    { "type": "color", "id": "card_description_color", "label": "Card Description Color", "default": "#6C757D" },
    { "type": "color", "id": "card_price_color", "label": "Card Price Color", "default": "#000000" },
    { "type": "color", "id": "add_button_text", "label": "Card 'Add' Button Text", "default": "#FFFFFF" },
    { "type": "color_background", "id": "add_button_bg", "label": "Card 'Add' Button Background", "default": "#28a745" },
    { "type": "color", "id": "add_button_border", "label": "Card 'Add' Button Border", "default": "#28a745" },
    { "type": "color_background", "id": "add_button_bg_hover", "label": "Card 'Add' Button BG (Hover)", "default": "#218838" },
    { "type": "color", "id": "plus_minus_button_text", "label": "+/- Button Text", "default": "#007bff" },
    { "type": "color_background", "id": "plus_minus_button_bg", "label": "+/- Button Background", "default": "#FFFFFF" },
    { "type": "color", "id": "plus_minus_button_border", "label": "+/- Button Border", "default": "#007bff" },
    { "type": "color_background", "id": "plus_minus_button_bg_hover", "label": "+/- Button BG (Hover)", "default": "#e7f3ff" },
    { "type": "color", "id": "summary_border_color", "label": "Summary Section Border", "default": "#DDDDDD" },
    { "type": "color", "id": "summary_text_color", "label": "Subtotal Text Color", "default": "#333333" },
    { "type": "color", "id": "savings_text_color", "label": "Savings Text Color", "default": "#28a745" },
    { "type": "color", "id": "atc_button_text_enabled", "label": "ATC Button Text (Enabled)", "default": "#FFFFFF" },
    { "type": "color_background", "id": "atc_button_bg_enabled", "label": "ATC Button Background (Enabled)", "default": "#007bff" },
    { "type": "color", "id": "atc_button_text_disabled", "label": "ATC Button Text (Disabled)", "default": "#6C757D" },
    { "type": "color_background", "id": "atc_button_bg_disabled", "label": "ATC Button Background (Disabled)", "default": "#E9ECEF" },
    {
      "type": "header",
      "content": "Modal Styling"
    },
    { "type": "color_background", "id": "modal_bg", "label": "Modal Background", "default": "#FFFFFF" },
    { "type": "color", "id": "modal_text_color", "label": "Modal Text Color", "default": "#333333" },
    { "type": "color", "id": "modal_heading_color", "label": "Modal Title Color", "default": "#111111" },
    { "type": "color", "id": "modal_close_button_color", "label": "Modal Close Button Color", "default": "#AAAAAA" },
    { "type": "range", "id": "modal_padding", "label": "Modal Padding (Desktop)", "min":10, "max":50, "step":1, "unit":"px", "default":30 },
    { "type": "range", "id": "modal_padding_mobile", "label": "Modal Padding (Mobile)", "min":10, "max":30, "step":1, "unit":"px", "default":20 },
    { "type": "range", "id": "modal_border_radius", "label": "Modal Border Radius", "min":0, "max":30, "step":1, "unit":"px", "default":8 },
    { "type": "range", "id": "modal_image_border_radius", "label": "Modal Image Border Radius", "min":0, "max":20, "step":1, "unit":"px", "default":6 },
    { "type": "range", "id": "modal_max_width", "label": "Modal Max Width", "min":300, "max":800, "step":10, "unit":"px", "default":600 },
    { "type": "color", "id": "badge_font_color", "label": "Modal Badge Font Color", "default": "#FFFFFF" },
    { "type": "range", "id": "badge_border_radius", "label": "Modal Badge Border Radius", "min":0, "max":20, "step":1, "unit":"px", "default":4 },
    { "type": "text", "id": "modal_see_label_text", "label": "'See Label' Text", "default": "See Label" },
    { "type": "color_background", "id": "accordion_header_bg", "label": "Accordion Header Background", "default": "#F8F9FA" },
    { "type": "color", "id": "accordion_header_text", "label": "Accordion Header Text", "default": "#343A40" },
    { "type": "color", "id": "accordion_border_color", "label": "Accordion Border Color", "default": "#DEE2E6" },
    { "type": "color_background", "id": "accordion_content_bg", "label": "Accordion Content Background", "default": "#FFFFFF" },
    {
      "type": "header",
      "content": "Typography"
    },
    { "type": "font_picker", "id": "font_heading", "label": "Headings Font", "default": "helvetica_n7" },
    { "type": "font_picker", "id": "font_body", "label": "Body Text Font", "default": "helvetica_n4" },
    { "type": "range", "id": "section_title_font_size", "label": "Section Title Font Size (Desktop)", "min":16, "max":32, "step":1, "unit":"px", "default":22 },
    { "type": "range", "id": "section_title_font_size_mobile", "label": "Section Title Font Size (Mobile)", "min":14, "max":28, "step":1, "unit":"px", "default":18 },
    { "type": "range", "id": "qty_button_font_size", "label": "Quantity Button Font Size", "min":12, "max":20, "step":1, "unit":"px", "default":14 },
    { "type": "range", "id": "items_to_go_font_size", "label": "'Items to Go' Font Size", "min":12, "max":18, "step":1, "unit":"px", "default":14 },
    { "type": "range", "id": "card_title_font_size", "label": "Card Title Font Size", "min":14, "max":22, "step":1, "unit":"px", "default":16 },
    { "type": "range", "id": "card_description_font_size", "label": "Card Description Font Size", "min":10, "max":16, "step":1, "unit":"px", "default":12 },
    { "type": "range", "id": "card_price_font_size", "label": "Card Price Font Size", "min":12, "max":20, "step":1, "unit":"px", "default":15 },
    { "type": "range", "id": "summary_text_font_size", "label": "Summary Text Font Size", "min":12, "max":20, "step":1, "unit":"px", "default":16 },
    { "type": "range", "id": "atc_font_size", "label": "Add to Cart Button Font Size", "min":14, "max":24, "step":1, "unit":"px", "default":16 },
    { "type": "range", "id": "modal_title_font_size", "label": "Modal Title Font Size", "min":18, "max":30, "step":1, "unit":"px", "default":24 },
    { "type": "range", "id": "modal_flavor_font_size", "label": "Modal Flavor Text Size", "min":14, "max":22, "step":1, "unit":"px", "default":18 },
    { "type": "range", "id": "modal_description_font_size", "label": "Modal Description Font Size", "min":12, "max":18, "step":1, "unit":"px", "default":14 },
    { "type": "range", "id": "badge_font_size", "label": "Modal Badge Font Size", "min":10, "max":16, "step":1, "unit":"px", "default":12 },
    {
      "type": "header",
      "content": "Image Settings"
    },
    {
      "type": "select",
      "id": "product_image_aspect_ratio",
      "label": "Product Image Aspect Ratio (Height % of Width)",
      "options": [ { "value": "75", "label": "4:3" }, { "value": "100", "label": "1:1 (Square)" }, { "value": "125", "label": "4:5" }, { "value": "150", "label": "2:3" } ],
      "default": "100"
    },
    {
      "type": "select",
      "id": "product_image_fit",
      "label": "Product Image Fit",
      "options": [ { "value": "cover", "label": "Cover" }, { "value": "contain", "label": "Contain" } ],
      "default": "contain"
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "label": "Global Button Border Radius",
      "min": 0, "max": 30, "step": 1, "unit": "px", "default": 5
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "label": "Product Card Border Radius",
      "min": 0, "max": 30, "step": 1, "unit": "px", "default": 8
    }
  ],
  "presets": [
    {
      "name": "Skio Dynamic Box Selector"
    }
  ]
}
{% endschema %}